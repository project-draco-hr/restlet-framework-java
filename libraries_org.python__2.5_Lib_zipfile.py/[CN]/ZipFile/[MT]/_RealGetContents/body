def _RealGetContents(self):
    'Read in the table of contents for the ZIP file.'
    fp = self.fp
    endrec = _EndRecData(fp)
    if (not endrec):
        raise BadZipfile, 'File is not a zip file'
    if (self.debug > 1):
        print endrec
    size_cd = endrec[5]
    offset_cd = endrec[6]
    self.comment = endrec[8]
    if (endrec[9] > ZIP64_LIMIT):
        x = (((endrec[9] - size_cd) - 56) - 20)
    else:
        x = (endrec[9] - size_cd)
    concat = (x - offset_cd)
    if (self.debug > 2):
        print 'given, inferred, offset', offset_cd, x, concat
    self.start_dir = (offset_cd + concat)
    fp.seek(self.start_dir, 0)
    data = fp.read(size_cd)
    fp = cStringIO.StringIO(data)
    total = 0
    while (total < size_cd):
        centdir = fp.read(46)
        total = (total + 46)
        if (centdir[0:4] != stringCentralDir):
            raise BadZipfile, 'Bad magic number for central directory'
        centdir = struct.unpack(structCentralDir, centdir)
        if (self.debug > 2):
            print centdir
        filename = fp.read(centdir[_CD_FILENAME_LENGTH])
        x = ZipInfo(filename)
        x.extra = fp.read(centdir[_CD_EXTRA_FIELD_LENGTH])
        x.comment = fp.read(centdir[_CD_COMMENT_LENGTH])
        total = (((total + centdir[_CD_FILENAME_LENGTH]) + centdir[_CD_EXTRA_FIELD_LENGTH]) + centdir[_CD_COMMENT_LENGTH])
        x.header_offset = centdir[_CD_LOCAL_HEADER_OFFSET]
        (x.create_version, x.create_system, x.extract_version, x.reserved, x.flag_bits, x.compress_type, t, d, x.CRC, x.compress_size, x.file_size) = centdir[1:12]
        (x.volume, x.internal_attr, x.external_attr) = centdir[15:18]
        x.date_time = (((d >> 9) + 1980), ((d >> 5) & 15), (d & 31), (t >> 11), ((t >> 5) & 63), ((t & 31) * 2))
        x._decodeExtra()
        x.header_offset = (x.header_offset + concat)
        self.filelist.append(x)
        self.NameToInfo[x.filename] = x
        if (self.debug > 2):
            print 'total', total
