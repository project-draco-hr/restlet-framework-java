def test_mtime_compile(self):
    '\n        This test exercises the mtime annotation that is now stored in Jython\n        compiled files.  CPython already stores an mtime in its pyc files. To\n        exercise this functionality, I am writing a py file, compiling it,\n        setting the os modified time to a very low value on the compiled file,\n        then changing the py file after a small sleep.  On CPython, this would\n        still cause a re-compile.  In Jython before this fix it would not.\n        See http://bugs.jython.org/issue1024\n        '
    import time
    os.mkdir(TESTFN)
    try:
        mod = 'mod1'
        source_path = os.path.join(TESTFN, ('%s.py' % mod))
        if is_jython:
            compiled_path = os.path.join(TESTFN, ('%s$py.class' % mod))
        else:
            compiled_path = os.path.join(TESTFN, ('%s.pyc' % mod))
        fp = open(source_path, 'w')
        fp.write("def foo(): return 'first'\n")
        fp.close()
        py_compile.compile(source_path)
        time.sleep(1)
        fp = open(source_path, 'w')
        fp.write("def foo(): return 'second'\n")
        fp.close()
        os.utime(source_path, (1, 1))
        sys.path.append(TESTFN)
        import mod1
        self.assertEquals(mod1.foo(), 'second')
    finally:
        shutil.rmtree(TESTFN)
