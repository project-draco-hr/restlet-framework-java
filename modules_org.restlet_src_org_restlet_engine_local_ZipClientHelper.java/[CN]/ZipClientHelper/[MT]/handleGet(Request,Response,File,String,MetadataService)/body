{
  if (!file.exists()) {
    response.setStatus(Status.CLIENT_ERROR_NOT_FOUND);
  }
 else {
    ZipFile zipFile;
    try {
      zipFile=new ZipFile(file);
    }
 catch (    Exception e) {
      response.setStatus(Status.SERVER_ERROR_INTERNAL,e);
      return;
    }
    Entity entity=new ZipEntryEntity(zipFile,entryName,metadataService);
    if (entity.exists()) {
      response.setStatus(Status.CLIENT_ERROR_NOT_FOUND);
    }
 else {
      final Representation output;
      if (entity.isDirectory()) {
        final Collection<Entity> children=entity.getChildren();
        final ReferenceList rl=new ReferenceList(children.size());
        String fileUri=LocalReference.createFileReference(file).toString();
        String scheme=request.getResourceRef().getScheme();
        String baseUri=scheme + ":" + fileUri+ "!/";
        for (        final Entity entry : children) {
          rl.add(baseUri + entry.getName());
        }
        output=rl.getTextRepresentation();
        try {
          zipFile.close();
        }
 catch (        IOException e) {
        }
      }
 else {
        output=entity.getRepresentation(metadataService.getDefaultMediaType(),getTimeToLive());
        output.setIdentifier(request.getResourceRef());
        Entity.updateMetadata(entity.getName(),output,true,getMetadataService());
      }
      response.setStatus(Status.SUCCESS_OK);
      response.setEntity(output);
    }
  }
}
