def test_remove(self):
    a = self.type2test([0, 0, 1])
    a.remove(1)
    self.assertEqual(a, [0, 0])
    a.remove(0)
    self.assertEqual(a, [0])
    a.remove(0)
    self.assertEqual(a, [])
    self.assertRaises(ValueError, a.remove, 0)
    self.assertRaises(TypeError, a.remove)


    class BadExc(Exception):
        pass


    class BadCmp:

        def __eq__(self, other):
            if (other == 2):
                raise BadExc()
            return False
    a = self.type2test([0, 1, 2, 3])
    self.assertRaises(BadExc, a.remove, BadCmp())


    class BadCmp2:

        def __eq__(self, other):
            raise BadExc()
    d = self.type2test('abcdefghcij')
    d.remove('c')
    self.assertEqual(d, self.type2test('abdefghcij'))
    d.remove('c')
    self.assertEqual(d, self.type2test('abdefghij'))
    self.assertRaises(ValueError, d.remove, 'c')
    self.assertEqual(d, self.type2test('abdefghij'))
    d = self.type2test(['a', 'b', BadCmp2(), 'c'])
    e = self.type2test(d)
    self.assertRaises(BadExc, d.remove, 'c')
    for (x, y) in zip(d, e):
        self.assert_((x is y))
