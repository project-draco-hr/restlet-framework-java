def test_index(self):
    u = self.type2test([0, 1])
    self.assertEqual(u.index(0), 0)
    self.assertEqual(u.index(1), 1)
    self.assertRaises(ValueError, u.index, 2)
    u = self.type2test([(-2), (-1), 0, 0, 1, 2])
    self.assertEqual(u.count(0), 2)
    self.assertEqual(u.index(0), 2)
    self.assertEqual(u.index(0, 2), 2)
    self.assertEqual(u.index((-2), (-10)), 0)
    self.assertEqual(u.index(0, 3), 3)
    self.assertEqual(u.index(0, 3, 4), 3)
    self.assertRaises(ValueError, u.index, 2, 0, (-10))
    self.assertRaises(TypeError, u.index)


    class BadExc(Exception):
        pass


    class BadCmp:

        def __eq__(self, other):
            if (other == 2):
                raise BadExc()
            return False
    a = self.type2test([0, 1, 2, 3])
    self.assertRaises(BadExc, a.index, BadCmp())
    a = self.type2test([(-2), (-1), 0, 0, 1, 2])
    self.assertEqual(a.index(0), 2)
    self.assertEqual(a.index(0, 2), 2)
    self.assertEqual(a.index(0, (-4)), 2)
    self.assertEqual(a.index((-2), (-10)), 0)
    self.assertEqual(a.index(0, 3), 3)
    self.assertEqual(a.index(0, (-3)), 3)
    self.assertEqual(a.index(0, 3, 4), 3)
    self.assertEqual(a.index(0, (-3), (-2)), 3)
    self.assertEqual(a.index(0, ((-4) * sys.maxint), (4 * sys.maxint)), 2)
    self.assertRaises(ValueError, a.index, 0, (4 * sys.maxint), ((-4) * sys.maxint))
    self.assertRaises(ValueError, a.index, 2, 0, (-10))
    a.remove(0)
    self.assertRaises(ValueError, a.index, 2, 0, 4)
    self.assertEqual(a, self.type2test([(-2), (-1), 0, 1, 2]))


    class EvilCmp:

        def __init__(self, victim):
            self.victim = victim

        def __eq__(self, other):
            del self.victim[:]
            return False
    a = self.type2test()
    a[:] = [EvilCmp(a) for _ in xrange(100)]
    self.assertRaises(ValueError, a.index, None)
