def test_extendedslicing(self):
    a = self.type2test([0, 1, 2, 3, 4])
    del a[::2]
    self.assertEqual(a, self.type2test([1, 3]))
    a = self.type2test(range(5))
    del a[1::2]
    self.assertEqual(a, self.type2test([0, 2, 4]))
    a = self.type2test(range(5))
    del a[1::(-2)]
    self.assertEqual(a, self.type2test([0, 2, 3, 4]))
    a = self.type2test(range(10))
    del a[::1000]
    self.assertEqual(a, self.type2test([1, 2, 3, 4, 5, 6, 7, 8, 9]))
    a = self.type2test(range(10))
    a[::2] = ([(-1)] * 5)
    self.assertEqual(a, self.type2test([(-1), 1, (-1), 3, (-1), 5, (-1), 7, (-1), 9]))
    a = self.type2test(range(10))
    a[::(-4)] = ([10] * 3)
    self.assertEqual(a, self.type2test([0, 10, 2, 3, 4, 10, 6, 7, 8, 10]))
    a = self.type2test(range(4))
    a[::(-1)] = a
    self.assertEqual(a, self.type2test([3, 2, 1, 0]))
    a = self.type2test(range(10))
    b = a[:]
    c = a[:]
    a[2:3] = self.type2test(['two', 'elements'])
    b[slice(2, 3)] = self.type2test(['two', 'elements'])
    c[2:3:] = self.type2test(['two', 'elements'])
    self.assertEqual(a, b)
    self.assertEqual(a, c)
    a = self.type2test(range(10))
    a[::2] = tuple(range(5))
    self.assertEqual(a, self.type2test([0, 1, 1, 3, 2, 5, 3, 7, 4, 9]))
