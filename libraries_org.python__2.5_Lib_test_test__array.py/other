'Test the arraymodule.\n   Roger E. Masse\n'
import unittest
from test import test_support
from weakref import proxy
import array, cStringIO, math
from cPickle import loads, dumps
if test_support.is_jython:
    import operator
    from test_weakref import extra_collect
tests = []
typecodes = 'cubBhHiIlLfd'
tests.append(BadConstructorTest)
tests.append(CharacterTest)
if test_support.have_unicode:


    class UnicodeTest(StringTest):
        typecode = 'u'
        example = unicode('\\x01\\u263a\\x00\\ufeff', 'unicode-escape')
        smallerexample = unicode('\\x01\\u263a\\x00\\ufefe', 'unicode-escape')
        biggerexample = unicode('\\x01\\u263a\\x01\\ufeff', 'unicode-escape')
        outside = unicode('3')
        minitemsize = 2

        def test_unicode(self):
            self.assertRaises(TypeError, array.array, 'b', unicode('foo', 'ascii'))
            a = array.array('u', unicode('\\xa0\\xc2\\u1234', 'unicode-escape'))
            a.fromunicode(unicode(' ', 'ascii'))
            a.fromunicode(unicode('', 'ascii'))
            a.fromunicode(unicode('', 'ascii'))
            a.fromunicode(unicode('\\x11abc\\xff\\u1234', 'unicode-escape'))
            s = a.tounicode()
            self.assertEqual(s, unicode('\\xa0\\xc2\\u1234 \\x11abc\\xff\\u1234', 'unicode-escape'))
            s = unicode('\\x00="\\\'a\\\\b\\x80\\xff\\u0000\\u0001\\u1234', 'unicode-escape')
            a = array.array('u', s)
            self.assertEqual(repr(a), 'array(\'u\', u\'\\x00="\\\'a\\\\b\\x80\\xff\\x00\\x01\\u1234\')')
            self.assertRaises(TypeError, a.fromunicode)
    tests.append(UnicodeTest)
tests.append(ByteTest)
tests.append(UnsignedByteTest)
tests.append(ShortTest)
tests.append(UnsignedShortTest)
tests.append(IntTest)
tests.append(UnsignedIntTest)
tests.append(LongTest)
tests.append(UnsignedLongTest)
tests.append(FloatTest)
tests.append(DoubleTest)
if (__name__ == '__main__'):
    test_main(verbose=True)
