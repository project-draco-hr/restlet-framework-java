{
  if (!key.isAcceptable()) {
    super.onSelected(key);
  }
 else   if (!isOverloaded()) {
    try {
      SocketChannel socketChannel=getHelper().getServerSocketChannel().accept();
      if (socketChannel != null) {
        socketChannel.configureBlocking(false);
        int connectionsCount=getHelper().getConnections().size();
        if ((getHelper().getMaxTotalConnections() == -1) || (connectionsCount <= getHelper().getMaxTotalConnections())) {
          Connection<Server> connection=getHelper().checkout(socketChannel,this,socketChannel.socket().getRemoteSocketAddress());
          connection.open();
          getHelper().getConnections().add(connection);
          if (getHelper().getLogger().isLoggable(Level.FINE)) {
            getHelper().getLogger().fine("New connection accepted. Total : " + getHelper().getConnections().size());
          }
        }
 else {
          socketChannel.close();
          getHelper().getLogger().info("Maximum number of concurrent connections reached. New connection rejected.");
        }
      }
    }
 catch (    ClosedByInterruptException ex) {
      getHelper().getLogger().log(Level.FINE,"ServerSocket channel was closed by interrupt",ex);
      throw ex;
    }
catch (    AsynchronousCloseException ace) {
      getHelper().getLogger().log(Level.FINE,"The server socket was closed",ace);
    }
catch (    SocketException se) {
      getHelper().getLogger().log(Level.FINE,"The server socket was closed",se);
    }
catch (    IOException ex) {
      getHelper().getLogger().log(Level.WARNING,"Unexpected error while accepting new connection",ex);
    }
  }
}
