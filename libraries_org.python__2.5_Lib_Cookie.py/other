'\nHere\'s a sample session to show how to use this module.\nAt the moment, this is the only documentation.\n\nThe Basics\n----------\n\nImporting is easy..\n\n   >>> import Cookie\n\nMost of the time you start by creating a cookie.  Cookies come in\nthree flavors, each with slightly different encoding semantics, but\nmore on that later.\n\n   >>> C = Cookie.SimpleCookie()\n   >>> C = Cookie.SerialCookie()\n   >>> C = Cookie.SmartCookie()\n\n[Note: Long-time users of Cookie.py will remember using\nCookie.Cookie() to create an Cookie object.  Although deprecated, it\nis still supported by the code.  See the Backward Compatibility notes\nfor more information.]\n\nOnce you\'ve created your Cookie, you can add values just as if it were\na dictionary.\n\n   >>> C = Cookie.SmartCookie()\n   >>> C["fig"] = "newton"\n   >>> C["sugar"] = "wafer"\n   >>> C.output()\n   \'Set-Cookie: fig=newton\\r\\nSet-Cookie: sugar=wafer\'\n\nNotice that the printable representation of a Cookie is the\nappropriate format for a Set-Cookie: header.  This is the\ndefault behavior.  You can change the header and printed\nattributes by using the .output() function\n\n   >>> C = Cookie.SmartCookie()\n   >>> C["rocky"] = "road"\n   >>> C["rocky"]["path"] = "/cookie"\n   >>> print C.output(header="Cookie:")\n   Cookie: rocky=road; Path=/cookie\n   >>> print C.output(attrs=[], header="Cookie:")\n   Cookie: rocky=road\n\nThe load() method of a Cookie extracts cookies from a string.  In a\nCGI script, you would use this method to extract the cookies from the\nHTTP_COOKIE environment variable.\n\n   >>> C = Cookie.SmartCookie()\n   >>> C.load("chips=ahoy; vienna=finger")\n   >>> C.output()\n   \'Set-Cookie: chips=ahoy\\r\\nSet-Cookie: vienna=finger\'\n\nThe load() method is darn-tootin smart about identifying cookies\nwithin a string.  Escaped quotation marks, nested semicolons, and other\nsuch trickeries do not confuse it.\n\n   >>> C = Cookie.SmartCookie()\n   >>> C.load(\'keebler="E=everybody; L=\\\\"Loves\\\\"; fudge=\\\\012;";\')\n   >>> print C\n   Set-Cookie: keebler="E=everybody; L=\\"Loves\\"; fudge=\\012;"\n\nEach element of the Cookie also supports all of the RFC 2109\nCookie attributes.  Here\'s an example which sets the Path\nattribute.\n\n   >>> C = Cookie.SmartCookie()\n   >>> C["oreo"] = "doublestuff"\n   >>> C["oreo"]["path"] = "/"\n   >>> print C\n   Set-Cookie: oreo=doublestuff; Path=/\n\nEach dictionary element has a \'value\' attribute, which gives you\nback the value associated with the key.\n\n   >>> C = Cookie.SmartCookie()\n   >>> C["twix"] = "none for you"\n   >>> C["twix"].value\n   \'none for you\'\n\n\nA Bit More Advanced\n-------------------\n\nAs mentioned before, there are three different flavors of Cookie\nobjects, each with different encoding/decoding semantics.  This\nsection briefly discusses the differences.\n\nSimpleCookie\n\nThe SimpleCookie expects that all values should be standard strings.\nJust to be sure, SimpleCookie invokes the str() builtin to convert\nthe value to a string, when the values are set dictionary-style.\n\n   >>> C = Cookie.SimpleCookie()\n   >>> C["number"] = 7\n   >>> C["string"] = "seven"\n   >>> C["number"].value\n   \'7\'\n   >>> C["string"].value\n   \'seven\'\n   >>> C.output()\n   \'Set-Cookie: number=7\\r\\nSet-Cookie: string=seven\'\n\n\nSerialCookie\n\nThe SerialCookie expects that all values should be serialized using\ncPickle (or pickle, if cPickle isn\'t available).  As a result of\nserializing, SerialCookie can save almost any Python object to a\nvalue, and recover the exact same object when the cookie has been\nreturned.  (SerialCookie can yield some strange-looking cookie\nvalues, however.)\n\n   >>> C = Cookie.SerialCookie()\n   >>> C["number"] = 7\n   >>> C["string"] = "seven"\n   >>> C["number"].value\n   7\n   >>> C["string"].value\n   \'seven\'\n   >>> C.output()\n   \'Set-Cookie: number="I7\\\\012."\\r\\nSet-Cookie: string="S\\\'seven\\\'\\\\012p1\\\\012."\'\n\nBe warned, however, if SerialCookie cannot de-serialize a value (because\nit isn\'t a valid pickle\'d object), IT WILL RAISE AN EXCEPTION.\n\n\nSmartCookie\n\nThe SmartCookie combines aspects of each of the other two flavors.\nWhen setting a value in a dictionary-fashion, the SmartCookie will\nserialize (ala cPickle) the value *if and only if* it isn\'t a\nPython string.  String objects are *not* serialized.  Similarly,\nwhen the load() method parses out values, it attempts to de-serialize\nthe value.  If it fails, then it fallsback to treating the value\nas a string.\n\n   >>> C = Cookie.SmartCookie()\n   >>> C["number"] = 7\n   >>> C["string"] = "seven"\n   >>> C["number"].value\n   7\n   >>> C["string"].value\n   \'seven\'\n   >>> C.output()\n   \'Set-Cookie: number="I7\\\\012."\\r\\nSet-Cookie: string=seven\'\n\n\nBackwards Compatibility\n-----------------------\n\nIn order to keep compatibilty with earlier versions of Cookie.py,\nit is still possible to use Cookie.Cookie() to create a Cookie.  In\nfact, this simply returns a SmartCookie.\n\n   >>> C = Cookie.Cookie()\n   >>> print C.__class__.__name__\n   SmartCookie\n\n\nFinis.\n'
import string
try:
    from cPickle import dumps, loads
except ImportError:
    from pickle import dumps, loads
import re, warnings
__all__ = ['CookieError', 'BaseCookie', 'SimpleCookie', 'SerialCookie', 'SmartCookie', 'Cookie']
_nulljoin = ''.join
_semispacejoin = '; '.join
_spacejoin = ' '.join
_LegalChars = ((string.ascii_letters + string.digits) + "!#$%&'*+-.^_`|~")
_Translator = {'\x00': '\\000', '\x01': '\\001', '\x02': '\\002', '\x03': '\\003', '\x04': '\\004', '\x05': '\\005', '\x06': '\\006', '\x07': '\\007', '\x08': '\\010', '\t': '\\011', '\n': '\\012', '\x0b': '\\013', '\x0c': '\\014', '\r': '\\015', '\x0e': '\\016', '\x0f': '\\017', '\x10': '\\020', '\x11': '\\021', '\x12': '\\022', '\x13': '\\023', '\x14': '\\024', '\x15': '\\025', '\x16': '\\026', '\x17': '\\027', '\x18': '\\030', '\x19': '\\031', '\x1a': '\\032', '\x1b': '\\033', '\x1c': '\\034', '\x1d': '\\035', '\x1e': '\\036', '\x1f': '\\037', '"': '\\"', '\\': '\\\\', '\x7f': '\\177', '\x80': '\\200', '\x81': '\\201', '\x82': '\\202', '\x83': '\\203', '\x84': '\\204', '\x85': '\\205', '\x86': '\\206', '\x87': '\\207', '\x88': '\\210', '\x89': '\\211', '\x8a': '\\212', '\x8b': '\\213', '\x8c': '\\214', '\x8d': '\\215', '\x8e': '\\216', '\x8f': '\\217', '\x90': '\\220', '\x91': '\\221', '\x92': '\\222', '\x93': '\\223', '\x94': '\\224', '\x95': '\\225', '\x96': '\\226', '\x97': '\\227', '\x98': '\\230', '\x99': '\\231', '\x9a': '\\232', '\x9b': '\\233', '\x9c': '\\234', '\x9d': '\\235', '\x9e': '\\236', '\x9f': '\\237', '\xa0': '\\240', '\xa1': '\\241', '\xa2': '\\242', '\xa3': '\\243', '\xa4': '\\244', '\xa5': '\\245', '\xa6': '\\246', '\xa7': '\\247', '\xa8': '\\250', '\xa9': '\\251', '\xaa': '\\252', '\xab': '\\253', '\xac': '\\254', '\xad': '\\255', '\xae': '\\256', '\xaf': '\\257', '\xb0': '\\260', '\xb1': '\\261', '\xb2': '\\262', '\xb3': '\\263', '\xb4': '\\264', '\xb5': '\\265', '\xb6': '\\266', '\xb7': '\\267', '\xb8': '\\270', '\xb9': '\\271', '\xba': '\\272', '\xbb': '\\273', '\xbc': '\\274', '\xbd': '\\275', '\xbe': '\\276', '\xbf': '\\277', '\xc0': '\\300', '\xc1': '\\301', '\xc2': '\\302', '\xc3': '\\303', '\xc4': '\\304', '\xc5': '\\305', '\xc6': '\\306', '\xc7': '\\307', '\xc8': '\\310', '\xc9': '\\311', '\xca': '\\312', '\xcb': '\\313', '\xcc': '\\314', '\xcd': '\\315', '\xce': '\\316', '\xcf': '\\317', '\xd0': '\\320', '\xd1': '\\321', '\xd2': '\\322', '\xd3': '\\323', '\xd4': '\\324', '\xd5': '\\325', '\xd6': '\\326', '\xd7': '\\327', '\xd8': '\\330', '\xd9': '\\331', '\xda': '\\332', '\xdb': '\\333', '\xdc': '\\334', '\xdd': '\\335', '\xde': '\\336', '\xdf': '\\337', '\xe0': '\\340', '\xe1': '\\341', '\xe2': '\\342', '\xe3': '\\343', '\xe4': '\\344', '\xe5': '\\345', '\xe6': '\\346', '\xe7': '\\347', '\xe8': '\\350', '\xe9': '\\351', '\xea': '\\352', '\xeb': '\\353', '\xec': '\\354', '\xed': '\\355', '\xee': '\\356', '\xef': '\\357', '\xf0': '\\360', '\xf1': '\\361', '\xf2': '\\362', '\xf3': '\\363', '\xf4': '\\364', '\xf5': '\\365', '\xf6': '\\366', '\xf7': '\\367', '\xf8': '\\370', '\xf9': '\\371', '\xfa': '\\372', '\xfb': '\\373', '\xfc': '\\374', '\xfd': '\\375', '\xfe': '\\376', '\xff': '\\377', }
_idmap = ''.join((chr(x) for x in xrange(256)))
_OctalPatt = re.compile('\\\\[0-3][0-7][0-7]')
_QuotePatt = re.compile('[\\\\].')
_weekdayname = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']
_monthname = [None, 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
_LegalCharsPatt = "[\\w\\d!#%&'~_`><@,:/\\$\\*\\+\\-\\.\\^\\|\\)\\(\\?\\}\\{\\=]"
_CookiePattern = re.compile((((('(?x)(?P<key>' + _LegalCharsPatt) + '+?)\\s*=\\s*(?P<val>"(?:[^\\\\"]|\\\\.)*"|') + _LegalCharsPatt) + '*)\\s*;?'))
Cookie = SmartCookie
if (__name__ == '__main__'):
    _test()
