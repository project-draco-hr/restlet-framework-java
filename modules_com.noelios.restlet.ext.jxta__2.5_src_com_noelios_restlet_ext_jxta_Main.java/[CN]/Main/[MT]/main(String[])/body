{
  List<String> options=Arrays.asList(args);
  boolean isClient=options.contains("-" + CLIENT);
  Properties config=new Properties();
  try {
    config.load(Main.class.getResourceAsStream(JXTA_PROPERTIES));
  }
 catch (  IOException ioe) {
  }
  String base=System.getProperty(config.getProperty(PEER_HOME)) + File.separator + ".restlet.jxta";
  String home=base + (isClient ? ".client" : ".server");
  String profile=isClient ? config.getProperty(PROFILE_CLIENT) : config.getProperty(PROFILE_SERVER);
  ;
  Peer peer=new DefaultPeer(home,profile);
  URI id=URI.create(config.getProperty(CONNECTION_ID_KEY));
  String name=config.getProperty(CONNECTION_NAME_KEY);
  NetworkHandler networkHandler=peer.getNetworkHandler();
class EchoAsynchronousConnection extends DefaultAsynchronousConnection {
    public EchoAsynchronousConnection(    URI id,    String name,    NetworkHandler networkHandler){
      super(id,name,networkHandler,null);
      setConnectionListener(new ConnectionListener(){
        public void receiveFrom(        byte[] data,        InetAddress from){
          System.out.println("inbound: " + new String(data));
          System.out.println("from: " + from);
          ByteArrayOutputStream ba=new ByteArrayOutputStream();
          try {
            ba.write("echo: ".getBytes());
            ba.write(data);
            EchoAsynchronousConnection.this.sendTo(ba.toByteArray(),from);
          }
 catch (          IOException ioe) {
            ioe.printStackTrace();
          }
        }
      }
);
    }
  }
  AsynchronousConnection connection=isClient ? new DefaultAsynchronousConnection(id,name,networkHandler,new ConnectionListener(){
    public void receiveFrom(    byte[] data,    InetAddress from){
      System.out.println("inbound: " + new String(data));
      System.out.println("from: " + from);
    }
  }
) : new EchoAsynchronousConnection(id,name,networkHandler);
  peer.addConnections(connection);
  peer.start();
  if (isClient) {
    while (true) {
      try {
        String msg="ping";
        System.out.println("outbound: " + msg);
        connection.send(msg.getBytes());
      }
 catch (      IOException ioe) {
        ioe.printStackTrace();
      }
      try {
        Thread.sleep(20000);
      }
 catch (      InterruptedException ie) {
      }
    }
  }
}
