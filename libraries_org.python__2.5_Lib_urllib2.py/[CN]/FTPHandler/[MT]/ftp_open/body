def ftp_open(self, req):
    import ftplib
    import mimetypes
    host = req.get_host()
    if (not host):
        raise IOError, ('ftp error', 'no host given')
    (host, port) = splitport(host)
    if (port is None):
        port = ftplib.FTP_PORT
    else:
        port = int(port)
    (user, host) = splituser(host)
    if user:
        (user, passwd) = splitpasswd(user)
    else:
        passwd = None
    host = unquote(host)
    user = unquote((user or ''))
    passwd = unquote((passwd or ''))
    try:
        host = socket.gethostbyname(host)
    except socket.error as msg:
        raise URLError(msg)
    (path, attrs) = splitattr(req.get_selector())
    dirs = path.split('/')
    dirs = map(unquote, dirs)
    (dirs, file) = (dirs[:(-1)], dirs[(-1)])
    if (dirs and (not dirs[0])):
        dirs = dirs[1:]
    try:
        fw = self.connect_ftp(user, passwd, host, port, dirs)
        type = ((file and 'I') or 'D')
        for attr in attrs:
            (attr, value) = splitvalue(attr)
            if ((attr.lower() == 'type') and (value in ('a', 'A', 'i', 'I', 'd', 'D'))):
                type = value.upper()
        (fp, retrlen) = fw.retrfile(file, type)
        headers = ''
        mtype = mimetypes.guess_type(req.get_full_url())[0]
        if mtype:
            headers += ('Content-type: %s\n' % mtype)
        if ((retrlen is not None) and (retrlen >= 0)):
            headers += ('Content-length: %d\n' % retrlen)
        sf = StringIO(headers)
        headers = mimetools.Message(sf)
        return addinfourl(fp, headers, req.get_full_url())
    except ftplib.all_errors as msg:
        raise IOError, ('ftp error', msg), sys.exc_info()[2]
