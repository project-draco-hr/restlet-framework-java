def do_open(self, http_class, req):
    'Return an addinfourl object for the request, using http_class.\n\n        http_class must implement the HTTPConnection API from httplib.\n        The addinfourl return value is a file-like object.  It also\n        has methods and attributes including:\n            - info(): return a mimetools.Message object for the headers\n            - geturl(): return the original request URL\n            - code: HTTP status code\n        '
    host = req.get_host()
    if (not host):
        raise URLError('no host given')
    h = http_class(host)
    h.set_debuglevel(self._debuglevel)
    headers = dict(req.headers)
    headers.update(req.unredirected_hdrs)
    headers['Connection'] = 'close'
    headers = dict(((name.title(), val) for (name, val) in headers.items()))
    try:
        h.request(req.get_method(), req.get_selector(), req.data, headers)
        r = h.getresponse()
    except socket.error as err:
        raise URLError(err)
    r.recv = r.read
    fp = socket._fileobject(r, close=True)
    resp = addinfourl(fp, r.msg, req.get_full_url())
    resp.code = r.status
    resp.msg = r.reason
    return resp
