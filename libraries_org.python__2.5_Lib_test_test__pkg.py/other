import sys, os, tempfile, traceback
from os import mkdir, rmdir, extsep
del mkdir, rmdir
from test.test_support import verify, verbose, TestFailed
tests = [('t1', [('t1', None), ((('t1 __init__' + os.extsep) + 'py'), '')], 'import t1'), ('t2', [('t2', None), ((('t2 __init__' + os.extsep) + 'py'), "'doc for t2'; print __name__, 'loading'"), ('t2 sub', None), ((('t2 sub __init__' + os.extsep) + 'py'), ''), ('t2 sub subsub', None), ((('t2 sub subsub __init__' + os.extsep) + 'py'), "print __name__, 'loading'; spam = 1")], '\nimport t2\nprint t2.__doc__\nimport t2.sub\nimport t2.sub.subsub\nprint t2.__name__, t2.sub.__name__, t2.sub.subsub.__name__\nimport t2\nfrom t2 import *\nprint dir()\nfrom t2 import sub\nfrom t2.sub import subsub\nfrom t2.sub.subsub import spam\nprint sub.__name__, subsub.__name__\nprint sub.subsub.__name__\nprint dir()\nimport t2.sub\nimport t2.sub.subsub\nprint t2.__name__, t2.sub.__name__, t2.sub.subsub.__name__\nfrom t2 import *\nprint dir()\n'), ('t3', [('t3', None), ((('t3 __init__' + os.extsep) + 'py'), "print __name__, 'loading'"), ('t3 sub', None), ((('t3 sub __init__' + os.extsep) + 'py'), ''), ('t3 sub subsub', None), ((('t3 sub subsub __init__' + os.extsep) + 'py'), "print __name__, 'loading'; spam = 1")], '\nimport t3.sub.subsub\nprint t3.__name__, t3.sub.__name__, t3.sub.subsub.__name__\nreload(t3)\nreload(t3.sub)\nreload(t3.sub.subsub)\n'), ('t4', [((('t4' + os.extsep) + 'py'), (("print 'THIS SHOULD NOT BE PRINTED (t4" + os.extsep) + "py)'")), ('t4', None), ((('t4 __init__' + os.extsep) + 'py'), "print __name__, 'loading'"), ((('t4 sub' + os.extsep) + 'py'), (("print 'THIS SHOULD NOT BE PRINTED (sub" + os.extsep) + "py)'")), ('t4 sub', None), ((('t4 sub __init__' + os.extsep) + 'py'), ''), ((('t4 sub subsub' + os.extsep) + 'py'), (("print 'THIS SHOULD NOT BE PRINTED (subsub" + os.extsep) + "py)'")), ('t4 sub subsub', None), ((('t4 sub subsub __init__' + os.extsep) + 'py'), "print __name__, 'loading'; spam = 1")], '\nfrom t4.sub.subsub import *\nprint "t4.sub.subsub.spam =", spam\n'), ('t5', [('t5', None), ((('t5 __init__' + os.extsep) + 'py'), 'import t5.foo'), ((('t5 string' + os.extsep) + 'py'), "print __name__, 'loading'; spam = 1"), ((('t5 foo' + os.extsep) + 'py'), "print __name__, 'loading'; import string; print string.spam")], '\nimport t5\nfrom t5 import *\nprint dir()\nimport t5\nprint fixdir(dir(t5))\nprint fixdir(dir(t5.foo))\nprint fixdir(dir(t5.string))\n'), ('t6', [('t6', None), ((('t6 __init__' + os.extsep) + 'py'), "__all__ = ['spam', 'ham', 'eggs']"), ((('t6 spam' + os.extsep) + 'py'), "print __name__, 'loading'"), ((('t6 ham' + os.extsep) + 'py'), "print __name__, 'loading'"), ((('t6 eggs' + os.extsep) + 'py'), "print __name__, 'loading'")], '\nimport t6\nprint fixdir(dir(t6))\nfrom t6 import *\nprint fixdir(dir(t6))\nprint dir()\n'), ('t7', [((('t7' + os.extsep) + 'py'), (("print 'Importing t7" + os.extsep) + "py'")), ('t7', None), ((('t7 __init__' + os.extsep) + 'py'), "print __name__, 'loading'"), ((('t7 sub' + os.extsep) + 'py'), (("print 'THIS SHOULD NOT BE PRINTED (sub" + os.extsep) + "py)'")), ('t7 sub', None), ((('t7 sub __init__' + os.extsep) + 'py'), ''), ((('t7 sub subsub' + os.extsep) + 'py'), (("print 'THIS SHOULD NOT BE PRINTED (subsub" + os.extsep) + "py)'")), ('t7 sub subsub', None), ((('t7 sub subsub __init__' + os.extsep) + 'py'), "print __name__, 'loading'; spam = 1")], '\nt7, sub, subsub = None, None, None\nimport t7 as tas\nprint fixdir(dir(tas))\nverify(not t7)\nfrom t7 import sub as subpar\nprint fixdir(dir(subpar))\nverify(not t7 and not sub)\nfrom t7.sub import subsub as subsubsub\nprint fixdir(dir(subsubsub))\nverify(not t7 and not sub and not subsub)\nfrom t7.sub.subsub import spam as ham\nprint "t7.sub.subsub.spam =", ham\nverify(not t7 and not sub and not subsub)\n')]
nontests = [('x5', [], ('import a' + ('.a' * 400))), ('x6', [], ('import a' + ('.a' * 499))), ('x7', [], ('import a' + ('.a' * 500))), ('x8', [], ('import a' + ('.a' * 1100))), ('x9', [], ('import ' + ('a' * 400))), ('x10', [], ('import ' + ('a' * 500))), ('x11', [], ('import ' + ('a' * 998))), ('x12', [], ('import ' + ('a' * 999))), ('x13', [], ('import ' + ('a' * 999))), ('x14', [], ('import ' + ('a' * 2000)))]
'XXX Things to test\n\nimport package without __init__\nimport package with __init__\n__init__ importing submodule\n__init__ importing global module\n__init__ defining variables\nsubmodule importing other submodule\nsubmodule importing global module\nsubmodule import submodule via global name\nfrom package import submodule\nfrom package import subpackage\nfrom package import variable (defined in __init__)\nfrom package import * (defined in __init__)\n'
args = []
if (__name__ == '__main__'):
    args = sys.argv[1:]
    if (args and (args[0] == '-q')):
        verbose = 0
        del args[0]
for (name, hier, code) in tests:
    if (args and (name not in args)):
        print 'skipping test', name
        continue
    print 'running test', name
    runtest(hier, code)
import sys
import imp
try:
    import sys.imp
except ImportError:
    pass
else:
    raise TestFailed, "No ImportError exception on 'import sys.imp'"
