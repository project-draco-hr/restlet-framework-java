def play_sound_file(data, rate, ssize, nchannels):
    try:
        dsp = ossaudiodev.open('w')
    except IOError as msg:
        if (msg[0] in (errno.EACCES, errno.ENOENT, errno.ENODEV, errno.EBUSY)):
            raise TestSkipped, msg
        raise TestFailed, msg
    dsp.bufsize()
    dsp.obufcount()
    dsp.obuffree()
    dsp.getptr()
    dsp.fileno()
    _assert((dsp.closed is False), 'dsp.closed is not False')
    _assert((dsp.name == '/dev/dsp'))
    _assert((dsp.mode == 'w'), ('bad dsp.mode: %r' % dsp.mode))
    for attr in ('closed', 'name', 'mode'):
        try:
            setattr(dsp, attr, 42)
            raise RuntimeError(('dsp.%s not read-only' % attr))
        except TypeError:
            pass
    expected_time = (((float(len(data)) / (ssize / 8)) / nchannels) / rate)
    dsp.setparameters(AFMT_S16_NE, nchannels, rate)
    print ('playing test sound file (expected running time: %.2f sec)' % expected_time)
    t1 = time.time()
    dsp.write(data)
    dsp.close()
    t2 = time.time()
    elapsed_time = (t2 - t1)
    percent_diff = ((abs((elapsed_time - expected_time)) / expected_time) * 100)
    _assert((percent_diff <= 10.0), ('elapsed time (%.2f sec) > 10%% off of expected time (%.2f sec)' % (elapsed_time, expected_time)))
