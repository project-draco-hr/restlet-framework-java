def _ord2ymd(n):
    'ordinal -> (year, month, day), considering 01-Jan-0001 as day 1.'
    n -= 1
    (n400, n) = divmod(n, _DI400Y)
    year = ((n400 * 400) + 1)
    (n100, n) = divmod(n, _DI100Y)
    (n4, n) = divmod(n, _DI4Y)
    (n1, n) = divmod(n, 365)
    year += (((n100 * 100) + (n4 * 4)) + n1)
    if ((n1 == 4) or (n100 == 4)):
        assert (n == 0)
        return ((year - 1), 12, 31)
    leapyear = ((n1 == 3) and ((n4 != 24) or (n100 == 3)))
    assert (leapyear == _is_leap(year))
    month = ((n + 50) >> 5)
    preceding = (_DAYS_BEFORE_MONTH[month] + ((month > 2) and leapyear))
    if (preceding > n):
        month -= 1
        preceding -= (_DAYS_IN_MONTH[month] + ((month == 2) and leapyear))
    n -= preceding
    assert (0 <= n < _days_in_month(year, month))
    return (year, month, (n + 1))
