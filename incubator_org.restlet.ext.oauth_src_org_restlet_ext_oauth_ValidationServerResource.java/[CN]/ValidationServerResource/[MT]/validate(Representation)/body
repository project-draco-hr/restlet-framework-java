{
  Logger log=getLogger();
  log.info("In Validator resource");
  JSONObject response=new JSONObject();
  boolean authenticated=false;
  String lo=(String)getContext().getAttributes().get(LOCAL_ACCESS_ONLY);
  if (lo != null && lo.length() > 0) {
    boolean localOnly=Boolean.parseBoolean(lo);
    if (localOnly) {
      String scheme=getRequest().getOriginalRef().getScheme();
      if (!Protocol.RIAP.getSchemeName().equals(scheme)) {
        setStatus(Status.CLIENT_ERROR_FORBIDDEN,"Auth server only allows local resource validation");
        return null;
      }
    }
  }
  try {
    String error=null;
    JsonRepresentation rest=new JsonRepresentation(input);
    JSONObject call=rest.getJsonObject();
    String token=call.get("access_token").toString();
    String uri=call.get("uri").toString();
    JSONArray scopes=null;
    if (call.has("scope"))     scopes=call.getJSONArray("scope");
    String owner=null;
    if (call.has("owner"))     owner=call.getString("owner");
    log.info("In Validator resource - searching for token = " + token);
    Token t=generator.findToken(token);
    if (t == null) {
      response.put("authenticated",authenticated);
      error=OAuthError.ErrorCode.invalid_token.name();
    }
 else {
      log.info("In Validator resource - got token = " + t);
      if (t instanceof ExpireToken) {
        ExpireToken et=(ExpireToken)t;
        if (!token.equals(et.getToken())) {
          error=OAuthError.ErrorCode.invalid_token.name();
          getLogger().warning("Should not use the refresh_token to sign!");
        }
      }
      log.info("Received uri = " + uri);
      log.info("Received scope = " + scopes);
      log.info("Received owner = " + owner);
      AuthenticatedUser user=t.getUser();
      authenticated=(user == null) ? false : true;
      if (!authenticated) {
        error=OAuthError.ErrorCode.invalid_request.name();
      }
      if (authenticated && scopes != null && scopes.length() > 0) {
        for (int i=0; i < scopes.length(); i++) {
          if (scopes.isNull(i))           continue;
          String scope=scopes.getString(i);
          boolean granted=user.isGrantedScope(scope,owner);
          getLogger().info("Granted permission : " + scope + " = "+ granted);
          if (!granted) {
            error=OAuthError.ErrorCode.insufficient_scope.name();
            authenticated=false;
            break;
          }
        }
      }
      if (authenticated) {
        if (owner != null && owner.length() > 0 && !AUTONOMOUS_USER.equals(user.getId()) && !owner.equals(user.getId())) {
          authenticated=false;
          error=OAuthError.ErrorCode.invalid_request.name();
        }
 else {
          response.put("tokenOwner",user.getId());
        }
      }
      response.put("authenticated",authenticated);
      if (error != null) {
        response.put("error",error);
      }
      getResponse().setCacheDirectives(noStore);
      getResponse().setCacheDirectives(noCache);
    }
  }
 catch (  JSONException e) {
    throw new ResourceException(Status.CLIENT_ERROR_BAD_REQUEST,"Failed parse JSON",e);
  }
catch (  IOException e) {
    throw new ResourceException(Status.CLIENT_ERROR_BAD_REQUEST,"Failed parse JSON",e);
  }
  return new JsonRepresentation(response);
}
