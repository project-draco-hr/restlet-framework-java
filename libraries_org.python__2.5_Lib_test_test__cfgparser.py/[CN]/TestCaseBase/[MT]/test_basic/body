def test_basic(self):
    cf = self.fromstring('[Foo Bar]\nfoo=bar\n[Spacey Bar]\nfoo = bar\n[Commented Bar]\nfoo: bar ; comment\n[Long Line]\nfoo: this line is much, much longer than my editor\n   likes it.\n[Section\\with$weird%characters[\t]\n[Internationalized Stuff]\nfoo[bg]: Bulgarian\nfoo=Default\nfoo[en]=English\nfoo[de]=Deutsch\n[Spaces]\nkey with spaces : value\nanother with spaces = splat!\n')
    L = cf.sections()
    L.sort()
    eq = self.assertEqual
    eq(L, ['Commented Bar', 'Foo Bar', 'Internationalized Stuff', 'Long Line', 'Section\\with$weird%characters[\t', 'Spaces', 'Spacey Bar'])
    eq(cf.get('Foo Bar', 'foo'), 'bar')
    eq(cf.get('Spacey Bar', 'foo'), 'bar')
    eq(cf.get('Commented Bar', 'foo'), 'bar')
    eq(cf.get('Spaces', 'key with spaces'), 'value')
    eq(cf.get('Spaces', 'another with spaces'), 'splat!')
    self.failIf(('__name__' in cf.options('Foo Bar')), '__name__ "option" should not be exposed by the API!')
    self.failUnless(cf.remove_option('Foo Bar', 'foo'), 'remove_option() failed to report existance of option')
    self.failIf(cf.has_option('Foo Bar', 'foo'), 'remove_option() failed to remove option')
    self.failIf(cf.remove_option('Foo Bar', 'foo'), 'remove_option() failed to report non-existance of option that was removed')
    self.assertRaises(ConfigParser.NoSectionError, cf.remove_option, 'No Such Section', 'foo')
    eq(cf.get('Long Line', 'foo'), 'this line is much, much longer than my editor\nlikes it.')
