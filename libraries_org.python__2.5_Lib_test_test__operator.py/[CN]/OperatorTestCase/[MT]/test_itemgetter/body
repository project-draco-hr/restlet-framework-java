def test_itemgetter(self):
    a = 'ABCDE'
    f = operator.itemgetter(2)
    self.assertEqual(f(a), 'C')
    f = operator.itemgetter(10)
    self.assertRaises(IndexError, f, a)


    class C(object):

        def __getitem(self, name):
            raise SyntaxError
    self.failUnlessRaises(TypeError, operator.itemgetter(42), C())
    f = operator.itemgetter('name')
    self.assertRaises(TypeError, f, a)
    self.assertRaises(TypeError, operator.itemgetter)
    d = dict(key='val')
    f = operator.itemgetter('key')
    self.assertEqual(f(d), 'val')
    f = operator.itemgetter('nonkey')
    self.assertRaises(KeyError, f, d)
    inventory = [('apple', 3), ('banana', 2), ('pear', 5), ('orange', 1)]
    getcount = operator.itemgetter(1)
    self.assertEqual(map(getcount, inventory), [3, 2, 5, 1])
    self.assertEqual(sorted(inventory, key=getcount), [('orange', 1), ('banana', 2), ('apple', 3), ('pear', 5)])
    data = map(str, range(20))
    self.assertEqual(operator.itemgetter(2, 10, 5)(data), ('2', '10', '5'))
    self.assertRaises(TypeError, operator.itemgetter(2, 'x', 5), data)
