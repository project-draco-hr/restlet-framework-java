{
  Collections.sort(definition.getContract().getRepresentations(),new Comparator<Representation>(){
    @Override public int compare(    Representation o1,    Representation o2){
      return o1.getName().compareTo(o2.getName());
    }
  }
);
  Collections.sort(definition.getContract().getResources(),new Comparator<Resource>(){
    @Override public int compare(    Resource o1,    Resource o2){
      return o1.getResourcePath().compareTo(o2.getResourcePath());
    }
  }
);
  try {
    ClientResource cr=new ClientResource(serviceUrl);
    cr.setChallengeResponse(ChallengeScheme.HTTP_BASIC,ulogin,upwd);
    cr.addQueryParameter("type","rwadef");
    if (create) {
      cr.addSegment("apis").addSegment("");
      LOGGER.info("Create a new descriptor");
      cr.post(definition,MediaType.APPLICATION_JSON);
    }
 else     if (newVersion) {
      cr.addSegment("apis").addSegment(descriptorId).addSegment("versions").addSegment("");
      LOGGER.info("Create a new version of the descriptor " + descriptorId);
      cr.post(definition,MediaType.APPLICATION_JSON);
    }
 else     if (STRATEGIES.contains(updateStrategy)) {
      cr.addSegment("apis").addSegment(descriptorId).addSegment("versions").addSegment(versionId).addSegment("");
      LOGGER.info("Update version " + versionId + " of descriptor "+ descriptorId+ " with strategy "+ updateStrategy);
      cr.addQueryParameter("strategy",updateStrategy);
      if (STRATEGIES.contains(updateStrategy)) {
        cr.put(definition,MediaType.APPLICATION_JSON);
      }
 else {
        LOGGER.severe("The strategy: " + updateStrategy + " is not available. Use parameter --help for help.");
      }
    }
 else {
      LOGGER.severe("The information you gave is not understandable. Use parameter --help for help.");
    }
    LOGGER.fine("Display result");
    System.out.println("Process successfully achieved.");
    if (cr.getResponseEntity() != null && cr.getResponseEntity().isAvailable()) {
      try {
        cr.getResponseEntity().write(System.out);
        System.out.println();
      }
 catch (      IOException e) {
        LOGGER.warning("Request successfully achieved by the server, but it's response cannot be printed");
      }
    }
    if (cr.getLocationRef() != null) {
      System.out.println("Your Web API documentation is accessible at this URL: " + cr.getLocationRef());
    }
  }
 catch (  ResourceException e) {
    if (e.getStatus().isConnectorError()) {
      LOGGER.severe("Cannot reach the remote service, could you check your network connection?");
      LOGGER.severe("Could you check that the following service is up? " + serviceUrl);
    }
 else     if (e.getStatus().isClientError()) {
      LOGGER.severe("Check that you provide valid credentials, or valid service url.");
    }
 else     if (e.getStatus().isServerError()) {
      LOGGER.severe("The server side encounters some issues, please try later.");
    }
  }
}
