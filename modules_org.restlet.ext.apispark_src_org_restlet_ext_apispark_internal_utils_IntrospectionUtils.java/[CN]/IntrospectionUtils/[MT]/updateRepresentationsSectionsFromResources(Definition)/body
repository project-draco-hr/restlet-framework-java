{
  Map<Resource,Collection<String>> resourcesLinks=new HashMap<Resource,Collection<String>>();
  Map<Representation,Collection<String>> representationsSections=new HashMap<Representation,Collection<String>>();
  for (  Resource resource : definition.getContract().getResources()) {
    Collection<String> representations=new HashSet<String>();
    for (    Operation operation : resource.getOperations()) {
      if (operation.getInputPayLoad() != null && operation.getInputPayLoad().getType() != null) {
        representations.add(operation.getInputPayLoad().getType());
      }
      for (      Response response : operation.getResponses()) {
        if (response.getOutputPayLoad() != null && response.getOutputPayLoad().getType() != null) {
          representations.add(response.getOutputPayLoad().getType());
        }
      }
    }
    resourcesLinks.put(resource,representations);
  }
  for (  Entry<Resource,Collection<String>> entry : resourcesLinks.entrySet()) {
    for (    String representationIdentifier : entry.getValue()) {
      Representation representation=definition.getContract().getRepresentation(representationIdentifier);
      if (representation != null) {
        if (representationsSections.get(representation) != null) {
          representationsSections.get(representation).addAll(entry.getKey().getSections());
        }
 else {
          Collection<String> representationSections=new HashSet<String>();
          representationSections.addAll(representation.getSections());
          representationSections.addAll(entry.getKey().getSections());
          representationsSections.put(representation,representationSections);
        }
      }
    }
  }
  for (  Entry<Representation,Collection<String>> entry : representationsSections.entrySet()) {
    entry.getKey().setSections(new ArrayList<String>(entry.getValue()));
  }
}
