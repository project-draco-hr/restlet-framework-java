from test import test_support
import unittest
import sys
import difflib
basic.events = [(0, 'call'), (1, 'line'), (1, 'return')]
arigo_example.events = [(0, 'call'), (1, 'line'), (2, 'line'), (5, 'line'), (5, 'return')]
one_instr_line.events = [(0, 'call'), (1, 'line'), (2, 'line'), (3, 'line'), (3, 'return')]
no_pop_tops.events = [(0, 'call'), (1, 'line'), (2, 'line'), (3, 'line'), (6, 'line'), (2, 'line'), (3, 'line'), (4, 'line'), (2, 'line'), (2, 'return')]
no_pop_blocks.events = [(0, 'call'), (1, 'line'), (2, 'line'), (4, 'line'), (4, 'return')]
call.events = [(0, 'call'), (1, 'line'), ((-3), 'call'), ((-2), 'line'), ((-2), 'return'), (1, 'return')]
test_raise.events = [(0, 'call'), (1, 'line'), (2, 'line'), ((-3), 'call'), ((-2), 'line'), ((-2), 'exception'), ((-2), 'return'), (2, 'exception'), (3, 'line'), (4, 'line'), (4, 'return')]
settrace_and_return.events = [(1, 'return')]
settrace_and_raise.events = [(2, 'exception'), (3, 'line'), (4, 'line'), (4, 'return')]
ireturn_example.events = [(0, 'call'), (1, 'line'), (2, 'line'), (3, 'line'), (4, 'line'), (6, 'line'), (6, 'return')]
tightloop_example.events = [(0, 'call'), (1, 'line'), (2, 'line'), (3, 'line'), (4, 'line'), (5, 'line'), (5, 'line'), (5, 'line'), (5, 'line'), (5, 'exception'), (6, 'line'), (7, 'line'), (7, 'return')]
tighterloop_example.events = [(0, 'call'), (1, 'line'), (2, 'line'), (3, 'line'), (4, 'line'), (4, 'line'), (4, 'line'), (4, 'line'), (4, 'exception'), (5, 'line'), (6, 'line'), (6, 'return')]
generator_example.events = (([(0, 'call'), (2, 'line'), ((-6), 'call'), ((-5), 'line'), ((-4), 'line'), ((-4), 'return'), ((-4), 'call'), ((-4), 'exception'), ((-1), 'line'), ((-1), 'return')] + ([(5, 'line'), (6, 'line')] * 10)) + [(5, 'line'), (5, 'return')])
jump_simple_forwards.jump = (1, 3)
jump_simple_forwards.output = [3]
jump_simple_backwards.jump = (2, 1)
jump_simple_backwards.output = [1, 1, 2]
jump_out_of_block_forwards.jump = (3, 5)
jump_out_of_block_forwards.output = [2, 5]
jump_out_of_block_backwards.jump = (6, 1)
jump_out_of_block_backwards.output = [1, 3, 5, 1, 3, 5, 6, 7]
jump_to_codeless_line.jump = (1, 2)
jump_to_codeless_line.output = [3]
jump_to_same_line.jump = (2, 2)
jump_to_same_line.output = [1, 2, 3]
jump_in_nested_finally.jump = (4, 9)
jump_in_nested_finally.output = [2, 9]
no_jump_too_far_forwards.jump = (3, 6)
no_jump_too_far_forwards.output = [2, True]
no_jump_too_far_backwards.jump = (3, (-1))
no_jump_too_far_backwards.output = [2, True]
no_jump_to_except_1.jump = (2, 3)
no_jump_to_except_1.output = [True]
no_jump_to_except_2.jump = (2, 3)
no_jump_to_except_2.output = [True]
no_jump_to_except_3.jump = (2, 3)
no_jump_to_except_3.output = [True]
no_jump_to_except_4.jump = (2, 3)
no_jump_to_except_4.output = [True]
no_jump_forwards_into_block.jump = (2, 4)
no_jump_forwards_into_block.output = [True]
no_jump_backwards_into_block.jump = (4, 3)
no_jump_backwards_into_block.output = [3, 3, True]
no_jump_into_finally_block.jump = (4, 6)
no_jump_into_finally_block.output = [3, 6, True]
no_jump_out_of_finally_block.jump = (5, 1)
no_jump_out_of_finally_block.output = [3, True]
no_jump_to_non_integers.jump = (2, 'Spam')
no_jump_to_non_integers.output = [True]
if (__name__ == '__main__'):
    test_main()
