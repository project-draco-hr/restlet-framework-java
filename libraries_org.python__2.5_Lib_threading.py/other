from java.lang import InterruptedException
from java.util import Collections, WeakHashMap
from java.util.concurrent import Semaphore, CyclicBarrier
from java.util.concurrent.locks import ReentrantLock
from org.python.util import jython
from thread import _newFunctionThread
from thread import _local as local
from _threading import Lock, RLock, Condition, _Lock, _RLock
import java.lang.Thread
import weakref
import sys as _sys
from traceback import print_exc as _print_exc
__all__ = ['activeCount', 'Condition', 'currentThread', 'enumerate', 'Event', 'Lock', 'RLock', 'Semaphore', 'BoundedSemaphore', 'Thread', 'Timer', 'setprofile', 'settrace', 'local', 'stack_size']
_VERBOSE = False
if __debug__:


    class _Verbose(object):

        def __init__(self, verbose=None):
            if (verbose is None):
                verbose = _VERBOSE
            self.__verbose = verbose

        def _note(self, format, *args):
            if self.__verbose:
                format = (format % args)
                format = ('%s: %s\n' % (currentThread().getName(), format))
                _sys.stderr.write(format)
else:


    class _Verbose(object):

        def __init__(self, verbose=None):
            pass

        def _note(self, *args):
            pass
_profile_hook = None
_trace_hook = None
ThreadStates = {java.lang.Thread.State.NEW: 'initial', java.lang.Thread.State.RUNNABLE: 'started', java.lang.Thread.State.BLOCKED: 'started', java.lang.Thread.State.WAITING: 'started', java.lang.Thread.State.TIMED_WAITING: 'started', java.lang.Thread.State.TERMINATED: 'stopped', }
_threads = weakref.WeakValueDictionary()
_active = _threads
_jthread_to_pythread = Collections.synchronizedMap(WeakHashMap())
from thread import stack_size
_MainThread()
