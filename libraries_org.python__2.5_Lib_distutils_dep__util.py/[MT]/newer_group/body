def newer_group(sources, target, missing='error'):
    'Return true if \'target\' is out-of-date with respect to any file\n    listed in \'sources\'.  In other words, if \'target\' exists and is newer\n    than every file in \'sources\', return false; otherwise return true.\n    \'missing\' controls what we do when a source file is missing; the\n    default ("error") is to blow up with an OSError from inside \'stat()\';\n    if it is "ignore", we silently drop any missing source files; if it is\n    "newer", any missing source files make us assume that \'target\' is\n    out-of-date (this is handy in "dry-run" mode: it\'ll make you pretend to\n    carry out commands that wouldn\'t work because inputs are missing, but\n    that doesn\'t matter because you\'re not actually going to run the\n    commands).\n    '
    if (not os.path.exists(target)):
        return 1
    from stat import ST_MTIME
    target_mtime = os.stat(target)[ST_MTIME]
    for source in sources:
        if (not os.path.exists(source)):
            if (missing == 'error'):
                pass
            elif (missing == 'ignore'):
                continue
            elif (missing == 'newer'):
                return 1
        source_mtime = os.stat(source)[ST_MTIME]
        if (source_mtime > target_mtime):
            return 1
    else:
        return 0
