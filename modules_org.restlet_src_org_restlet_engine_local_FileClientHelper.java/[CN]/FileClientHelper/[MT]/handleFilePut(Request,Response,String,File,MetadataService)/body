{
  boolean isDirectory=false;
  if (file.exists()) {
    if (file.isDirectory()) {
      isDirectory=true;
      response.setStatus(new Status(Status.CLIENT_ERROR_FORBIDDEN,"Can't put a new representation of a directory"));
      return;
    }
  }
 else {
    if (path.endsWith("/")) {
      isDirectory=true;
      if (file.mkdirs()) {
        response.setStatus(Status.SUCCESS_NO_CONTENT);
      }
 else {
        getLogger().log(Level.WARNING,"Unable to create the new directory");
        response.setStatus(new Status(Status.SERVER_ERROR_INTERNAL,"Unable to create the new directory"));
      }
      return;
    }
  }
  if (!isDirectory) {
    boolean partialPut=!request.getRanges().isEmpty();
    if (!checkMetadataConsistency(file.getName(),metadataService,request.getEntity())) {
      response.setStatus(new Status(Status.REDIRECTION_SEE_OTHER,"The metadata are not consistent with the URI"));
      return;
    }
 else {
      final String baseName=Entity.getBaseName(file.getName(),metadataService);
      FileFilter filter=new FileFilter(){
        public boolean accept(        File file){
          return file.isFile() && baseName.equals(Entity.getBaseName(file.getName(),metadataService));
        }
      }
;
      File[] files=file.getParentFile().listFiles(filter);
      File uniqueVariant=null;
      List<File> variantsList=new ArrayList<File>();
      if (files != null && files.length > 0) {
        Variant variant=new Variant();
        Entity.updateMetadata(file.getName(),variant,true,metadataService);
        Collection<String> extensions=Entity.getExtensions(variant,metadataService);
        for (        File entry : files) {
          Collection<String> entryExtensions=Entity.getExtensions(entry.getName(),metadataService);
          if (entryExtensions.containsAll(extensions)) {
            variantsList.add(entry);
            if (extensions.containsAll(entryExtensions)) {
              uniqueVariant=entry;
            }
          }
        }
      }
      if (uniqueVariant != null) {
        file=uniqueVariant;
      }
 else {
        if (!variantsList.isEmpty()) {
          response.setStatus(new Status(Status.CLIENT_ERROR_NOT_ACCEPTABLE,"Unable to process properly the request. Several variants exist but none of them suits precisely."));
          return;
        }
 else {
          Entity.updateMetadata(file.getName(),request.getEntity(),true,getMetadataService());
          StringBuilder fileName=new StringBuilder(baseName);
          updateFileExtension(fileName,request.getEntity().getMediaType(),metadataService);
          for (          Language language : request.getEntity().getLanguages()) {
            updateFileExtension(fileName,language,metadataService);
          }
          for (          Encoding encoding : request.getEntity().getEncodings()) {
            updateFileExtension(fileName,encoding,metadataService);
          }
          file=new File(file.getParentFile(),fileName.toString());
        }
      }
      if (!checkExtensionsConsistency(file,metadataService)) {
        response.setStatus(new Status(Status.SERVER_ERROR_INTERNAL,"Unable to process properly the URI. At least one extension is not known by the server."));
        return;
      }
 else {
        File tmp=null;
        boolean error=false;
        if (file.exists()) {
          if (partialPut) {
            RandomAccessFile raf=null;
            try {
              tmp=new File(file.getCanonicalPath() + "." + getTemporaryExtension());
              Range range=request.getRanges().get(0);
              if (tmp.exists() && !isResumeUpload()) {
                tmp.delete();
              }
              if (!tmp.exists()) {
                BufferedReader br=new BufferedReader(new FileReader(file));
                BufferedWriter wr=new BufferedWriter(new FileWriter(tmp));
                String s;
                while ((s=br.readLine()) != null) {
                  wr.append(s);
                }
                br.close();
                wr.flush();
                wr.close();
              }
              raf=new RandomAccessFile(tmp,"rwd");
              if (range.getIndex() == Range.INDEX_LAST) {
                if (raf.length() <= range.getSize()) {
                  raf.seek(range.getSize());
                }
 else {
                  raf.seek(raf.length() - range.getSize());
                }
              }
 else {
                raf.seek(range.getIndex());
              }
              if (request.isEntityAvailable()) {
                ByteUtils.write(request.getEntity().getStream(),raf);
              }
            }
 catch (            IOException ioe) {
              getLogger().log(Level.WARNING,"Unable to create the temporary file",ioe);
              response.setStatus(new Status(Status.SERVER_ERROR_INTERNAL,"Unable to create a temporary file"));
              error=true;
            }
 finally {
              try {
                if (raf != null) {
                  raf.close();
                  System.gc();
                }
              }
 catch (              IOException ioe) {
                getLogger().log(Level.WARNING,"Unable to close the temporary file",ioe);
                response.setStatus(Status.SERVER_ERROR_INTERNAL,ioe);
                error=true;
              }
            }
          }
 else {
            FileOutputStream fos=null;
            try {
              tmp=File.createTempFile("restlet-upload","bin");
              if (request.isEntityAvailable()) {
                fos=new FileOutputStream(tmp);
                ByteUtils.write(request.getEntity().getStream(),fos);
              }
            }
 catch (            IOException ioe) {
              getLogger().log(Level.WARNING,"Unable to create the temporary file",ioe);
              response.setStatus(new Status(Status.SERVER_ERROR_INTERNAL,"Unable to create a temporary file"));
              error=true;
            }
 finally {
              try {
                if (fos != null) {
                  fos.close();
                }
              }
 catch (              IOException ioe) {
                getLogger().log(Level.WARNING,"Unable to close the temporary file",ioe);
                response.setStatus(Status.SERVER_ERROR_INTERNAL,ioe);
                error=true;
              }
            }
          }
          if (error) {
            if (tmp.exists() && !isResumeUpload()) {
              tmp.delete();
            }
            return;
          }
          if (tmp.exists() && file.delete()) {
            boolean renameSuccessfull=false;
            if (tmp.renameTo(file)) {
              if (request.getEntity() == null) {
                response.setStatus(Status.SUCCESS_NO_CONTENT);
              }
 else {
                response.setStatus(Status.SUCCESS_OK);
              }
              renameSuccessfull=true;
            }
 else {
              if (tmp.exists()) {
                try {
                  BufferedReader br=new BufferedReader(new FileReader(tmp));
                  BufferedWriter wr=new BufferedWriter(new FileWriter(file));
                  String s;
                  while ((s=br.readLine()) != null) {
                    wr.append(s);
                  }
                  br.close();
                  wr.flush();
                  wr.close();
                  renameSuccessfull=true;
                  tmp.delete();
                }
 catch (                Exception e) {
                  renameSuccessfull=false;
                }
              }
              if (!renameSuccessfull) {
                getLogger().log(Level.WARNING,"Unable to move the temporary file to replace the existing file");
                response.setStatus(new Status(Status.SERVER_ERROR_INTERNAL,"Unable to move the temporary file to replace the existing file"));
              }
            }
          }
 else {
            getLogger().log(Level.WARNING,"Unable to delete the existing file");
            response.setStatus(new Status(Status.SERVER_ERROR_INTERNAL,"Unable to delete the existing file"));
            if (tmp.exists() && !isResumeUpload()) {
              tmp.delete();
            }
          }
        }
 else {
          File parent=file.getParentFile();
          if ((parent != null) && !parent.exists()) {
            if (!parent.mkdirs()) {
              getLogger().log(Level.WARNING,"Unable to create the parent directory");
              response.setStatus(new Status(Status.SERVER_ERROR_INTERNAL,"Unable to create the parent directory"));
            }
          }
          if (partialPut) {
            RandomAccessFile raf=null;
            try {
              raf=new RandomAccessFile(file,"rwd");
              Range range=request.getRanges().get(0);
              if (range.getIndex() == Range.INDEX_LAST) {
                if (raf.length() <= range.getSize()) {
                  raf.seek(range.getSize());
                }
 else {
                  raf.seek(raf.length() - range.getSize());
                }
              }
 else {
                raf.seek(range.getIndex());
              }
              if (request.isEntityAvailable()) {
                ByteUtils.write(request.getEntity().getStream(),raf);
              }
            }
 catch (            FileNotFoundException fnfe) {
              getLogger().log(Level.WARNING,"Unable to create the new file",fnfe);
              response.setStatus(Status.SERVER_ERROR_INTERNAL,fnfe);
            }
catch (            IOException ioe) {
              getLogger().log(Level.WARNING,"Unable to create the new file",ioe);
              response.setStatus(Status.SERVER_ERROR_INTERNAL,ioe);
            }
 finally {
              try {
                if (raf != null) {
                  raf.close();
                  System.gc();
                }
              }
 catch (              IOException ioe) {
                getLogger().log(Level.WARNING,"Unable to close the new file",ioe);
                response.setStatus(Status.SERVER_ERROR_INTERNAL,ioe);
              }
            }
          }
 else {
            FileOutputStream fos=null;
            try {
              if (file.createNewFile()) {
                if (request.getEntity() == null) {
                  response.setStatus(Status.SUCCESS_NO_CONTENT);
                }
 else {
                  fos=new FileOutputStream(file);
                  ByteUtils.write(request.getEntity().getStream(),fos);
                  response.setStatus(Status.SUCCESS_CREATED);
                }
              }
 else {
                getLogger().log(Level.WARNING,"Unable to create the new file");
                response.setStatus(new Status(Status.SERVER_ERROR_INTERNAL,"Unable to create the new file"));
              }
            }
 catch (            FileNotFoundException fnfe) {
              getLogger().log(Level.WARNING,"Unable to create the new file",fnfe);
              response.setStatus(Status.SERVER_ERROR_INTERNAL,fnfe);
            }
catch (            IOException ioe) {
              getLogger().log(Level.WARNING,"Unable to create the new file",ioe);
              response.setStatus(Status.SERVER_ERROR_INTERNAL,ioe);
            }
 finally {
              try {
                if (fos != null) {
                  fos.close();
                }
              }
 catch (              IOException ioe) {
                getLogger().log(Level.WARNING,"Unable to close the new file",ioe);
                response.setStatus(Status.SERVER_ERROR_INTERNAL,ioe);
              }
            }
          }
        }
      }
    }
  }
}
