"\nLogging package for Python. Based on PEP 282 and comments thereto in\ncomp.lang.python, and influenced by Apache's log4j system.\n\nShould work under Python versions >= 1.5.2, except that source line\ninformation is not available unless 'sys._getframe()' is.\n\nCopyright (C) 2001-2007 Vinay Sajip. All Rights Reserved.\n\nTo use, simply 'import logging' and log away!\n"
import sys, os, types, time, string, cStringIO, traceback
try:
    import codecs
except ImportError:
    codecs = None
try:
    import thread
    import threading
except ImportError:
    thread = None
__author__ = 'Vinay Sajip <vinay_sajip@red-dove.com>'
__status__ = 'production'
__version__ = '0.5.0.2'
__date__ = '16 February 2007'
if hasattr(sys, 'frozen'):
    _srcfile = ('logging%s__init__%s' % (os.sep, __file__[(-4):]))
elif (string.lower(__file__[(-4):]) in ['.pyc', '.pyo']):
    _srcfile = (__file__[:(-4)] + '.py')
else:
    _srcfile = __file__
_srcfile = os.path.normcase(_srcfile)
if hasattr(sys, '_getframe'):
    currentframe = (lambda : sys._getframe(3))
_startTime = time.time()
raiseExceptions = 1
logThreads = 1
logProcesses = 1
CRITICAL = 50
FATAL = CRITICAL
ERROR = 40
WARNING = 30
WARN = WARNING
INFO = 20
DEBUG = 10
NOTSET = 0
_levelNames = {CRITICAL: 'CRITICAL', ERROR: 'ERROR', WARNING: 'WARNING', INFO: 'INFO', DEBUG: 'DEBUG', NOTSET: 'NOTSET', 'CRITICAL': CRITICAL, 'ERROR': ERROR, 'WARN': WARNING, 'WARNING': WARNING, 'INFO': INFO, 'DEBUG': DEBUG, 'NOTSET': NOTSET, }
_lock = None
_defaultFormatter = Formatter()
_handlers = {}
_handlerList = []
_loggerClass = None
_loggerClass = Logger
root = RootLogger(WARNING)
Logger.root = root
Logger.manager = Manager(Logger.root)
BASIC_FORMAT = '%(levelname)s:%(name)s:%(message)s'
fatal = critical
warn = warning
try:
    import atexit
    atexit.register(shutdown)
except ImportError:

    def exithook(status, old_exit=sys.exit):
        try:
            shutdown()
        finally:
            old_exit(status)
    sys.exit = exithook
