{
  Container container=new Container();
  container.getServers().add(Protocol.HTTP,8182);
  container.getClients().add(Protocol.FILE);
  Application application=new Application(container){
    @Override public Restlet createRoot(){
      Router router=new Router(getContext());
      Guard guard=new Guard(getContext(),ChallengeScheme.HTTP_BASIC,"Restlet tutorial");
      guard.getAuthorizations().put("scott","tiger");
      router.attach("/docs/",guard);
      Directory directory=new Directory(getContext(),ROOT_URI);
      guard.setNext(directory);
      Restlet account=new Restlet(){
        @Override public void handle(        Request request,        Response response){
          String message="Account of user \"" + request.getAttributes().get("user") + "\"";
          response.setEntity(message,MediaType.TEXT_PLAIN);
        }
      }
;
      Restlet orders=new Restlet(getContext()){
        @Override public void handle(        Request request,        Response response){
          String message="Orders of user \"" + request.getAttributes().get("user") + "\"";
          response.setEntity(message,MediaType.TEXT_PLAIN);
        }
      }
;
      Restlet order=new Restlet(getContext()){
        @Override public void handle(        Request request,        Response response){
          String message="Order \"" + request.getAttributes().get("order") + "\" for user \""+ request.getAttributes().get("user")+ "\"";
          response.setEntity(message,MediaType.TEXT_PLAIN);
        }
      }
;
      router.attach("/users/{user}$",account);
      router.attach("/users/{user}/orders$",orders);
      router.attach("/users/{user}/orders/{order}$",order);
      return router;
    }
  }
;
  container.getDefaultHost().attach("",application);
  container.start();
}
