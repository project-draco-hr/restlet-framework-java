def _test():
    body = 'HTTP/1.1 200 Ok\r\n\r\nText'
    sock = FakeSocket(body)
    resp = httplib.HTTPResponse(sock, 1)
    resp.begin()
    print resp.read()
    resp.close()
    body = 'HTTP/1.1 400.100 Not Ok\r\n\r\nText'
    sock = FakeSocket(body)
    resp = httplib.HTTPResponse(sock, 1)
    try:
        resp.begin()
    except httplib.BadStatusLine:
        print 'BadStatusLine raised as expected'
    else:
        print 'Expect BadStatusLine'
    for hp in ('www.python.org:abc', 'www.python.org:'):
        try:
            h = httplib.HTTP(hp)
        except httplib.InvalidURL:
            print 'InvalidURL raised as expected'
        else:
            print 'Expect InvalidURL'
    for (hp, h, p) in (('[fe80::207:e9ff:fe9b]:8000', 'fe80::207:e9ff:fe9b', 8000), ('www.python.org:80', 'www.python.org', 80), ('www.python.org', 'www.python.org', 80), ('[fe80::207:e9ff:fe9b]', 'fe80::207:e9ff:fe9b', 80)):
        try:
            http = httplib.HTTP(hp)
        except httplib.InvalidURL:
            print 'InvalidURL raised erroneously'
        c = http._conn
        if (h != c.host):
            raise AssertionError, ('Host incorrectly parsed', h, c.host)
        if (p != c.port):
            raise AssertionError, ('Port incorrectly parsed', p, c.host)
    text = 'HTTP/1.1 200 OK\r\nSet-Cookie: Customer="WILE_E_COYOTE"; Version="1"; Path="/acme"\r\nSet-Cookie: Part_Number="Rocket_Launcher_0001"; Version="1"; Path="/acme"\r\n\r\nNo body\r\n'
    hdr = 'Customer="WILE_E_COYOTE"; Version="1"; Path="/acme", Part_Number="Rocket_Launcher_0001"; Version="1"; Path="/acme"'
    s = FakeSocket(text)
    r = httplib.HTTPResponse(s, 1)
    r.begin()
    cookies = r.getheader('Set-Cookie')
    if (cookies != hdr):
        raise AssertionError, 'multiple headers not combined properly'
    sock = FakeSocket('HTTP/1.1 200 OK\r\nContent-Length: 14432\r\n\r\n', NoEOFStringIO)
    resp = httplib.HTTPResponse(sock, 1, method='HEAD')
    resp.begin()
    if (resp.read() != ''):
        raise AssertionError, 'Did not expect response from HEAD request'
    resp.close()
