"This module includes tests of the code object representation.\n\n>>> def f(x):\n...     def g(y):\n...         return x + y\n...     return g\n...\n\n>>> dump(f.func_code)\nname: f\nargcount: 1\nvarnames: ('x', 'g')\ncellvars: ('x',)\nfreevars: ()\nnlocals: 2\n\n>>> dump(f(4).func_code)\nname: g\nargcount: 1\nvarnames: ('y',)\ncellvars: ()\nfreevars: ('x',)\nnlocals: 1\n\n>>> def h(x, y):\n...     a = x + y\n...     b = x - y\n...     c = a * b\n...     return c\n...\n>>> dump(h.func_code)\nname: h\nargcount: 2\nvarnames: ('x', 'y', 'a', 'b', 'c')\ncellvars: ()\nfreevars: ()\nnlocals: 5\n\n>>> def attrs(obj):\n...     print obj.attr1\n...     print obj.attr2\n...     print obj.attr3\n\n>>> dump(attrs.func_code)\nname: attrs\nargcount: 1\nvarnames: ('obj',)\ncellvars: ()\nfreevars: ()\nnlocals: 1\n\n>>> def optimize_away():\n...     'doc string'\n...     'not a docstring'\n...     53\n...     53L\n\n>>> dump(optimize_away.func_code)\nname: optimize_away\nargcount: 0\nvarnames: ()\ncellvars: ()\nfreevars: ()\nnlocals: 0\n\n"
