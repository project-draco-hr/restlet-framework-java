def _read(self):
    buf = ''
    while True:
        try:
            buf = self._ssl.read(self._bufsize)
        except socket.sslerror as err:
            if ((err[0] == socket.SSL_ERROR_WANT_READ) or (err[0] == socket.SSL_ERROR_WANT_WRITE)):
                continue
            if ((err[0] == socket.SSL_ERROR_ZERO_RETURN) or (err[0] == socket.SSL_ERROR_EOF)):
                break
            raise
        except socket.error as err:
            if (err[0] == errno.EINTR):
                continue
            if (err[0] == errno.EBADF):
                break
            raise
        else:
            break
    return buf
