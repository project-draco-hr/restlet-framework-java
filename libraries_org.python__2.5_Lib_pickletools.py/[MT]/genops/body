def genops(pickle):
    "Generate all the opcodes in a pickle.\n\n    'pickle' is a file-like object, or string, containing the pickle.\n\n    Each opcode in the pickle is generated, from the current pickle position,\n    stopping after a STOP opcode is delivered.  A triple is generated for\n    each opcode:\n\n        opcode, arg, pos\n\n    opcode is an OpcodeInfo record, describing the current opcode.\n\n    If the opcode has an argument embedded in the pickle, arg is its decoded\n    value, as a Python object.  If the opcode doesn't have an argument, arg\n    is None.\n\n    If the pickle has a tell() method, pos was the value of pickle.tell()\n    before reading the current opcode.  If the pickle is a string object,\n    it's wrapped in a StringIO object, and the latter's tell() result is\n    used.  Else (the pickle doesn't have a tell(), and it's not obvious how\n    to query its current position) pos is None.\n    "
    import cStringIO as StringIO
    if isinstance(pickle, str):
        pickle = StringIO.StringIO(pickle)
    if hasattr(pickle, 'tell'):
        getpos = pickle.tell
    else:
        getpos = (lambda : None)
    while True:
        pos = getpos()
        code = pickle.read(1)
        opcode = code2op.get(code)
        if (opcode is None):
            if (code == ''):
                raise ValueError('pickle exhausted before seeing STOP')
            else:
                raise ValueError(('at position %s, opcode %r unknown' % ((((pos is None) and '<unknown>') or pos), code)))
        if (opcode.arg is None):
            arg = None
        else:
            arg = opcode.arg.reader(pickle)
        yield (opcode, arg, pos)
        if (code == '.'):
            assert (opcode.name == 'STOP')
            break
