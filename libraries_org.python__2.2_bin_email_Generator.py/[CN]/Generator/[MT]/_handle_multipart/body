def _handle_multipart(self, msg):
    msgtexts = []
    subparts = msg.get_payload()
    if (subparts is None):
        boundary = msg.get_boundary(failobj=_make_boundary())
        print  >> self._fp, ('--' + boundary)
        print  >> self._fp, '\n'
        print  >> self._fp, (('--' + boundary) + '--')
        return
    elif _isstring(subparts):
        self._fp.write(subparts)
        return
    elif (not isinstance(subparts, ListType)):
        subparts = [subparts]
    for part in subparts:
        s = StringIO()
        g = self.clone(s)
        g.flatten(part, unixfrom=False)
        msgtexts.append(s.getvalue())
    alltext = NL.join(msgtexts)
    boundary = msg.get_boundary(failobj=_make_boundary(alltext))
    if (msg.get_boundary() != boundary):
        msg.set_boundary(boundary)
    if (msg.preamble is not None):
        self._fp.write(msg.preamble)
        plines = NLCRE.split(msg.preamble)
        if ((plines != ['']) and (plines[(-1)] != '')):
            self._fp.write('\n')
    print  >> self._fp, ('--' + boundary)
    joiner = (('\n--' + boundary) + '\n')
    self._fp.write(joiner.join(msgtexts))
    print  >> self._fp, (('\n--' + boundary) + '--'),
    if (msg.epilogue is not None):
        if (not msg.epilogue.startswith('\n')):
            print  >> self._fp
        self._fp.write(msg.epilogue)
