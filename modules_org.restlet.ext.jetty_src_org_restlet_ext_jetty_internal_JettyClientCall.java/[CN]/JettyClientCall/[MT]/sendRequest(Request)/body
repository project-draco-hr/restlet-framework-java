{
  Status result=null;
  try {
    final Representation entity=request.getEntity();
    if (entity != null && entity.isAvailable())     this.httpRequest.content(new InputStreamContentProvider(entity.getStream()));
    for (    Header header : getRequestHeaders()) {
      final String name=header.getName();
      if (!name.equals(HeaderConstants.HEADER_CONTENT_LENGTH))       this.httpRequest.header(name,header.getValue());
    }
    this.inputStreamResponseListener=new InputStreamResponseListener();
    this.httpRequest.send(this.inputStreamResponseListener);
    long timeout=5000;
    this.httpResponse=(org.eclipse.jetty.client.api.Response)this.inputStreamResponseListener.get(timeout,TimeUnit.MILLISECONDS);
    result=new Status(getStatusCode(),getReasonPhrase());
  }
 catch (  IOException e) {
    this.clientHelper.getLogger().log(Level.WARNING,"An error occurred while reading the request entity.",e);
    result=new Status(Status.CONNECTOR_ERROR_INTERNAL,e);
    getHttpRequest().abort(e);
  }
catch (  TimeoutException e) {
    this.clientHelper.getLogger().log(Level.WARNING,"The HTTP request timed out.",e);
    result=new Status(Status.CONNECTOR_ERROR_COMMUNICATION,e);
    getHttpRequest().abort(e);
  }
catch (  InterruptedException e) {
    this.clientHelper.getLogger().log(Level.WARNING,"The HTTP request thread was interrupted.",e);
    result=new Status(Status.CONNECTOR_ERROR_COMMUNICATION,e);
    getHttpRequest().abort(e);
  }
catch (  ExecutionException e) {
    this.clientHelper.getLogger().log(Level.WARNING,"An error occurred while processing the HTTP request.",e);
    result=new Status(Status.CONNECTOR_ERROR_COMMUNICATION,e);
    getHttpRequest().abort(e);
  }
  return result;
}
