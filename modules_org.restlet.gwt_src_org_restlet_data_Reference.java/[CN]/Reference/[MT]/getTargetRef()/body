{
  Reference result=null;
  if (isRelative() && (this.baseRef != null)) {
    Reference baseReference=null;
    if (this.baseRef.isAbsolute()) {
      baseReference=this.baseRef;
    }
 else {
      baseReference=this.baseRef.getTargetRef();
    }
    if (baseReference.isRelative()) {
      throw new IllegalArgumentException("The base reference must have an absolute hierarchical path component");
    }
    String authority=getAuthority();
    String path=getPath();
    String query=getQuery();
    String fragment=getFragment();
    result=new Reference();
    result.setScheme(baseReference.getScheme());
    if (authority != null) {
      result.setAuthority(authority);
      result.setPath(path);
      result.setQuery(query);
    }
 else {
      result.setAuthority(baseReference.getAuthority());
      if ((path == null) || (path.equals(""))) {
        result.setPath(baseReference.getPath());
        if (query != null) {
          result.setQuery(query);
        }
 else {
          result.setQuery(baseReference.getQuery());
        }
      }
 else {
        if (path.startsWith("/")) {
          result.setPath(path);
        }
 else {
          String basePath=baseReference.getPath();
          String mergedPath=null;
          if ((baseReference.getAuthority() != null) && ((basePath == null) || (basePath.equals("")))) {
            mergedPath="/" + path;
          }
 else {
            int lastSlash=basePath.lastIndexOf('/');
            if (lastSlash == -1) {
              mergedPath=path;
            }
 else {
              mergedPath=basePath.substring(0,lastSlash + 1) + path;
            }
          }
          result.setPath(mergedPath);
        }
        result.setQuery(query);
      }
    }
    result.setFragment(fragment);
  }
 else   if (isRelative()) {
    throw new IllegalArgumentException("Relative references are only usable when a base reference is set.");
  }
 else {
    result=new Reference(this.internalRef);
  }
  result.normalize();
  return result;
}
