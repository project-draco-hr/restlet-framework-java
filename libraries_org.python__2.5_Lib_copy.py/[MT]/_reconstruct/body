def _reconstruct(x, info, deep, memo=None):
    if isinstance(info, str):
        return x
    assert isinstance(info, tuple)
    if (memo is None):
        memo = {}
    n = len(info)
    assert (n in (2, 3, 4, 5))
    (callable, args) = info[:2]
    if (n > 2):
        state = info[2]
    else:
        state = {}
    if (n > 3):
        listiter = info[3]
    else:
        listiter = None
    if (n > 4):
        dictiter = info[4]
    else:
        dictiter = None
    if deep:
        args = deepcopy(args, memo)
    y = callable(*args)
    memo[id(x)] = y
    if (listiter is not None):
        for item in listiter:
            if deep:
                item = deepcopy(item, memo)
            y.append(item)
    if (dictiter is not None):
        for (key, value) in dictiter:
            if deep:
                key = deepcopy(key, memo)
                value = deepcopy(value, memo)
            y[key] = value
    if state:
        if deep:
            state = deepcopy(state, memo)
        if hasattr(y, '__setstate__'):
            y.__setstate__(state)
        else:
            if (isinstance(state, tuple) and (len(state) == 2)):
                (state, slotstate) = state
            else:
                slotstate = None
            if (state is not None):
                y.__dict__.update(state)
            if (slotstate is not None):
                for (key, value) in slotstate.iteritems():
                    setattr(y, key, value)
    return y
