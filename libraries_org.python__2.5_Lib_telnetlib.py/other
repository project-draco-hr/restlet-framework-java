'TELNET client class.\n\nBased on RFC 854: TELNET Protocol Specification, by J. Postel and\nJ. Reynolds\n\nExample:\n\n>>> from telnetlib import Telnet\n>>> tn = Telnet(\'www.python.org\', 79)   # connect to finger port\n>>> tn.write(\'guido\r\n\')\n>>> print tn.read_all()\nLogin       Name               TTY         Idle    When    Where\nguido    Guido van Rossum      pts/2        <Dec  2 11:10> snag.cnri.reston..\n\n>>>\n\nNote that read_all() won\'t read until eof -- it just reads some data\n-- but it guarantees to read at least one byte unless EOF is hit.\n\nIt is possible to pass a Telnet object to select.select() in order to\nwait until more data is available.  Note that in this case,\nread_eager() may return \'\' even if there was data on the socket,\nbecause the protocol negotiation may have eaten the data.  This is why\nEOFError is needed in some cases to distinguish between "no data" and\n"connection closed" (since the socket also appears ready for reading\nwhen it is closed).\n\nTo do:\n- option negotiation\n- timeout should be intrinsic to the connection object instead of an\n  option on one of the read calls only\n\n'
import sys
import socket
import os
if (os.name == 'java'):
    from select import cpython_compatible_select as select
else:
    from select import select
del os
__all__ = ['Telnet']
DEBUGLEVEL = 0
TELNET_PORT = 23
IAC = chr(255)
DONT = chr(254)
DO = chr(253)
WONT = chr(252)
WILL = chr(251)
theNULL = chr(0)
SE = chr(240)
NOP = chr(241)
DM = chr(242)
BRK = chr(243)
IP = chr(244)
AO = chr(245)
AYT = chr(246)
EC = chr(247)
EL = chr(248)
GA = chr(249)
SB = chr(250)
BINARY = chr(0)
ECHO = chr(1)
RCP = chr(2)
SGA = chr(3)
NAMS = chr(4)
STATUS = chr(5)
TM = chr(6)
RCTE = chr(7)
NAOL = chr(8)
NAOP = chr(9)
NAOCRD = chr(10)
NAOHTS = chr(11)
NAOHTD = chr(12)
NAOFFD = chr(13)
NAOVTS = chr(14)
NAOVTD = chr(15)
NAOLFD = chr(16)
XASCII = chr(17)
LOGOUT = chr(18)
BM = chr(19)
DET = chr(20)
SUPDUP = chr(21)
SUPDUPOUTPUT = chr(22)
SNDLOC = chr(23)
TTYPE = chr(24)
EOR = chr(25)
TUID = chr(26)
OUTMRK = chr(27)
TTYLOC = chr(28)
VT3270REGIME = chr(29)
X3PAD = chr(30)
NAWS = chr(31)
TSPEED = chr(32)
LFLOW = chr(33)
LINEMODE = chr(34)
XDISPLOC = chr(35)
OLD_ENVIRON = chr(36)
AUTHENTICATION = chr(37)
ENCRYPT = chr(38)
NEW_ENVIRON = chr(39)
TN3270E = chr(40)
XAUTH = chr(41)
CHARSET = chr(42)
RSP = chr(43)
COM_PORT_OPTION = chr(44)
SUPPRESS_LOCAL_ECHO = chr(45)
TLS = chr(46)
KERMIT = chr(47)
SEND_URL = chr(48)
FORWARD_X = chr(49)
PRAGMA_LOGON = chr(138)
SSPI_LOGON = chr(139)
PRAGMA_HEARTBEAT = chr(140)
EXOPL = chr(255)
NOOPT = chr(0)
if (__name__ == '__main__'):
    test()
