def run(self):
    if (not self.skip_build):
        self.run_command('build')
    install = self.reinitialize_command('install', reinit_subcommands=1)
    install.prefix = self.bdist_dir
    install.skip_build = self.skip_build
    install.warn_dir = 0
    install_lib = self.reinitialize_command('install_lib')
    install_lib.compile = 0
    install_lib.optimize = 0
    if self.distribution.has_ext_modules():
        target_version = self.target_version
        if (not target_version):
            assert self.skip_build, 'Should have already checked this'
            target_version = sys.version[0:3]
        plat_specifier = ('.%s-%s' % (get_platform(), target_version))
        build = self.get_finalized_command('build')
        build.build_lib = os.path.join(build.build_base, ('lib' + plat_specifier))
    log.info('installing to %s', self.bdist_dir)
    install.ensure_finalized()
    sys.path.insert(0, os.path.join(self.bdist_dir, 'PURELIB'))
    install.run()
    del sys.path[0]
    self.mkpath(self.dist_dir)
    fullname = self.distribution.get_fullname()
    installer_name = self.get_installer_filename(fullname)
    installer_name = os.path.abspath(installer_name)
    if os.path.exists(installer_name):
        os.unlink(installer_name)
    metadata = self.distribution.metadata
    author = metadata.author
    if (not author):
        author = metadata.maintainer
    if (not author):
        author = 'UNKNOWN'
    version = metadata.get_version()
    sversion = ('%d.%d.%d' % StrictVersion(version).version)
    product_name = ('Python %s %s' % (self.target_version, self.distribution.get_fullname()))
    self.db = msilib.init_database(installer_name, schema, product_name, msilib.gen_uuid(), sversion, author)
    msilib.add_tables(self.db, sequence)
    props = [('DistVersion', version)]
    email = (metadata.author_email or metadata.maintainer_email)
    if email:
        props.append(('ARPCONTACT', email))
    if metadata.url:
        props.append(('ARPURLINFOABOUT', metadata.url))
    if props:
        add_data(self.db, 'Property', props)
    self.add_find_python()
    self.add_files()
    self.add_scripts()
    self.add_ui()
    self.db.Commit()
    if hasattr(self.distribution, 'dist_files'):
        self.distribution.dist_files.append(('bdist_msi', self.target_version, fullname))
    if (not self.keep_temp):
        remove_tree(self.bdist_dir, dry_run=self.dry_run)
