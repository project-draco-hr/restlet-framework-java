def setClassLoaderAndCheck(self, orig_jar, prefix, compile_path=''):
    orig_jar = test_support.findfile(orig_jar)
    jar = os.path.join(self.temp_dir, os.path.basename(orig_jar))
    shutil.copy(orig_jar, jar)
    code = os.path.join(self.temp_dir, 'prefer_compiled.py')
    fp = open(code, 'w')
    fp.write('compiled = True')
    fp.close()
    py_compile.compile(code)
    zip = zipfile.ZipFile(jar, 'a')
    zip.write(os.path.join(self.temp_dir, 'prefer_compiled$py.class'), os.path.join(compile_path, 'jar_pkg', 'prefer_compiled$py.class'))
    zip.close()
    Thread.currentThread().contextClassLoader = test_support.make_jar_classloader(jar)
    import flat_in_jar
    self.assertEquals(flat_in_jar.value, 7)
    import jar_pkg
    self.assertEquals((prefix + '/jar_pkg/__init__.py'), jar_pkg.__file__)
    from jar_pkg import prefer_compiled
    self.assertEquals((prefix + '/jar_pkg/prefer_compiled$py.class'), prefer_compiled.__file__)
    self.assert_(prefer_compiled.compiled)
    self.assertRaises(NameError, __import__, 'flat_bad')
    self.assertRaises(NameError, __import__, 'jar_pkg.bad')
