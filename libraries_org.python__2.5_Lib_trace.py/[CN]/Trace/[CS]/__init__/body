def __init__(self, count=1, trace=1, countfuncs=0, countcallers=0, ignoremods=(), ignoredirs=(), infile=None, outfile=None):
    "\n        @param count true iff it should count number of times each\n                     line is executed\n        @param trace true iff it should print out each line that is\n                     being counted\n        @param countfuncs true iff it should just output a list of\n                     (filename, modulename, funcname,) for functions\n                     that were called at least once;  This overrides\n                     `count' and `trace'\n        @param ignoremods a list of the names of modules to ignore\n        @param ignoredirs a list of the names of directories to ignore\n                     all of the (recursive) contents of\n        @param infile file from which to read stored counts to be\n                     added into the results\n        @param outfile file in which to write the results\n        "
    self.infile = infile
    self.outfile = outfile
    self.ignore = Ignore(ignoremods, ignoredirs)
    self.counts = {}
    self.blabbed = {}
    self.pathtobasename = {}
    self.donothing = 0
    self.trace = trace
    self._calledfuncs = {}
    self._callers = {}
    self._caller_cache = {}
    if countcallers:
        self.globaltrace = self.globaltrace_trackcallers
    elif countfuncs:
        self.globaltrace = self.globaltrace_countfuncs
    elif (trace and count):
        self.globaltrace = self.globaltrace_lt
        self.localtrace = self.localtrace_trace_and_count
    elif trace:
        self.globaltrace = self.globaltrace_lt
        self.localtrace = self.localtrace_trace
    elif count:
        self.globaltrace = self.globaltrace_lt
        self.localtrace = self.localtrace_count
    else:
        self.donothing = 1
