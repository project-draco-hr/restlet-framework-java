{
  if (entity == null)   return null;
  if (entity instanceof Representation) {
    Representation repr=(Representation)entity;
    repr.setCharacterSet(getSupportedCharSet(repr.getCharacterSet()));
    return repr;
  }
  Class<? extends Object> entityClass=entity.getClass();
  Type genericReturnType=null;
  Annotation[] methodAnnotations=null;
  if (resourceMethod != null) {
    genericReturnType=resourceMethod.getGenericReturnType();
    methodAnnotations=resourceMethod.getAnnotations();
  }
  if (genericReturnType instanceof Class && ((Class)genericReturnType).isAssignableFrom(javax.ws.rs.core.Response.class)) {
    genericReturnType=entityClass;
  }
  MessageBodyWriterSubSet mbws=entityProviders.writerSubSet(entityClass,genericReturnType,methodAnnotations);
  if (mbws.isEmpty())   throw excHandler.noMessageBodyWriter();
  MediaType respMediaType;
  if (givenResponseMediaType != null)   respMediaType=givenResponseMediaType;
 else   if (resourceMethod instanceof ResourceMethod)   respMediaType=determineMediaType((ResourceMethod)resourceMethod,mbws);
 else   respMediaType=MediaType.TEXT_PLAIN;
  MessageBodyWriter<?> mbw=mbws.getBestWriter(respMediaType,accMediaTypes);
  if (mbw == null)   throw excHandler.noMessageBodyWriter();
  Response response=tlContext.get().getResponse();
  MultivaluedMap<String,Object> httpResponseHeaders=new WrappedRequestForHttpHeaders(response,jaxRsRespHeaders,getLogger());
  Representation repr=new JaxRsOutputRepresentation(entity,genericReturnType,respMediaType,methodAnnotations,mbw,httpResponseHeaders);
  repr.setCharacterSet(getSupportedCharSet(httpResponseHeaders));
  return repr;
}
