def __init__(self, host='', port=IMAP4_PORT):
    self.host = host
    self.port = port
    self.debug = Debug
    self.state = 'LOGOUT'
    self.literal = None
    self.tagged_commands = {}
    self.untagged_responses = {}
    self.continuation_response = ''
    self.is_readonly = None
    self.tagnum = 0
    self.open(host, port)
    self.tagpre = Int2AP(random.randint(0, 31999))
    self.tagre = re.compile((('(?P<tag>' + self.tagpre) + '\\d+) (?P<type>[A-Z]+) (?P<data>.*)'))
    if __debug__:
        if (self.debug >= 1):
            _mesg(('imaplib version %s' % __version__))
            _mesg(('new IMAP4 connection, tag=%s' % self.tagpre))
    self.welcome = self._get_response()
    if self.untagged_responses.has_key('PREAUTH'):
        self.state = 'AUTH'
    elif self.untagged_responses.has_key('OK'):
        self.state = 'NONAUTH'
    else:
        raise self.error(self.welcome)
    cap = 'CAPABILITY'
    self._simple_command(cap)
    if (not self.untagged_responses.has_key(cap)):
        raise self.error('no CAPABILITY response from server')
    self.capabilities = tuple(self.untagged_responses[cap][(-1)].upper().split())
    if __debug__:
        if (self.debug >= 3):
            _mesg(('CAPABILITIES: %s' % `self.capabilities`))
    for version in AllowedVersions:
        if (not (version in self.capabilities)):
            continue
        self.PROTOCOL_VERSION = version
        return
    raise self.error('server not IMAP4 compliant')
