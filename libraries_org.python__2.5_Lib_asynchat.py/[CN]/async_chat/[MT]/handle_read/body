def handle_read(self):
    try:
        data = self.recv(self.ac_in_buffer_size)
    except socket.error as why:
        self.handle_error()
        return
    self.ac_in_buffer = (self.ac_in_buffer + data)
    while self.ac_in_buffer:
        lb = len(self.ac_in_buffer)
        terminator = self.get_terminator()
        if (not terminator):
            self.collect_incoming_data(self.ac_in_buffer)
            self.ac_in_buffer = ''
        elif (isinstance(terminator, int) or isinstance(terminator, long)):
            n = terminator
            if (lb < n):
                self.collect_incoming_data(self.ac_in_buffer)
                self.ac_in_buffer = ''
                self.terminator = (self.terminator - lb)
            else:
                self.collect_incoming_data(self.ac_in_buffer[:n])
                self.ac_in_buffer = self.ac_in_buffer[n:]
                self.terminator = 0
                self.found_terminator()
        else:
            terminator_len = len(terminator)
            index = self.ac_in_buffer.find(terminator)
            if (index != (-1)):
                if (index > 0):
                    self.collect_incoming_data(self.ac_in_buffer[:index])
                self.ac_in_buffer = self.ac_in_buffer[(index + terminator_len):]
                self.found_terminator()
            else:
                index = find_prefix_at_end(self.ac_in_buffer, terminator)
                if index:
                    if (index != lb):
                        self.collect_incoming_data(self.ac_in_buffer[:(- index)])
                        self.ac_in_buffer = self.ac_in_buffer[(- index):]
                    break
                else:
                    self.collect_incoming_data(self.ac_in_buffer)
                    self.ac_in_buffer = ''
