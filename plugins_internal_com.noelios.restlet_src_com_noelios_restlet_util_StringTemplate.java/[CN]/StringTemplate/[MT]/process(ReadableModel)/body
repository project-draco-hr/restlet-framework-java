{
  StringBuilder sb=new StringBuilder();
  char nextChar=0;
  int potentialStart=0;
  int potentialEnd=0;
  int potentialIndex=0;
  int textStartIndex=0;
  int instructionStartIndex=0;
  int variableStartIndex=0;
  int parseState=STATE_TEXT;
  int textState=TEXT_APPEND;
  int i=0;
  for (; i < template.length(); i++) {
    nextChar=template.charAt(i);
switch (parseState) {
case STATE_TEXT:
      if (nextChar == instructionStart.charAt(0)) {
        if (instructionStart.length() == 1) {
          processText(textState,textStartIndex,i,sb,model);
          instructionStartIndex=i + 1;
          parseState=STATE_INSTRUCTION;
        }
 else {
          potentialStart=i;
          parseState=STATE_INSTRUCTION_POTENTIAL_DELIMITER_START;
        }
      }
 else       if (nextChar == variableStart.charAt(0)) {
        if (variableStart.length() == 1) {
          processText(textState,textStartIndex,i,sb,model);
          variableStartIndex=i + 1;
          parseState=STATE_VARIABLE;
        }
 else {
          potentialStart=i;
          parseState=STATE_VARIABLE_POTENTIAL_DELIMITER_START;
        }
      }
 else {
      }
    break;
case STATE_INSTRUCTION_POTENTIAL_DELIMITER_START:
  potentialIndex=i - potentialStart;
if (nextChar == instructionStart.charAt(potentialIndex)) {
  if (instructionStart.length() == potentialIndex + 1) {
    processText(textState,textStartIndex,potentialStart,sb,model);
    instructionStartIndex=i + 1;
    parseState=STATE_INSTRUCTION;
  }
 else {
  }
}
 else {
  parseState=STATE_TEXT;
  i=potentialStart;
}
break;
case STATE_VARIABLE_POTENTIAL_DELIMITER_START:
potentialIndex=i - potentialStart;
if (nextChar == variableStart.charAt(potentialIndex)) {
if (variableStart.length() == potentialIndex + 1) {
processText(textState,textStartIndex,potentialStart,sb,model);
variableStartIndex=i + 1;
parseState=STATE_VARIABLE;
}
 else {
}
}
 else {
parseState=STATE_TEXT;
i=potentialStart;
}
break;
case STATE_INSTRUCTION:
if (nextChar == instructionEnd.charAt(0)) {
if (instructionEnd.length() == 1) {
textState=processInstruction(textState,instructionStartIndex,i,sb,model);
textStartIndex=i + 1;
parseState=STATE_TEXT;
}
 else {
potentialEnd=i;
parseState=STATE_INSTRUCTION_POTENTIAL_DELIMITER_END;
}
}
 else {
}
break;
case STATE_VARIABLE:
if (nextChar == variableEnd.charAt(0)) {
if (variableEnd.length() == 1) {
textState=processVariable(textState,variableStartIndex,i,sb,model);
textStartIndex=i + 1;
parseState=STATE_TEXT;
}
 else {
potentialEnd=i;
parseState=STATE_VARIABLE_POTENTIAL_DELIMITER_END;
}
}
 else {
}
break;
case STATE_INSTRUCTION_POTENTIAL_DELIMITER_END:
potentialIndex=i - potentialEnd;
if (nextChar == instructionEnd.charAt(potentialIndex)) {
if (instructionEnd.length() == potentialIndex + 1) {
textState=processInstruction(textState,instructionStartIndex,potentialEnd,sb,model);
textStartIndex=i + 1;
parseState=STATE_TEXT;
}
 else {
}
}
 else {
parseState=STATE_INSTRUCTION;
i=potentialEnd;
}
break;
case STATE_VARIABLE_POTENTIAL_DELIMITER_END:
potentialIndex=i - potentialEnd;
if (nextChar == variableEnd.charAt(potentialIndex)) {
if (variableEnd.length() == potentialIndex + 1) {
textState=processVariable(textState,variableStartIndex,potentialEnd,sb,model);
textStartIndex=i + 1;
parseState=STATE_TEXT;
}
 else {
}
}
 else {
parseState=STATE_VARIABLE;
i=potentialEnd;
}
break;
}
}
if (parseState == STATE_TEXT) {
processText(textState,textStartIndex,i,sb,model);
}
getLogger().log(Level.FINE,"Template result",sb);
return sb.toString();
}
