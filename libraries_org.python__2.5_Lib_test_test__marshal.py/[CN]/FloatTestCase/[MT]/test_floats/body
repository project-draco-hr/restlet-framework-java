def test_floats(self):
    small = 1e-25
    n = (sys.maxint * 3.7e+250)
    while (n > small):
        for expected in ((- n), n):
            f = float(expected)
            s = marshal.dumps(f)
            got = marshal.loads(s)
            self.assertEqual(f, got)
            got = roundtrip(f)
            self.assertEqual(f, got)
        n /= 123.4567
    f = 0.0
    s = marshal.dumps(f, 2)
    got = marshal.loads(s)
    self.assertEqual(f, got)
    s = marshal.dumps(f, 1)
    got = marshal.loads(s)
    self.assertEqual(f, got)
    n = (sys.maxint * 3.7e-250)
    while (n < small):
        for expected in ((- n), n):
            f = float(expected)
            s = marshal.dumps(f)
            got = marshal.loads(s)
            self.assertEqual(f, got)
            s = marshal.dumps(f, 1)
            got = marshal.loads(s)
            if test_support.is_jython:
                self.assertAlmostEqual(f, got)
            else:
                self.assertEqual(f, got)
            got = roundtrip(f)
            self.assertEqual(f, got)
        n *= 123.4567
    os.unlink(test_support.TESTFN)
