{
  int maxThreads=getMaxThreads();
  int minThreads=getMinThreads();
  ThreadPoolExecutor result=new ThreadPoolExecutor(minThreads,maxThreads,getThreadMaxIdleTimeMs(),TimeUnit.MILLISECONDS,new SynchronousQueue<Runnable>(),new LoggingThreadFactory(getLogger(),true));
  result.setRejectedExecutionHandler(new RejectedExecutionHandler(){
    public void rejectedExecution(    Runnable r,    ThreadPoolExecutor executor){
      getLogger().warning("Unable to run the following " + (isClientSide() ? "client-side" : "server-side") + " task: "+ r);
      getLogger().info("Worker service state: " + (isWorkerServiceFull() ? "Full" : "Normal"));
      getLogger().info("Worker service tasks: " + getWorkerService().getQueue().size() + " queued, "+ getWorkerService().getActiveCount()+ " active, "+ getWorkerService().getCompletedTaskCount()+ " completed, "+ getWorkerService().getTaskCount()+ " scheduled.");
      getLogger().info("Worker service thread pool: " + getWorkerService().getCorePoolSize() + " core size, "+ getWorkerService().getLargestPoolSize()+ " largest size, "+ getWorkerService().getMaximumPoolSize()+ " maximum size, "+ getWorkerService().getPoolSize()+ " current size");
    }
  }
);
  return result;
}
