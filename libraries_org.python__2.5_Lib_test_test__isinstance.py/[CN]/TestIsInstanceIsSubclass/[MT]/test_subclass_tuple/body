def test_subclass_tuple(self):
    self.assertEqual(True, issubclass(Child, (Child,)))
    self.assertEqual(True, issubclass(Child, (Super,)))
    self.assertEqual(False, issubclass(Super, (Child,)))
    self.assertEqual(True, issubclass(Super, (Child, Super)))
    self.assertEqual(False, issubclass(Child, ()))
    self.assertEqual(True, issubclass(Super, (Child, (Super,))))
    self.assertEqual(True, issubclass(NewChild, (NewChild,)))
    self.assertEqual(True, issubclass(NewChild, (NewSuper,)))
    self.assertEqual(False, issubclass(NewSuper, (NewChild,)))
    self.assertEqual(True, issubclass(NewSuper, (NewChild, NewSuper)))
    self.assertEqual(False, issubclass(NewChild, ()))
    self.assertEqual(True, issubclass(NewSuper, (NewChild, (NewSuper,))))
    self.assertEqual(True, issubclass(int, (long, (float, int))))
    if test_support.have_unicode:
        self.assertEqual(True, issubclass(str, (unicode, (Child, NewChild, basestring))))
