def test_class_locals_realworld(self):


    class FieldGathererMeta(type):

        def __new__(meta, name, bases, class_dict):
            cls = type.__new__(meta, name, bases, class_dict)
            cls.fields = [field.upper() for field in class_dict.iterkeys() if (not field.startswith('_'))]
            cls.fields.sort()
            return cls


    class SomeClass(object):
        pass


    class MyFields(object):
        __metaclass__ = FieldGathererMeta
        jython = 'foo'
        java = ('bar', SomeClass())
    self.assertEqual(MyFields.fields, ['JAVA', 'JYTHON'])


    class MyFields2(object):
        __metaclass__ = FieldGathererMeta
        jython = 'foo'
        java = ('bar', SomeClass())
        locals()
    self.assertEqual(MyFields2.fields, ['FIELDGATHERERMETA', 'JAVA', 'JYTHON', 'SOMECLASS'])
