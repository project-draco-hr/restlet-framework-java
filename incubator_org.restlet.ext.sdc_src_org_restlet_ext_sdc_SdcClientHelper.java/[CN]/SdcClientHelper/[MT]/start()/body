{
  super.start();
  getLogger().info("Starting the SDC tunnel on port 4433.");
  new Thread(){
    @Override public void run(){
      try {
        SslContextFactory contextFactory=SslUtils.getSslContextFactory(SdcClientHelper.this);
        SSLServerSocketFactory ssf=contextFactory.createSslContext().getServerSocketFactory();
        SSLServerSocket serverSocket=(SSLServerSocket)ssf.createServerSocket(4433);
        boolean loop=true;
        SSLSocket socket=null;
        getLatch().countDown();
        while (loop) {
          try {
            socket=(SSLSocket)serverSocket.accept();
            socket.setEnabledCipherSuites(getEnabledCipherSuites());
            SdcServerConnection ssc;
            ssc=new SdcServerConnection(SdcClientHelper.this,socket);
            ssc.connect();
            getConnections().put(ssc.getKey(),ssc);
          }
 catch (          IOException e) {
            e.printStackTrace();
          }
        }
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
.start();
  try {
    if (!latch.await(NioUtils.NIO_TIMEOUT,TimeUnit.MILLISECONDS)) {
      getLogger().warning("The calling thread timed out while waiting for the connector to be ready to accept connections.");
    }
  }
 catch (  InterruptedException ex) {
    getLogger().log(Level.WARNING,"Interrupted while waiting for starting latch. Stopping...",ex);
    stop();
  }
}
