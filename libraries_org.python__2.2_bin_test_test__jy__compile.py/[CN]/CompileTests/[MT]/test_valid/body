def test_valid(self):
    av = self.assertValid
    av('')
    av('\n')
    av('\n\n')
    av('# a\n')
    av('a = 1')
    av('\na = 1')
    av('a = 1\n')
    av('a = 1\n\n')
    av('\n\na = 1\n\n', values={'a': 1, })
    av('def x():\n  pass\n')
    av('if 1:\n pass\n')
    av('\n\nif 1: pass\n')
    av('\n\nif 1: a=1\n\n', values={'a': 1, })
    av('def x():\n  pass')
    av('def x():\n  pass\n ')
    av('def x():\n  pass\n  ')
    av('\n\ndef x():\n  pass')
    av('def x():\n\n pass\n')
    av('def x():\n  pass\n  \n')
    av('def x():\n  pass\n \n')
    av('pass\n')
    av('3**3\n')
    av('if 9==3:\n   pass\nelse:\n   pass')
    av('if 9==3:\n   pass\nelse:\n   pass\n')
    av('if 1:\n pass\n if 1:\n  pass\n else:\n  pass')
    av('if 1:\n pass\n if 1:\n  pass\n else:\n  pass\n')
    av('#a\n#b\na = 3\n')
    av('#a\n\n   \na=3\n', values={'a': 3, })
    av('a=3\n\n')
    av('a = 9+ \\\n3')
    av('3**3', 'eval')
    av('(lambda z: \n z**3)', 'eval')
    av('9+ \\\n3', 'eval')
    av('9+ \\\n3\n', 'eval')
    self.eval_d = {'a': 2, }
    av('\n\na**3', 'eval', value=8)
    av('\n \na**3', 'eval', value=8)
    av('#a\n#b\na**3', 'eval', value=8)
