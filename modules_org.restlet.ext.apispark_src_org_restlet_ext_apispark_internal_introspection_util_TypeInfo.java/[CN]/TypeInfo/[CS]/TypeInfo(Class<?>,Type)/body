{
  this.clazz=clazz;
  this.type=type;
  Class<?> componentClazz=ReflectUtils.getComponentClass(type);
  representationClazz=(componentClazz != null) ? componentClazz : clazz;
  representationName=Types.convertPrimitiveType(representationClazz);
  isList=ReflectUtils.isListType(clazz);
  if (isList) {
    if (componentClazz == null) {
      throw new UnsupportedTypeException("Type " + Types.toString(clazz,type) + " is a list/array and its component type is unknown");
    }
    componentTypeInfo=Types.getTypeInfo(componentClazz,null);
  }
 else {
    componentTypeInfo=null;
  }
  isPrimitive=Types.isPrimitiveType(representationClazz);
  isPojo=Types.isPojo(representationClazz);
  isFile=Representation.class.isAssignableFrom(representationClazz) || File.class.isAssignableFrom(representationClazz) || InputStream.class.isAssignableFrom(representationClazz)|| OutputStream.class.isAssignableFrom(representationClazz)|| Reader.class.isAssignableFrom(representationClazz)|| Writer.class.isAssignableFrom(representationClazz);
}
