{
  ContentReader.State state=getCurrentState();
  this.base.incrDepth();
  this.language.incrDepth();
  if (!this.consumeContent && this.builder != null) {
    this.builder=null;
  }
  if (state == State.NONE) {
    if (checkRdfQName("RDF",name)) {
      String base=attributes.getValue("xml:base");
      if (base != null) {
        this.base.add(new Reference(base));
      }
    }
 else {
      pushSubject(parseNode(uri,localName,name,attributes));
      pushState(State.SUBJECT);
    }
  }
 else   if (state == State.SUBJECT) {
    List<String[]> arcs=new ArrayList<String[]>();
    pushState(State.PREDICATE);
    this.consumeContent=true;
    Reference currentSubject=getCurrentSubject();
    this.currentPredicate=resolve(uri,name);
    Reference currentObject=null;
    for (int i=0; i < attributes.getLength(); i++) {
      String qName=attributes.getQName(i);
      if (checkRdfQName("resource",qName)) {
        this.consumeContent=false;
        currentObject=resolve(attributes.getValue(i),false);
        popState();
        pushState(State.OBJECT);
      }
 else       if (checkRdfQName("datatype",qName)) {
        this.consumeContent=true;
        popState();
        pushState(State.LITERAL);
        this.currentDataType=attributes.getValue(i);
      }
 else       if (checkRdfQName("parseType",qName)) {
        String value=attributes.getValue(i);
        if ("Literal".equals(value)) {
          this.consumeContent=true;
          popState();
          pushState(State.LITERAL);
          this.currentDataType=RdfConstants.RDF_SYNTAX + "XMLLiteral";
          nodeDepth=0;
        }
 else         if ("Resource".equals(value)) {
          this.consumeContent=false;
          currentObject=Link.createBlankRef(ContentReader.newBlankNodeId());
          popState();
          pushState(State.SUBJECT);
          pushSubject(currentObject);
        }
 else {
          this.consumeContent=false;
        }
      }
 else       if (checkRdfQName("nodeID",qName)) {
        this.consumeContent=false;
        currentObject=Link.createBlankRef(attributes.getValue(i));
        popState();
        pushState(State.SUBJECT);
        pushSubject(currentObject);
      }
 else       if (checkRdfQName("ID",qName)) {
        reifiedRef=resolve(attributes.getValue(i),true);
      }
 else       if ("xml:lang".equals(qName)) {
        this.language.add(Language.valueOf(attributes.getValue(i)));
      }
 else {
        if (!qName.startsWith("xmlns")) {
          String[] arc={qName,attributes.getValue(i)};
          arcs.add(arc);
        }
      }
    }
    if (currentObject != null) {
      link(currentSubject,this.currentPredicate,currentObject);
    }
    if (!arcs.isEmpty()) {
      boolean found=false;
      Reference blankNode=Link.createBlankRef(ContentReader.newBlankNodeId());
      for (      String[] arc : arcs) {
        Reference pRef=resolve(null,arc[0]);
        if (pRef != null) {
          found=true;
          this.graphHandler.link(blankNode,pRef,new Literal(arc[1]));
        }
      }
      if (found) {
        link(currentSubject,this.currentPredicate,blankNode);
        popState();
        pushState(State.OBJECT);
      }
    }
    if (this.consumeContent) {
      builder=new StringBuilder();
    }
  }
 else   if (state == State.PREDICATE) {
    this.consumeContent=false;
    Reference object=parseNode(uri,localName,name,attributes);
    this.currentObject=object;
    link();
    pushSubject(object);
    pushState(State.SUBJECT);
  }
 else   if (state == State.OBJECT) {
  }
 else   if (state == State.LITERAL) {
    nodeDepth++;
    this.builder.append("<");
    if (uri != null && !"".equals(uri)) {
      this.builder.append(uri).append(":");
    }
    this.builder.append(localName).append(">");
  }
}
