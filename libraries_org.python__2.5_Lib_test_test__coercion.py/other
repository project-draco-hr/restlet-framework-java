import copy
import sys
import warnings
import unittest
from test.test_support import run_unittest, TestFailed
candidates = [2, 2L, 4.0, (2 + 0j), [1], (2,), None, MethodNumber(2), CoerceNumber(2)]
infix_binops = ['+', '-', '*', '**', '%', '//', '/']
TE = TypeError
infix_results = {(0, 0): ('b', [4, 0, 4, 4, 0, 1, (1, 1.0)]), (0, 1): ('e', (0, 0)), (0, 2): ('b', [6.0, (-2.0), 8.0, 16.0, 2.0, 0.0, 0.5]), (0, 3): ('b', [(4 + 0j), (0 + 0j), (4 + 0j), (4 + 0j), (0 + 0j), (1 + 0j), (1 + 0j)]), (0, 4): ('b', [TE, TE, [1, 1], TE, TE, TE, TE]), (0, 5): ('b', [TE, TE, (2, 2), TE, TE, TE, TE]), (0, 6): ('b', [TE, TE, TE, TE, TE, TE, TE]), (0, 7): ('e', (0, 0)), (0, 8): ('e', (0, 0)), (1, 0): ('e', (0, 0)), (1, 1): ('e', (0, 1)), (1, 2): ('e', (0, 2)), (1, 3): ('e', (0, 3)), (1, 4): ('e', (0, 4)), (1, 5): ('e', (0, 5)), (1, 6): ('e', (0, 6)), (1, 7): ('e', (0, 7)), (1, 8): ('e', (0, 8)), (2, 0): ('b', [6.0, 2.0, 8.0, 16.0, 0.0, 2.0, 2.0]), (2, 1): ('e', (2, 0)), (2, 2): ('b', [8.0, 0.0, 16.0, 256.0, 0.0, 1.0, 1.0]), (2, 3): ('b', [(6 + 0j), (2 + 0j), (8 + 0j), (16 + 0j), (0 + 0j), (2 + 0j), (2 + 0j)]), (2, 4): ('b', [TE, TE, TE, TE, TE, TE, TE]), (2, 5): ('e', (2, 4)), (2, 6): ('e', (2, 4)), (2, 7): ('e', (2, 0)), (2, 8): ('e', (2, 0)), (3, 0): ('b', [(4 + 0j), (0 + 0j), (4 + 0j), (4 + 0j), (0 + 0j), (1 + 0j), (1 + 0j)]), (3, 1): ('e', (3, 0)), (3, 2): ('b', [(6 + 0j), ((-2) + 0j), (8 + 0j), (16 + 0j), (2 + 0j), (0 + 0j), (0.5 + 0j)]), (3, 3): ('b', [(4 + 0j), (0 + 0j), (4 + 0j), (4 + 0j), (0 + 0j), (1 + 0j), (1 + 0j)]), (3, 4): ('b', [TE, TE, TE, TE, TE, TE, TE]), (3, 5): ('e', (3, 4)), (3, 6): ('e', (3, 4)), (3, 7): ('e', (3, 0)), (3, 8): ('e', (3, 0)), (4, 0): ('b', [TE, TE, [1, 1], TE, TE, TE, TE]), (4, 1): ('e', (4, 0)), (4, 2): ('b', [TE, TE, TE, TE, TE, TE, TE]), (4, 3): ('b', [TE, TE, TE, TE, TE, TE, TE]), (4, 4): ('b', [[1, 1], TE, TE, TE, TE, TE, TE]), (4, 5): ('s', [TE, TE, TE, TE, TE, TE, TE], [[1, 2], TE, TE, TE, TE, TE, TE]), (4, 6): ('b', [TE, TE, TE, TE, TE, TE, TE]), (4, 7): ('e', (4, 0)), (4, 8): ('e', (4, 0)), (5, 0): ('b', [TE, TE, (2, 2), TE, TE, TE, TE]), (5, 1): ('e', (5, 0)), (5, 2): ('b', [TE, TE, TE, TE, TE, TE, TE]), (5, 3): ('e', (5, 2)), (5, 4): ('e', (5, 2)), (5, 5): ('b', [(2, 2), TE, TE, TE, TE, TE, TE]), (5, 6): ('b', [TE, TE, TE, TE, TE, TE, TE]), (5, 7): ('e', (5, 0)), (5, 8): ('e', (5, 0)), (6, 0): ('b', [TE, TE, TE, TE, TE, TE, TE]), (6, 1): ('e', (6, 0)), (6, 2): ('e', (6, 0)), (6, 3): ('e', (6, 0)), (6, 4): ('e', (6, 0)), (6, 5): ('e', (6, 0)), (6, 6): ('e', (6, 0)), (6, 7): ('e', (6, 0)), (6, 8): ('e', (6, 0)), (7, 0): ('e', (0, 0)), (7, 1): ('e', (0, 1)), (7, 2): ('e', (0, 2)), (7, 3): ('e', (0, 3)), (7, 4): ('e', (0, 4)), (7, 5): ('e', (0, 5)), (7, 6): ('e', (0, 6)), (7, 7): ('e', (0, 7)), (7, 8): ('e', (0, 8)), (8, 0): ('e', (0, 0)), (8, 1): ('e', (0, 1)), (8, 2): ('e', (0, 2)), (8, 3): ('e', (0, 3)), (8, 4): ('e', (0, 4)), (8, 5): ('e', (0, 5)), (8, 6): ('e', (0, 6)), (8, 7): ('e', (0, 7)), (8, 8): ('e', (0, 8)), }
process_infix_results()
prefix_binops = ['divmod']
prefix_results = [[(1, 0), (1L, 0L), (0.0, 2.0), ((1 + 0j), 0j), TE, TE, TE, TE, (1, 0)], [(1L, 0L), (1L, 0L), (0.0, 2.0), ((1 + 0j), 0j), TE, TE, TE, TE, (1L, 0L)], [(2.0, 0.0), (2.0, 0.0), (1.0, 0.0), ((2 + 0j), 0j), TE, TE, TE, TE, (2.0, 0.0)], [((1 + 0j), 0j), ((1 + 0j), 0j), (0j, (2 + 0j)), ((1 + 0j), 0j), TE, TE, TE, TE, ((1 + 0j), 0j)], [TE, TE, TE, TE, TE, TE, TE, TE, TE], [TE, TE, TE, TE, TE, TE, TE, TE, TE], [TE, TE, TE, TE, TE, TE, TE, TE, TE], [TE, TE, TE, TE, TE, TE, TE, TE, TE], [(1, 0), (1L, 0L), (0.0, 2.0), ((1 + 0j), 0j), TE, TE, TE, TE, (1, 0)]]
if (__name__ == '__main__'):
    test_main()
