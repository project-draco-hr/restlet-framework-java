def _run_examples_inner(out, fakeout, examples, globs, verbose, name, compileflags):
    import sys, traceback
    (OK, BOOM, FAIL) = range(3)
    NADA = 'nothing'
    stderr = _SpoofOut()
    failures = 0
    for (source, want, lineno) in examples:
        if verbose:
            _tag_out(out, ('Trying', source), ('Expecting', (want or NADA)))
        fakeout.clear()
        try:
            exec compile(source, '<string>', 'single', compileflags, 1) in globs
            got = fakeout.get()
            state = OK
        except:
            if ((want.find('Traceback (innermost last):\n') == 0) or (want.find('Traceback (most recent call last):\n') == 0)):
                want = (want.split('\n')[(-2)] + '\n')
                (exc_type, exc_val) = sys.exc_info()[:2]
                got = traceback.format_exception_only(exc_type, exc_val)[(-1)]
                state = OK
            else:
                stderr.clear()
                traceback.print_exc(file=stderr)
                state = BOOM
        if (state == OK):
            if (got == want):
                if verbose:
                    out('ok\n')
                continue
            state = FAIL
        assert (state in (FAIL, BOOM))
        failures = (failures + 1)
        out((('*' * 65) + '\n'))
        _tag_out(out, ('Failure in example', source))
        out((((('from line #' + `lineno`) + ' of ') + name) + '\n'))
        if (state == FAIL):
            _tag_out(out, ('Expected', (want or NADA)), ('Got', got))
        else:
            assert (state == BOOM)
            _tag_out(out, ('Exception raised', stderr.get()))
    return (failures, len(examples))
