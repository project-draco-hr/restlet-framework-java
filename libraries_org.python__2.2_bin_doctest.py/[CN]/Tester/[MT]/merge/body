def merge(self, other):
    '\n        other -> merge in test results from the other Tester instance.\n\n        If self and other both have a test result for something\n        with the same name, the (#failures, #tests) results are\n        summed, and a warning is printed to stdout.\n\n        >>> from doctest import Tester\n        >>> t1 = Tester(globs={}, verbose=0)\n        >>> t1.runstring(\'\'\'\n        ... >>> x = 12\n        ... >>> print x\n        ... 12\n        ... \'\'\', "t1example")\n        (0, 2)\n        >>>\n        >>> t2 = Tester(globs={}, verbose=0)\n        >>> t2.runstring(\'\'\'\n        ... >>> x = 13\n        ... >>> print x\n        ... 13\n        ... \'\'\', "t2example")\n        (0, 2)\n        >>> common = ">>> assert 1 + 2 == 3\\n"\n        >>> t1.runstring(common, "common")\n        (0, 1)\n        >>> t2.runstring(common, "common")\n        (0, 1)\n        >>> t1.merge(t2)\n        *** Tester.merge: \'common\' in both testers; summing outcomes.\n        >>> t1.summarize(1)\n        3 items passed all tests:\n           2 tests in common\n           2 tests in t1example\n           2 tests in t2example\n        6 tests in 3 items.\n        6 passed and 0 failed.\n        Test passed.\n        (0, 6)\n        >>>\n        '
    d = self.name2ft
    for (name, (f, t)) in other.name2ft.items():
        if d.has_key(name):
            print (("*** Tester.merge: '" + name) + "' in both testers; summing outcomes.")
            (f2, t2) = d[name]
            f = (f + f2)
            t = (t + t2)
        d[name] = (f, t)
