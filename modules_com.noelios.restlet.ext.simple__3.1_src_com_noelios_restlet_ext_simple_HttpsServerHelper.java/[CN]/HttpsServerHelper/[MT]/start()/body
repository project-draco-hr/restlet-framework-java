{
  final SslContextFactory sslContextFactory=getSslContextFactory();
  SSLContext sslContext;
  if (sslContextFactory == null) {
    KeyStore keyStore=KeyStore.getInstance(getKeystoreType());
    FileInputStream fis=getKeystorePath() == null ? null : new FileInputStream(getKeystorePath());
    char[] password=getKeystorePassword() == null ? null : getKeystorePassword().toCharArray();
    keyStore.load(fis,password);
    if (fis != null) {
      fis.close();
    }
    KeyManagerFactory keyManagerFactory=KeyManagerFactory.getInstance(getCertAlgorithm());
    keyManagerFactory.init(keyStore,getKeyPassword().toCharArray());
    TrustManagerFactory trustManagerFactory=TrustManagerFactory.getInstance(getCertAlgorithm());
    trustManagerFactory.init(keyStore);
    sslContext=SSLContext.getInstance(getSslProtocol());
    sslContext.init(keyManagerFactory.getKeyManagers(),trustManagerFactory.getTrustManagers(),null);
  }
 else {
    sslContext=sslContextFactory.createSslContext();
  }
  SSLServerSocket serverSocket=null;
  String addr=getHelped().getAddress();
  if (addr != null) {
    InetAddress iaddr=InetAddress.getByName(addr);
    serverSocket=(SSLServerSocket)sslContext.getServerSocketFactory().createServerSocket(getHelped().getPort(),50,iaddr);
  }
 else {
    serverSocket=(SSLServerSocket)sslContext.getServerSocketFactory().createServerSocket(getHelped().getPort());
  }
  if (isNeedClientAuthentication()) {
    serverSocket.setNeedClientAuth(true);
  }
 else   if (isWantClientAuthentication()) {
    serverSocket.setWantClientAuth(true);
  }
  serverSocket.setSoTimeout(60000);
  setSocket(serverSocket);
  setConfidential(true);
  setHandler(PipelineHandlerFactory.getInstance(new SimpleProtocolHandler(this),getDefaultThreads(),getMaxWaitTimeMs()));
  setConnection(ConnectionFactory.getConnection(getHandler(),new SimplePipelineFactory()));
  getConnection().connect(getSocket());
  super.start();
}
