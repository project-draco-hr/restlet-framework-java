def test_decompinc(self, flush=False, source=None, cx=256, dcx=64):
    source = (source or HAMLET_SCENE)
    data = (source * 128)
    co = zlib.compressobj()
    bufs = []
    for i in range(0, len(data), cx):
        bufs.append(co.compress(data[i:(i + cx)]))
    bufs.append(co.flush())
    combuf = ''.join(bufs)
    self.assertEqual(data, zlib.decompress(combuf))
    dco = zlib.decompressobj()
    bufs = []
    for i in range(0, len(combuf), dcx):
        bufs.append(dco.decompress(combuf[i:(i + dcx)]))
        self.assertEqual('', dco.unconsumed_tail, ("(A) uct should be '': not %d long" % len(dco.unconsumed_tail)))
    if flush:
        bufs.append(dco.flush())
    else:
        while True:
            chunk = dco.decompress('')
            if chunk:
                bufs.append(chunk)
            else:
                break
    self.assertEqual('', dco.unconsumed_tail, ("(B) uct should be '': not %d long" % len(dco.unconsumed_tail)))
    self.assertEqual(data, ''.join(bufs))
