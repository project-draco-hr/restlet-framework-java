{
  boolean result=true;
  if (host != null) {
    for (    final Route route : host.getRoutes()) {
      final Restlet next=route.getNext();
      if (next instanceof Application) {
        final Application application=(Application)next;
        for (        final Protocol clientProtocol : application.getConnectorService().getClientProtocols()) {
          boolean clientFound=false;
          Client client;
          for (final Iterator<Client> iter=getHelped().getClients().iterator(); !clientFound && iter.hasNext(); ) {
            client=iter.next();
            clientFound=client.getProtocols().contains(clientProtocol);
          }
          if (!clientFound) {
            getLogger().severe("Unable to start the application \"" + application.getName() + "\". Client connector for protocol "+ clientProtocol.getName()+ " is missing.");
            result=false;
          }
        }
        for (        final Protocol serverProtocol : application.getConnectorService().getServerProtocols()) {
          boolean serverFound=false;
          Server server;
          for (final Iterator<Server> iter=getHelped().getServers().iterator(); !serverFound && iter.hasNext(); ) {
            server=iter.next();
            serverFound=server.getProtocols().contains(serverProtocol);
          }
          if (!serverFound) {
            getLogger().severe("Unable to start the application \"" + application.getName() + "\". Server connector for protocol "+ serverProtocol.getName()+ " is missing.");
            result=false;
          }
        }
        if (result && application.isStopped()) {
          application.start();
        }
      }
    }
  }
  return result;
}
