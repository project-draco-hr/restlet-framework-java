import sys
sys.path = (['.'] + sys.path)
from test_support import verbose, TestFailed, have_unicode
import sre
import sys, os, string, traceback
if verbose:
    print 'Running tests on character literals'
for i in [0, 8, 16, 32, 64, 127, 128, 255]:
    test('sre.match(r"\\%03o" % i, chr(i)) is not None', 1)
    test('sre.match(r"\\%03o0" % i, chr(i)+"0") is not None', 1)
    test('sre.match(r"\\%03o8" % i, chr(i)+"8") is not None', 1)
    test('sre.match(r"\\x%02x" % i, chr(i)) is not None', 1)
    test('sre.match(r"\\x%02x0" % i, chr(i)+"0") is not None', 1)
    test('sre.match(r"\\x%02xz" % i, chr(i)+"z") is not None', 1)
test('sre.match("\\911", "")', None, sre.error)
if verbose:
    print 'Running tests on sre.search and sre.match'
test("sre.search(r'x*', 'axx').span(0)", (0, 0))
test("sre.search(r'x*', 'axx').span()", (0, 0))
test("sre.search(r'x+', 'axx').span(0)", (1, 3))
test("sre.search(r'x+', 'axx').span()", (1, 3))
test("sre.search(r'x', 'aaa')", None)
test("sre.match(r'a*', 'xxx').span(0)", (0, 0))
test("sre.match(r'a*', 'xxx').span()", (0, 0))
test("sre.match(r'x*', 'xxxa').span(0)", (0, 3))
test("sre.match(r'x*', 'xxxa').span()", (0, 3))
test("sre.match(r'a+', 'xxx')", None)
test("sre.match(r'(a)|(b)', 'b').start(1)", (-1))
test("sre.match(r'(a)|(b)', 'b').end(1)", (-1))
test("sre.match(r'(a)|(b)', 'b').span(1)", ((-1), (-1)))
pat = ((u'[' + sre.escape(u'\u2039')) + u']')
test('sre.compile(pat) and 1', 1, None)
if verbose:
    print 'Running tests on sre.sub'
test('sre.sub(r"(?i)b+", "x", "bbbb BBBB")', 'x x')
test("sre.sub(r'\\d+', bump_num, '08.2 -2 23x99y')", '9.3 -3 24x100y')
test("sre.sub(r'\\d+', bump_num, '08.2 -2 23x99y', 3)", '9.3 -3 23x99y')
test('sre.sub(r\'.\', lambda m: r"\\n", \'x\')', '\\n')
test('sre.sub(r\'.\', r"\\n", \'x\')', '\n')
s = '\\1\\1'
test("sre.sub(r'(.)', s, 'x')", 'xx')
test("sre.sub(r'(.)', sre.escape(s), 'x')", s)
test("sre.sub(r'(.)', lambda m: s, 'x')", s)
test("sre.sub(r'(?P<a>x)', '\\g<a>\\g<a>', 'xx')", 'xxxx')
test("sre.sub(r'(?P<a>x)', '\\g<a>\\g<1>', 'xx')", 'xxxx')
test("sre.sub(r'(?P<unk>x)', '\\g<unk>\\g<unk>', 'xx')", 'xxxx')
test("sre.sub(r'(?P<unk>x)', '\\g<1>\\g<1>', 'xx')", 'xxxx')
test("sre.sub(r'(?P<unk>x)', '\\g<1>\\g<1>\\\\b', 'xx')", 'xx\x08xx\x08')
test("sre.sub(r'a', r'\\t\\n\\v\\r\\f\\a\\b\\B\\Z\\a\\A\\w\\W\\s\\S\\d\\D', 'a')", '\t\n\x0b\r\x0c\x07\x08\\B\\Z\x07\\A\\w\\W\\s\\S\\d\\D')
test("sre.sub(r'a', '\\t\\n\\v\\r\\f\\a', 'a')", '\t\n\x0b\r\x0c\x07')
test("sre.sub(r'a', '\\t\\n\\v\\r\\f\\a', 'a')", (((((chr(9) + chr(10)) + chr(11)) + chr(13)) + chr(12)) + chr(7)))
test("sre.sub(r'^\\s*', 'X', 'test')", 'Xtest')
test("sre.sub(r'a', 'b', 'aaaaa')", 'bbbbb')
test("sre.sub(r'a', 'b', 'aaaaa', 1)", 'baaaa')
test("sre.sub(r'(\\S)\\s+(\\S)', r'\\1 \\2', 'hello  there')", 'hello there')
test("sre.sub(r'\\r\\n', r'\\n', 'abc\\r\\ndef\\r\\n')", 'abc\ndef\n')
test("sre.sub('\\r\\n', r'\\n', 'abc\\r\\ndef\\r\\n')", 'abc\ndef\n')
test("sre.sub(r'\\r\\n', '\\n', 'abc\\r\\ndef\\r\\n')", 'abc\ndef\n')
test("sre.sub('\\r\\n', '\\n', 'abc\\r\\ndef\\r\\n')", 'abc\ndef\n')
test("sre.sub('x*', '-', 'abxd')", '-a-b-d-')
test("sre.sub('x+', '-', 'abxd')", 'ab-d')
if verbose:
    print 'Running tests on symbolic references'
test("sre.sub(r'(?P<a>x)', '\\g<a', 'xx')", None, sre.error)
test("sre.sub(r'(?P<a>x)', '\\g<', 'xx')", None, sre.error)
test("sre.sub(r'(?P<a>x)', '\\g', 'xx')", None, sre.error)
test("sre.sub(r'(?P<a>x)', '\\g<a a>', 'xx')", None, sre.error)
test("sre.sub(r'(?P<a>x)', '\\g<1a1>', 'xx')", None, sre.error)
test("sre.sub(r'(?P<a>x)', '\\g<ab>', 'xx')", None, IndexError)
test("sre.sub(r'(?P<a>x)|(?P<b>y)', '\\g<b>', 'xx')", None, sre.error)
test("sre.sub(r'(?P<a>x)|(?P<b>y)', '\\\\2', 'xx')", None, sre.error)
if verbose:
    print 'Running tests on sre.subn'
test('sre.subn(r"(?i)b+", "x", "bbbb BBBB")', ('x x', 2))
test('sre.subn(r"b+", "x", "bbbb BBBB")', ('x BBBB', 1))
test('sre.subn(r"b+", "x", "xyz")', ('xyz', 0))
test('sre.subn(r"b*", "x", "xyz")', ('xxxyxzx', 4))
test('sre.subn(r"b*", "x", "xyz", 2)', ('xxxyz', 2))
if verbose:
    print 'Running tests on sre.split'
test('sre.split(r":", ":a:b::c")', ['', 'a', 'b', '', 'c'])
test('sre.split(r":+", ":a:b:::")', ['', 'a', 'b', ''])
test('sre.split(r":*", ":a:b::c")', ['', 'a', 'b', 'c'])
test('sre.split(r"(:*)", ":a:b::c")', ['', ':', 'a', ':', 'b', '::', 'c'])
test('sre.split(r"(?::*)", ":a:b::c")', ['', 'a', 'b', 'c'])
test('sre.split(r"(:)*", ":a:b::c")', ['', ':', 'a', ':', 'b', ':', 'c'])
test('sre.split(r"([b:]+)", ":a:b::c")', ['', ':', 'a', ':b::', 'c'])
test('sre.split(r"(b)|(:+)", ":a:b::c")', ['', None, ':', 'a', None, ':', '', 'b', None, '', None, '::', 'c'])
test('sre.split(r"(?:b)|(?::+)", ":a:b::c")', ['', 'a', '', '', 'c'])
test('sre.split(r":", ":a:b::c", 2)', ['', 'a', 'b::c'])
test("sre.split(r':', 'a:b:c:d', 2)", ['a', 'b', 'c:d'])
test('sre.split(r"(:)", ":a:b::c", 2)', ['', ':', 'a', ':', 'b::c'])
test('sre.split(r"(:*)", ":a:b::c", 2)', ['', ':', 'a', ':', 'b::c'])
if verbose:
    print 'Running tests on sre.findall'
test('sre.findall(r":+", "abc")', [])
test('sre.findall(r":+", "a:b::c:::d")', [':', '::', ':::'])
test('sre.findall(r"(:+)", "a:b::c:::d")', [':', '::', ':::'])
test('sre.findall(r"(:)(:*)", "a:b::c:::d")', [(':', ''), (':', ':'), (':', '::')])
test('sre.findall(r"(a)|(b)", "abc")', [('a', ''), ('', 'b')])
test('sre.findall(r"(a|(b))", "aba")', [('a', ''), ('b', 'b'), ('a', '')])
if (sys.hexversion >= 33685504):
    if verbose:
        print 'Running tests on sre.finditer'

    def fixup(seq):
        if ((not hasattr(seq, 'next')) or (not hasattr(seq, '__iter__'))):
            print 'finditer returned', type(seq)
        return map((lambda item: item.group(0)), seq)
    test('fixup(sre.finditer(r":+", "a:b::c:::d"))', [':', '::', ':::'])
if verbose:
    print 'Running tests on sre.match'
test("sre.match(r'a', 'a').groups()", ())
test("sre.match(r'(a)', 'a').groups()", ('a',))
test("sre.match(r'(a)', 'a').group(0)", 'a')
test("sre.match(r'(a)', 'a').group(1)", 'a')
test("sre.match(r'(a)', 'a').group(1, 1)", ('a', 'a'))
pat = sre.compile('((a)|(b))(c)?')
test("pat.match('a').groups()", ('a', 'a', None, None))
test("pat.match('b').groups()", ('b', None, 'b', None))
test("pat.match('ac').groups()", ('a', 'a', None, 'c'))
test("pat.match('bc').groups()", ('b', None, 'b', 'c'))
test('pat.match(\'bc\').groups("")', ('b', '', 'b', 'c'))
pat = sre.compile('(?:(?P<a1>a)|(?P<b2>b))(?P<c3>c)?')
test("pat.match('a').group(1, 2, 3)", ('a', None, None))
test("pat.match('b').group('a1', 'b2', 'c3')", (None, 'b', None))
test("pat.match('ac').group(1, 'b2', 3)", ('a', None, 'c'))
for op in ('', '?', '*'):
    test(("sre.match(r'((.%s):)?z', 'z').groups()" % op), (None, None))
    test(("sre.match(r'((.%s):)?z', 'a:z').groups()" % op), ('a:', 'a'))
if verbose:
    print 'Running tests on sre.escape'
p = ''
for i in range(0, 256):
    p = (p + chr(i))
    test('sre.match(sre.escape(chr(i)), chr(i)) is not None', 1)
    test('sre.match(sre.escape(chr(i)), chr(i)).span()', (0, 1))
pat = sre.compile(sre.escape(p))
test('pat.match(p) is not None', 1)
test('pat.match(p).span()', (0, 256))
if verbose:
    print 'Running tests on sre.Scanner'
scanner = sre.Scanner([('[a-zA-Z_]\\w*', s_ident), ('\\d+\\.\\d*', s_float), ('\\d+', s_int), ('=|\\+|-|\\*|/', s_operator), ('\\s+', None)])
test('scanner.scan("sum = 3*foo + 312.50 + bar")', (['sum', 'op=', 3, 'op*', 'foo', 'op+', 312.5, 'op+', 'bar'], ''))
if verbose:
    print 'Pickling a SRE_Pattern instance'
try:
    import pickle
    pat = sre.compile('a(?:b|(c|e){1,2}?|d)+?(.)')
    s = pickle.dumps(pat)
    pat = pickle.loads(s)
except:
    print TestFailed, 're module pickle'
try:
    import cPickle
    pat = sre.compile('a(?:b|(c|e){1,2}?|d)+?(.)')
    s = cPickle.dumps(pat)
    pat = cPickle.loads(s)
except:
    print TestFailed, 're module cPickle'
test('sre.I', sre.IGNORECASE)
test('sre.L', sre.LOCALE)
test('sre.M', sre.MULTILINE)
test('sre.S', sre.DOTALL)
test('sre.X', sre.VERBOSE)
test('sre.T', sre.TEMPLATE)
test('sre.U', sre.UNICODE)
for flags in [sre.I, sre.M, sre.X, sre.S, sre.L, sre.T, sre.U]:
    try:
        r = sre.compile('^pattern$', flags)
    except:
        print 'Exception raised on flag', flags
if verbose:
    print 'Test engine limitations'
test("sre.match('(x)*', 50000*'x').span()", (0, 50000), RuntimeError)
test("sre.match(r'(x)*y', 50000*'x'+'y').span()", (0, 50001), RuntimeError)
test("sre.match(r'(x)*?y', 50000*'x'+'y').span()", (0, 50001), RuntimeError)
from re_tests import *
if verbose:
    print 'Running re_tests test suite'
else:
    pass
for t in tests:
    sys.stdout.flush()
    pattern = s = outcome = repl = expected = None
    if (len(t) == 5):
        (pattern, s, outcome, repl, expected) = t
    elif (len(t) == 3):
        (pattern, s, outcome) = t
    else:
        raise ValueError, ('Test tuples should have 3 or 5 fields', t)
    try:
        obj = sre.compile(pattern)
    except sre.error:
        if (outcome == SYNTAX_ERROR):
            pass
        else:
            print '=== Syntax error:', t
    except KeyboardInterrupt:
        raise KeyboardInterrupt
    except:
        print '*** Unexpected error ***', t
        if verbose:
            traceback.print_exc(file=sys.stdout)
    else:
        try:
            result = obj.search(s)
        except sre.error as msg:
            print '=== Unexpected exception', t, repr(msg)
        if (outcome == SYNTAX_ERROR):
            print '=== Compiled incorrectly', t
        elif (outcome == FAIL):
            if (result is None):
                pass
            else:
                print '=== Succeeded incorrectly', t
        elif (outcome == SUCCEED):
            if (result is not None):
                (start, end) = result.span(0)
                vardict = {'found': result.group(0), 'groups': result.group(), 'flags': result.re.flags, }
                for i in range(1, 100):
                    try:
                        gi = result.group(i)
                        if (gi is None):
                            gi = 'None'
                    except IndexError:
                        gi = 'Error'
                    vardict[('g%d' % i)] = gi
                for i in result.re.groupindex.keys():
                    try:
                        gi = result.group(i)
                        if (gi is None):
                            gi = 'None'
                    except IndexError:
                        gi = 'Error'
                    vardict[i] = gi
                repl = eval(repl, vardict)
                if (repl != expected):
                    print '=== grouping error', t,
                    print ((repr(repl) + ' should be ') + repr(expected))
            else:
                print '=== Failed incorrectly', t
                continue
            try:
                u = unicode(s, 'latin-1')
            except NameError:
                pass
            except TypeError:
                continue
            else:
                result = obj.search(u)
                if (result == None):
                    print '=== Fails on unicode match', t
            try:
                u = unicode(pattern, 'latin-1')
            except NameError:
                pass
            else:
                obj = sre.compile(u)
                result = obj.search(s)
                if (result == None):
                    print '=== Fails on unicode pattern match', t
            if ((pattern[:2] != '\\B') and (pattern[(-2):] != '\\B')):
                obj = sre.compile(pattern)
                result = obj.search(s, result.start(0), (result.end(0) + 1))
                if (result == None):
                    print '=== Failed on range-limited match', t
            obj = sre.compile(pattern, sre.IGNORECASE)
            result = obj.search(s)
            if (result == None):
                print '=== Fails on case-insensitive match', t
            obj = sre.compile(pattern, sre.LOCALE)
            result = obj.search(s)
            if (result == None):
                print '=== Fails on locale-sensitive match', t
            if have_unicode:
                obj = sre.compile(pattern, sre.UNICODE)
                result = obj.search(s)
                if (result == None):
                    print '=== Fails on unicode-sensitive match', t
