def encode(input, output, quotetabs, header=0):
    "Read 'input', apply quoted-printable encoding, and write to 'output'.\n\n    'input' and 'output' are files with readline() and write() methods.\n    The 'quotetabs' flag indicates whether embedded tabs and spaces should be\n    quoted.  Note that line-ending tabs and spaces are always encoded, as per\n    RFC 1521.\n    The 'header' flag indicates whether we are encoding spaces as _ as per\n    RFC 1522.\n    "
    if (b2a_qp is not None):
        data = input.read()
        odata = b2a_qp(data, quotetabs=quotetabs, header=header)
        output.write(odata)
        return

    def write(s, output=output, lineEnd='\n'):
        if (s and (s[(-1):] in ' \t')):
            output.write(((s[:(-1)] + quote(s[(-1)])) + lineEnd))
        elif (s == '.'):
            output.write((quote(s) + lineEnd))
        else:
            output.write((s + lineEnd))
    prevline = None
    while 1:
        line = input.readline()
        if (not line):
            break
        outline = []
        stripped = ''
        if (line[(-1):] == '\n'):
            line = line[:(-1)]
            stripped = '\n'
        for c in line:
            if needsquoting(c, quotetabs, header):
                c = quote(c)
            if (header and (c == ' ')):
                outline.append('_')
            else:
                outline.append(c)
        if (prevline is not None):
            write(prevline)
        thisline = EMPTYSTRING.join(outline)
        while (len(thisline) > MAXLINESIZE):
            write(thisline[:(MAXLINESIZE - 1)], lineEnd='=\n')
            thisline = thisline[(MAXLINESIZE - 1):]
        prevline = thisline
    if (prevline is not None):
        write(prevline, lineEnd=stripped)
