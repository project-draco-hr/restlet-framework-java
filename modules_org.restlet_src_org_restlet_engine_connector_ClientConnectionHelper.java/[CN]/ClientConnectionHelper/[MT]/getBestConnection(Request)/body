{
  Connection<Client> result=null;
  int hostConnectionCount=0;
  int bestScore=0;
  boolean foundConn=false;
  InetSocketAddress socketAddress=getSocketAddress(request);
  if (socketAddress == null) {
    getLogger().log(Level.WARNING,"Unable to create a socket address related to the request.");
  }
 else {
    for (Iterator<Connection<Client>> iterator=getConnections().iterator(); !foundConn && iterator.hasNext(); ) {
      Connection<Client> currConn=iterator.next();
      if (socketAddress.equals(currConn.getSocketAddress())) {
        if (currConn.isReady()) {
          result=currConn;
          foundConn=true;
        }
 else {
          int currScore=currConn.getLoadScore();
          if (bestScore > currScore) {
            bestScore=currScore;
            result=currConn;
          }
          hostConnectionCount++;
        }
      }
    }
    if (foundConn) {
      getLogger().log(Level.FINE,"Reusing an existing client connection to: " + socketAddress);
    }
 else     if ((getMaxTotalConnections() != -1) && (getConnections().size() >= getMaxTotalConnections())) {
      getLogger().log(Level.WARNING,"Unable to create a new connection. Maximum total number of connections reached!");
    }
 else     if ((getMaxConnectionsPerHost() != -1) && (hostConnectionCount >= getMaxConnectionsPerHost())) {
      getLogger().log(Level.WARNING,"Unable to create a new connection. Maximum number of connections reached for host: " + socketAddress);
    }
 else {
      if (getLogger().isLoggable(Level.FINE)) {
        getLogger().log(Level.FINE,"Creating a new client connection to: " + socketAddress);
      }
      result=checkout(createSocketChannel(request.isConfidential(),socketAddress),getController(),socketAddress);
      getConnections().add(result);
    }
  }
  return result;
}
