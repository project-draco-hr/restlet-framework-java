{
  Logger l=Context.getCurrentLogger();
  try {
    ParameterList response=new ParameterList(params.getValuesMap());
    l.fine("response = " + response);
    String openidDisc=request.getCookies().getFirstValue(OpenIdConsumer.DESCRIPTOR_COOKIE);
    l.fine("openIdDiscServer - " + resp.getCookieSettings().getFirstValue("DESCRIPTOR_COOKIE"));
    l.fine("openIdDiscServerLength -" + resp.getCookieSettings().size());
    l.fine("openIdDiscClient - " + openidDisc);
    l.fine("openIdDiscClientLength -" + request.getCookies().size());
    if (resp.getCookieSettings().size() > 0) {
      for (      CookieSetting setting : resp.getCookieSettings()) {
        l.fine("CookieSetting: " + setting.getName() + setting.getValue());
      }
    }
    if (request.getCookies().size() > 0) {
      for (      Cookie setting : request.getCookies()) {
        l.fine("Cookie: " + setting.getName() + setting.getValue());
      }
    }
    DiscoveryInformation discovered=(DiscoveryInformation)session.get(openidDisc);
    l.fine("discovered = " + discovered);
    l.fine("getOriginalRef = " + request.getOriginalRef());
    ConsumerManager manager=getManager(discovered.getOPEndpoint().toString());
    String redir=request.getResourceRef().getHostIdentifier() + request.getResourceRef().getPath() + "?return=true";
    VerificationResult verification=manager.verify(redir,response,discovered);
    Identifier verified=verification.getVerifiedId();
    l.fine("verified = " + verified);
    if (verified != null) {
      AuthSuccess authSuccess=(AuthSuccess)verification.getAuthResponse();
      if (authSuccess.hasExtension(AxMessage.OPENID_NS_AX)) {
        FetchResponse fetchResp=(FetchResponse)authSuccess.getExtension(AxMessage.OPENID_NS_AX);
        MessageExtension ext=authSuccess.getExtension(AxMessage.OPENID_NS_AX);
        if (ext instanceof FetchResponse) {
          List<String> aliases=fetchResp.getAttributeAliases();
          for (          String alias : aliases) {
            String value=fetchResp.getAttributeValue(alias);
            axResp.put(AX.valueOf(alias),value);
          }
        }
      }
      return verified;
    }
  }
 catch (  OpenIDException e) {
    l.log(Level.WARNING,"could not verify response",e);
  }
  return null;
}
