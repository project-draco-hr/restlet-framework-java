{
  Representation result=null;
  long contentLength=Representation.UNKNOWN_SIZE;
  Series<Parameter> responseHeaders=getResponseHeaders();
  for (  Parameter header : responseHeaders) {
    if (header.getName().equalsIgnoreCase(HttpConstants.HEADER_CONTENT_LENGTH)) {
      try {
        contentLength=Long.parseLong(header.getValue());
      }
 catch (      NumberFormatException e) {
        contentLength=Representation.UNKNOWN_SIZE;
      }
    }
  }
  InputStream stream=getResponseEntityStream(contentLength);
  ReadableByteChannel channel=getResponseEntityChannel(contentLength);
  if (stream != null) {
    result=new InputRepresentation(stream,null);
  }
 else   if (channel != null) {
    result=new ReadableRepresentation(channel,null);
  }
 else   if (getMethod().equals(Method.HEAD.getName())) {
    result=new Representation(){
      @Override public ReadableByteChannel getChannel() throws IOException {
        return null;
      }
      @Override public Reader getReader() throws IOException {
        return null;
      }
      @Override public InputStream getStream() throws IOException {
        return null;
      }
      @Override public void write(      OutputStream outputStream) throws IOException {
      }
      @Override public void write(      WritableByteChannel writableChannel) throws IOException {
      }
      @Override public void write(      Writer writer) throws IOException {
      }
    }
;
  }
  if (result != null)   copyResponseEntityHeaders(responseHeaders,result);
  return result;
}
