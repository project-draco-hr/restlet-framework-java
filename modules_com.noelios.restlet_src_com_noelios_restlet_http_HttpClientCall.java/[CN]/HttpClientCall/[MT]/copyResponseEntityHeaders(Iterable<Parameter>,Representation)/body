{
  for (  Parameter header : responseHeaders) {
    if (header.getName().equalsIgnoreCase(HttpConstants.HEADER_CONTENT_TYPE)) {
      ContentType contentType=new ContentType(header.getValue());
      result.setMediaType(contentType.getMediaType());
      result.setCharacterSet(contentType.getCharacterSet());
    }
 else     if (header.getName().equalsIgnoreCase(HttpConstants.HEADER_CONTENT_LENGTH)) {
      result.setSize(Long.parseLong(header.getValue()));
    }
 else     if (header.getName().equalsIgnoreCase(HttpConstants.HEADER_EXPIRES)) {
      result.setExpirationDate(parseDate(header.getValue(),false));
    }
 else     if (header.getName().equalsIgnoreCase(HttpConstants.HEADER_CONTENT_ENCODING)) {
      HeaderReader hr=new HeaderReader(header.getValue());
      String value=hr.readValue();
      while (value != null) {
        Encoding encoding=new Encoding(value);
        if (!encoding.equals(Encoding.IDENTITY)) {
          result.getEncodings().add(encoding);
        }
        value=hr.readValue();
      }
    }
 else     if (header.getName().equalsIgnoreCase(HttpConstants.HEADER_CONTENT_LANGUAGE)) {
      HeaderReader hr=new HeaderReader(header.getValue());
      String value=hr.readValue();
      while (value != null) {
        result.getLanguages().add(new Language(value));
        value=hr.readValue();
      }
    }
 else     if (header.getName().equalsIgnoreCase(HttpConstants.HEADER_LAST_MODIFIED)) {
      result.setModificationDate(parseDate(header.getValue(),false));
    }
 else     if (header.getName().equalsIgnoreCase(HttpConstants.HEADER_ETAG)) {
      result.setTag(Tag.parse(header.getValue()));
    }
 else     if (header.getName().equalsIgnoreCase(HttpConstants.HEADER_CONTENT_LOCATION)) {
      result.setIdentifier(header.getValue());
    }
 else     if (header.getName().equalsIgnoreCase(HttpConstants.HEADER_CONTENT_DISPOSITION)) {
      result.setDownloadName(parseContentDisposition(header.getValue()));
    }
  }
}
