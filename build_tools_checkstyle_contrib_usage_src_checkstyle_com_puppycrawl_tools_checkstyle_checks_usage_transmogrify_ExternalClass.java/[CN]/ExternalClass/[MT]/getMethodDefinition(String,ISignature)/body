{
  IMethod result=null;
  if (name.equals(getName())) {
    result=getConstructorDefinition(signature);
  }
 else {
    Method[] methods=_javaClass.getDeclaredMethods();
    for (int i=0; i < methods.length; i++) {
      if (name.equals(methods[i].getName())) {
        IMethod method=new ExternalMethod(methods[i]);
        if (method.hasSameSignature(signature)) {
          result=method;
          break;
        }
      }
    }
    if (result == null) {
      result=getMostCompatibleMethod(name,signature);
    }
    if (result == null) {
      if (getSuperclass() != null) {
        result=getSuperclass().getMethodDefinition(name,signature);
      }
    }
    if (result == null) {
      IClass[] interfaces=getInterfaces();
      for (int i=0; i < interfaces.length; i++) {
        result=interfaces[i].getMethodDefinition(name,signature);
        if (result != null) {
          break;
        }
      }
    }
  }
  return result;
}
