{
  Representation output=null;
  boolean found=false;
  final Iterator<Preference<MediaType>> iterator=request.getClientInfo().getAcceptedMediaTypes().iterator();
  while (iterator.hasNext() && !found) {
    final Preference<MediaType> pref=iterator.next();
    found=pref.getMetadata().equals(MediaType.TEXT_URI_LIST);
  }
  if (found) {
    final String baseName=localFile.getBaseName(metadataService);
    LocalFile parent=localFile.getParent();
    if (parent != null) {
      final Collection<LocalFile> files=parent.getFiles();
      if (files != null) {
        final ReferenceList rl=new ReferenceList(files.size());
        final String scheme=request.getResourceRef().getScheme();
        final String encodedParentDirectoryURI=path.substring(0,path.lastIndexOf("/"));
        final String encodedFileName=path.substring(path.lastIndexOf("/") + 1);
        for (        final LocalFile entry : files) {
          if (baseName.equals(entry.getBaseName(metadataService))) {
            rl.add(createReference(encodedParentDirectoryURI,encodedFileName,entry.getName(),scheme));
          }
        }
        output=rl.getTextRepresentation();
      }
    }
  }
 else {
    if (localFile.exists()) {
      if (localFile.isDirectory()) {
        final Collection<LocalFile> files=localFile.getFiles();
        final ReferenceList rl=new ReferenceList(files.size());
        String directoryUri=request.getResourceRef().toString();
        if (!directoryUri.endsWith("/")) {
          directoryUri+="/";
        }
        for (        final LocalFile entry : files) {
          rl.add(directoryUri + Reference.encode(entry.getName()));
        }
        output=rl.getTextRepresentation();
      }
 else {
        output=localFile.getRepresentation(metadataService.getDefaultMediaType(),getTimeToLive());
        output.setIdentifier(request.getResourceRef());
        updateMetadata(metadataService,localFile.getName(),output);
      }
    }
 else {
      final String baseName=localFile.getBaseName(metadataService);
      final Collection<String> extensions=localFile.getExtensions(metadataService);
      final Collection<LocalFile> files=localFile.getFiles();
      LocalFile uniqueVariant=null;
      if (files != null) {
        for (        final LocalFile entry : files) {
          if (baseName.equals(entry.getBaseName(metadataService))) {
            final Collection<String> entryExtensions=entry.getExtensions(metadataService);
            if (entryExtensions.containsAll(extensions) && extensions.containsAll(entryExtensions)) {
              uniqueVariant=entry;
              break;
            }
          }
        }
      }
      if (uniqueVariant != null) {
        output=uniqueVariant.getRepresentation(metadataService.getDefaultMediaType(),getTimeToLive());
        output.setIdentifier(request.getResourceRef());
        updateMetadata(metadataService,localFile.getName(),output);
      }
    }
  }
  if (output == null) {
    response.setStatus(Status.CLIENT_ERROR_NOT_FOUND);
  }
 else {
    output.setIdentifier(request.getResourceRef());
    response.setEntity(output);
    response.setStatus(Status.SUCCESS_OK);
  }
}
