{
  assertNull(client.getToken());
  ClientResource cr=new ClientResource(getProt() + "://localhost:" + serverPort+ "/client/webclient");
  cr.setNext(this.reqClient);
  ChallengeResponse chresp=new ChallengeResponse(ChallengeScheme.HTTP_BASIC,"bob","alice");
  cr.setChallengeResponse(chresp);
  Representation r=cr.get();
  String text=r.getText();
  assertTrue(text.startsWith("TestSuccessful"));
  assertEquals("Response content type test",r.getMediaType(),MediaType.TEXT_HTML);
  assertNotNull(client.getToken());
  cr.release();
  Reference ref=new Reference(getProt() + "://localhost:" + serverPort+ "/server/protected");
  cr=new ClientResource(ref);
  cr.setNext(this.reqClient);
  ChallengeResponse challengeResponse=new ChallengeResponse(ChallengeScheme.HTTP_OAUTH);
  challengeResponse.setRawValue(client.getToken());
  cr.setChallengeResponse(challengeResponse);
  r=cr.get();
  assertNotNull(r);
  text=r.getText();
  assertTrue(text.startsWith("TestSuccessful"));
  assertEquals("Response content type test",r.getMediaType(),MediaType.TEXT_HTML);
  cr.release();
  ref=new Reference(getProt() + "://localhost:" + serverPort+ "/server/protected");
  cr=new ClientResource(ref);
  cr.setNext(this.reqClient);
  cr.release();
  ref=new Reference(getProt() + "://localhost:" + serverPort+ "/server/protected");
  ref.addQueryParameter("oauth_token",client.getToken());
  cr=new ClientResource(ref);
  cr.setNext(this.reqClient);
  r=cr.get();
  assertNotNull(r);
  text=r.getText();
  assertTrue(text.startsWith("TestSuccessful"));
  assertEquals("Response content type test",r.getMediaType(),MediaType.TEXT_HTML);
  cr.release();
}
