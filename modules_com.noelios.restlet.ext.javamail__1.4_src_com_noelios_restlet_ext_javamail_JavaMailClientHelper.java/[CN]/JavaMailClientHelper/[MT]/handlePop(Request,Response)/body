{
  String popHost=request.getResourceRef().getHostDomain();
  int popPort=request.getResourceRef().getHostPort();
  if (popPort == -1) {
    popPort=request.getProtocol().getDefaultPort();
  }
  if ((popHost == null) || (popHost.equals(""))) {
    throw new IllegalArgumentException("Invalid POP host specified");
  }
  boolean authenticate=((getLogin(request) != null) && (getPassword(request) != null));
  boolean apop=authenticate && (ChallengeScheme.POP_DIGEST.equals(request.getChallengeResponse().getScheme()));
  String transport=null;
  if (Protocol.POP.equals(request.getProtocol())) {
    transport="pop3";
  }
 else   if (Protocol.POPS.equals(request.getProtocol())) {
    transport="pop3s";
  }
  Properties props=System.getProperties();
  props.put("mail." + transport + ".host",popHost);
  props.put("mail." + transport + ".port",Integer.toString(popPort));
  props.put("mail." + transport + ".apop.enable",Boolean.toString(apop));
  Session session=Session.getDefaultInstance(props);
  session.setDebug(isDebug());
  Store store=session.getStore(transport);
  store.connect(getLogin(request),getPassword(request));
  POP3Folder inbox=(POP3Folder)store.getFolder("INBOX");
  inbox.open(Folder.READ_WRITE);
  FetchProfile profile=new FetchProfile();
  profile.add(UIDFolder.FetchProfileItem.UID);
  Message[] messages=inbox.getMessages();
  inbox.fetch(messages,profile);
  for (int i=0; i < messages.length; i++) {
    String uid=inbox.getUID(messages[i]);
    System.out.println("UID: " + uid);
  }
}
