{
  String popHost=request.getResourceRef().getHostDomain();
  int popPort=request.getResourceRef().getHostPort();
  String path=request.getResourceRef().getPath();
  if (popPort == -1) {
    popPort=request.getProtocol().getDefaultPort();
  }
  if ((popHost == null) || (popHost.equals(""))) {
    throw new IllegalArgumentException("Invalid POP host specified");
  }
  boolean authenticate=((getLogin(request) != null) && (getPassword(request) != null));
  boolean apop=authenticate && (ChallengeScheme.POP_DIGEST.equals(request.getChallengeResponse().getScheme()));
  String transport=null;
  if (Protocol.POP.equals(request.getProtocol())) {
    transport="pop3";
  }
 else   if (Protocol.POPS.equals(request.getProtocol())) {
    transport="pop3s";
  }
  Properties props=System.getProperties();
  props.put("mail." + transport + ".host",popHost);
  props.put("mail." + transport + ".port",Integer.toString(popPort));
  props.put("mail." + transport + ".apop.enable",Boolean.toString(apop));
  Session session=Session.getDefaultInstance(props);
  session.setDebug(isDebug());
  Store store=session.getStore(transport);
  store.connect(getLogin(request),getPassword(request));
  POP3Folder inbox=(POP3Folder)store.getFolder("INBOX");
  inbox.open(Folder.READ_WRITE);
  FetchProfile profile=new FetchProfile();
  profile.add(UIDFolder.FetchProfileItem.UID);
  Message[] messages=inbox.getMessages();
  inbox.fetch(messages,profile);
  if ((path == null) || path.equals("") || path.equals("/")) {
    DomRepresentation result=new DomRepresentation(MediaType.APPLICATION_XML);
    Document dom=result.getDocument();
    Element emails=dom.createElement("emails");
    dom.appendChild(emails);
    Element email;
    for (int i=0; i < messages.length; i++) {
      String uid=inbox.getUID(messages[i]);
      email=dom.createElement("email");
      email.setAttribute("href","/" + uid);
      emails.appendChild(email);
    }
    response.setEntity(result);
  }
 else   if (path.startsWith("/")) {
    String mailUid=path.substring(1);
    Message message=null;
    for (int i=0; (message == null) && (i < messages.length); i++) {
      String uid=inbox.getUID(messages[i]);
      if (mailUid.equals(uid)) {
        message=messages[i];
      }
    }
    if (message == null) {
      response.setStatus(Status.CLIENT_ERROR_NOT_FOUND,"No message matches the given UID: " + mailUid);
    }
 else {
      DomRepresentation result=new DomRepresentation(MediaType.APPLICATION_XML);
      Document dom=result.getDocument();
      Element email=dom.createElement("email");
      dom.appendChild(email);
      Element head=dom.createElement("head");
      email.appendChild(head);
      if (message.getSubject() != null) {
        Element subject=dom.createElement("subject");
        subject.setTextContent(message.getSubject());
        head.appendChild(subject);
      }
      Address[] froms=message.getFrom();
      if (froms != null) {
        for (        Address fromAddress : froms) {
          Element from=dom.createElement("from");
          from.setTextContent(fromAddress.toString());
          head.appendChild(from);
        }
      }
      Address[] tos=message.getRecipients(Message.RecipientType.TO);
      if (tos != null) {
        for (        Address toAddress : tos) {
          Element to=dom.createElement("to");
          to.setTextContent(toAddress.toString());
          head.appendChild(to);
        }
      }
      Address[] ccs=message.getRecipients(Message.RecipientType.CC);
      if (ccs != null) {
        for (        Address ccAddress : ccs) {
          Element cc=dom.createElement("cc");
          cc.setTextContent(ccAddress.toString());
          head.appendChild(cc);
        }
      }
      Address[] bccs=message.getRecipients(Message.RecipientType.BCC);
      if (bccs != null) {
        for (        Address bccAddress : bccs) {
          Element bcc=dom.createElement("bcc");
          bcc.setTextContent(bccAddress.toString());
          head.appendChild(bcc);
        }
      }
      if (message.getReceivedDate() != null) {
        Element received=dom.createElement("received");
        received.setTextContent(DateUtils.format(message.getReceivedDate(),DateUtils.FORMAT_RFC_1123.get(0)));
        head.appendChild(received);
      }
      if (message.getSentDate() != null) {
        Element sent=dom.createElement("sent");
        sent.setTextContent(DateUtils.format(message.getSentDate(),DateUtils.FORMAT_RFC_1123.get(0)));
        head.appendChild(sent);
      }
      if (message.getContentType() != null) {
        MediaType contentType=MediaType.valueOf(message.getContentType());
        if (MediaType.TEXT_PLAIN.equals(contentType)) {
          Representation content=new InputRepresentation(message.getInputStream(),contentType);
          Element body=dom.createElement("body");
          email.appendChild(head);
          CDATASection bodyContent=dom.createCDATASection(content.getText());
          body.appendChild(bodyContent);
        }
      }
      response.setEntity(result);
    }
  }
}
