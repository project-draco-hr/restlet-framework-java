{
  CallableStatement preparedstatement=null;
  if (this.conn == null) {
    this.conn=getConnection();
  }
  try {
    int endPoint=1;
    preparedstatement=this.conn.prepareCall("{ call dbms_xdb.getListenerEndPoint(1,?,?,?) }");
    preparedstatement.registerOutParameter(1,Types.VARCHAR);
    preparedstatement.registerOutParameter(2,Types.INTEGER);
    preparedstatement.registerOutParameter(3,Types.INTEGER);
    preparedstatement.execute();
    this.localAddress=preparedstatement.getString(1);
    this.localPort=preparedstatement.getInt(2);
    endPoint=preparedstatement.getInt(3);
    log("[Noelios Restlet Engine] - The ServerServlet address = " + this.localAddress);
    log("[Noelios Restlet Engine] - The ServerServlet port = " + this.localPort);
    log("[Noelios Restlet Engine] - The ServerServlet endpoint = " + endPoint);
  }
 catch (  SQLException e) {
    log(e.getLocalizedMessage(),e);
  }
 finally {
    closeDbResources(preparedstatement,null);
  }
  try {
    if (this.remoteDebugging) {
      preparedstatement=this.conn.prepareCall("{ call dbms_debug_jdwp.connect_tcp(?,?) }");
      preparedstatement.setString(1,"localhost");
      preparedstatement.setInt(2,4000);
      preparedstatement.execute();
    }
  }
 catch (  SQLException e) {
    log(e.getLocalizedMessage(),e);
  }
 finally {
    closeDbResources(preparedstatement,null);
  }
  try {
    if ((getApplication() != null) && (getApplication().isStopped())) {
      try {
        getApplication().start();
      }
 catch (      Exception e) {
        log("Error during the starting of the Restlet Application",e);
      }
    }
  }
 catch (  AccessControlException ace) {
    log("Error loading Restlet Application",ace);
    throw new ServletException("Error loading Restlet application",ace);
  }
}
