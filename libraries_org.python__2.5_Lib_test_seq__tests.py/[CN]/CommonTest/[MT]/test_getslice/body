def test_getslice(self):
    l = [0, 1, 2, 3, 4]
    u = self.type2test(l)
    self.assertEqual(u[0:0], self.type2test())
    self.assertEqual(u[1:2], self.type2test([1]))
    self.assertEqual(u[(-2):(-1)], self.type2test([3]))
    self.assertEqual(u[(-1000):1000], u)
    self.assertEqual(u[1000:(-1000)], self.type2test([]))
    self.assertEqual(u[:], u)
    self.assertEqual(u[1:None], self.type2test([1, 2, 3, 4]))
    self.assertEqual(u[None:3], self.type2test([0, 1, 2]))
    self.assertEqual(u[::], u)
    self.assertEqual(u[::2], self.type2test([0, 2, 4]))
    self.assertEqual(u[1::2], self.type2test([1, 3]))
    self.assertEqual(u[::(-1)], self.type2test([4, 3, 2, 1, 0]))
    self.assertEqual(u[::(-2)], self.type2test([4, 2, 0]))
    self.assertEqual(u[3::(-2)], self.type2test([3, 1]))
    self.assertEqual(u[3:3:(-2)], self.type2test([]))
    self.assertEqual(u[3:2:(-2)], self.type2test([3]))
    self.assertEqual(u[3:1:(-2)], self.type2test([3]))
    self.assertEqual(u[3:0:(-2)], self.type2test([3, 1]))
    self.assertEqual(u[::(-100)], self.type2test([4]))
    self.assertEqual(u[100:(-100):], self.type2test([]))
    self.assertEqual(u[(-100):100:], u)
    self.assertEqual(u[100:(-100):(-1)], u[::(-1)])
    self.assertEqual(u[(-100):100:(-1)], self.type2test([]))
    self.assertEqual(u[(-100L):100L:2L], self.type2test([0, 2, 4]))
    a = self.type2test([0, 1, 2, 3, 4])
    self.assertEqual(a[(- pow(2, 128L)):3], self.type2test([0, 1, 2]))
    self.assertEqual(a[3:pow(2, 145L)], self.type2test([3, 4]))
    self.assertRaises(TypeError, u.__getslice__)
