def test_constructors(self):
    l0 = []
    l1 = [0]
    l2 = [0, 1]
    u = self.type2test()
    u0 = self.type2test(l0)
    u1 = self.type2test(l1)
    u2 = self.type2test(l2)
    uu = self.type2test(u)
    uu0 = self.type2test(u0)
    uu1 = self.type2test(u1)
    uu2 = self.type2test(u2)
    v = self.type2test(tuple(u))


    class OtherSeq:

        def __init__(self, initseq):
            self.__data = initseq

        def __len__(self):
            return len(self.__data)

        def __getitem__(self, i):
            return self.__data[i]
    s = OtherSeq(u0)
    v0 = self.type2test(s)
    self.assertEqual(len(v0), len(s))
    s = 'this is also a sequence'
    vv = self.type2test(s)
    self.assertEqual(len(vv), len(s))
    for s in ('123', '', range(1000), ('do', 1.2), xrange(2000, 2200, 5)):
        for g in (Sequence, IterFunc, IterGen, itermulti, iterfunc):
            self.assertEqual(self.type2test(g(s)), self.type2test(s))
        self.assertEqual(self.type2test(IterFuncStop(s)), self.type2test())
        self.assertEqual(self.type2test((c for c in '123')), self.type2test('123'))
        self.assertRaises(TypeError, self.type2test, IterNextOnly(s))
        self.assertRaises(TypeError, self.type2test, IterNoNext(s))
        self.assertRaises(ZeroDivisionError, self.type2test, IterGenExc(s))
