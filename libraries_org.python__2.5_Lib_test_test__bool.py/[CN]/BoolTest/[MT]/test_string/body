def test_string(self):
    self.assertIs('xyz'.endswith('z'), True)
    self.assertIs('xyz'.endswith('x'), False)
    self.assertIs('xyz0123'.isalnum(), True)
    self.assertIs('@#$%'.isalnum(), False)
    self.assertIs('xyz'.isalpha(), True)
    self.assertIs('@#$%'.isalpha(), False)
    self.assertIs('0123'.isdigit(), True)
    self.assertIs('xyz'.isdigit(), False)
    self.assertIs('xyz'.islower(), True)
    self.assertIs('XYZ'.islower(), False)
    self.assertIs(' '.isspace(), True)
    self.assertIs('XYZ'.isspace(), False)
    self.assertIs('X'.istitle(), True)
    self.assertIs('x'.istitle(), False)
    self.assertIs('XYZ'.isupper(), True)
    self.assertIs('xyz'.isupper(), False)
    self.assertIs('xyz'.startswith('x'), True)
    self.assertIs('xyz'.startswith('z'), False)
    if test_support.have_unicode:
        self.assertIs(unicode('xyz', 'ascii').endswith(unicode('z', 'ascii')), True)
        self.assertIs(unicode('xyz', 'ascii').endswith(unicode('x', 'ascii')), False)
        self.assertIs(unicode('xyz0123', 'ascii').isalnum(), True)
        self.assertIs(unicode('@#$%', 'ascii').isalnum(), False)
        self.assertIs(unicode('xyz', 'ascii').isalpha(), True)
        self.assertIs(unicode('@#$%', 'ascii').isalpha(), False)
        self.assertIs(unicode('0123', 'ascii').isdecimal(), True)
        self.assertIs(unicode('xyz', 'ascii').isdecimal(), False)
        self.assertIs(unicode('0123', 'ascii').isdigit(), True)
        self.assertIs(unicode('xyz', 'ascii').isdigit(), False)
        self.assertIs(unicode('xyz', 'ascii').islower(), True)
        self.assertIs(unicode('XYZ', 'ascii').islower(), False)
        self.assertIs(unicode('0123', 'ascii').isnumeric(), True)
        self.assertIs(unicode('xyz', 'ascii').isnumeric(), False)
        self.assertIs(unicode(' ', 'ascii').isspace(), True)
        self.assertIs(unicode('XYZ', 'ascii').isspace(), False)
        self.assertIs(unicode('X', 'ascii').istitle(), True)
        self.assertIs(unicode('x', 'ascii').istitle(), False)
        self.assertIs(unicode('XYZ', 'ascii').isupper(), True)
        self.assertIs(unicode('xyz', 'ascii').isupper(), False)
        self.assertIs(unicode('xyz', 'ascii').startswith(unicode('x', 'ascii')), True)
        self.assertIs(unicode('xyz', 'ascii').startswith(unicode('z', 'ascii')), False)
