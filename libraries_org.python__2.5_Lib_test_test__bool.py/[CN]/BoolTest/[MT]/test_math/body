def test_math(self):
    self.assertEqual((+ False), 0)
    self.assertIsNot((+ False), False)
    self.assertEqual((- False), 0)
    self.assertIsNot((- False), False)
    self.assertEqual(abs(False), 0)
    self.assertIsNot(abs(False), False)
    self.assertEqual((+ True), 1)
    self.assertIsNot((+ True), True)
    self.assertEqual((- True), (-1))
    self.assertEqual(abs(True), 1)
    self.assertIsNot(abs(True), True)
    self.assertEqual((~ False), (-1))
    self.assertEqual((~ True), (-2))
    self.assertEqual((False + 2), 2)
    self.assertEqual((True + 2), 3)
    self.assertEqual((2 + False), 2)
    self.assertEqual((2 + True), 3)
    self.assertEqual((False + False), 0)
    self.assertIsNot((False + False), False)
    self.assertEqual((False + True), 1)
    self.assertIsNot((False + True), True)
    self.assertEqual((True + False), 1)
    self.assertIsNot((True + False), True)
    self.assertEqual((True + True), 2)
    self.assertEqual((True - True), 0)
    self.assertIsNot((True - True), False)
    self.assertEqual((False - False), 0)
    self.assertIsNot((False - False), False)
    self.assertEqual((True - False), 1)
    self.assertIsNot((True - False), True)
    self.assertEqual((False - True), (-1))
    self.assertEqual((True * 1), 1)
    self.assertEqual((False * 1), 0)
    self.assertIsNot((False * 1), False)
    self.assertEqual((True / 1), 1)
    self.assertIsNot((True / 1), True)
    self.assertEqual((False / 1), 0)
    self.assertIsNot((False / 1), False)
    for b in (False, True):
        for i in (0, 1, 2):
            self.assertEqual((b ** i), (int(b) ** i))
            self.assertIsNot((b ** i), bool((int(b) ** i)))
    for a in (False, True):
        for b in (False, True):
            self.assertIs((a & b), bool((int(a) & int(b))))
            self.assertIs((a | b), bool((int(a) | int(b))))
            self.assertIs((a ^ b), bool((int(a) ^ int(b))))
            self.assertEqual((a & int(b)), (int(a) & int(b)))
            self.assertIsNot((a & int(b)), bool((int(a) & int(b))))
            self.assertEqual((a | int(b)), (int(a) | int(b)))
            self.assertIsNot((a | int(b)), bool((int(a) | int(b))))
            self.assertEqual((a ^ int(b)), (int(a) ^ int(b)))
            self.assertIsNot((a ^ int(b)), bool((int(a) ^ int(b))))
            self.assertEqual((int(a) & b), (int(a) & int(b)))
            self.assertIsNot((int(a) & b), bool((int(a) & int(b))))
            self.assertEqual((int(a) | b), (int(a) | int(b)))
            self.assertIsNot((int(a) | b), bool((int(a) | int(b))))
            self.assertEqual((int(a) ^ b), (int(a) ^ int(b)))
            self.assertIsNot((int(a) ^ b), bool((int(a) ^ int(b))))
    self.assertIs((1 == 1), True)
    self.assertIs((1 == 0), False)
    self.assertIs((0 < 1), True)
    self.assertIs((1 < 0), False)
    self.assertIs((0 <= 0), True)
    self.assertIs((1 <= 0), False)
    self.assertIs((1 > 0), True)
    self.assertIs((1 > 1), False)
    self.assertIs((1 >= 1), True)
    self.assertIs((0 >= 1), False)
    self.assertIs((0 != 1), True)
    self.assertIs((0 != 0), False)
    x = [1]
    self.assertIs((x is x), True)
    self.assertIs((x is not x), False)
    self.assertIs((1 in x), True)
    self.assertIs((0 in x), False)
    self.assertIs((1 not in x), False)
    self.assertIs((0 not in x), True)
    x = {1: 2, }
    self.assertIs((x is x), True)
    self.assertIs((x is not x), False)
    self.assertIs((1 in x), True)
    self.assertIs((0 in x), False)
    self.assertIs((1 not in x), False)
    self.assertIs((0 not in x), True)
    self.assertIs((not True), False)
    self.assertIs((not False), True)
