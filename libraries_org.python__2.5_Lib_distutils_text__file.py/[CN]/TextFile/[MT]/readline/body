def readline(self):
    'Read and return a single logical line from the current file (or\n           from an internal buffer if lines have previously been "unread"\n           with \'unreadline()\').  If the \'join_lines\' option is true, this\n           may involve reading multiple physical lines concatenated into a\n           single string.  Updates the current line number, so calling\n           \'warn()\' after \'readline()\' emits a warning about the physical\n           line(s) just read.  Returns None on end-of-file, since the empty\n           string can occur if \'rstrip_ws\' is true but \'strip_blanks\' is\n           not.'
    if self.linebuf:
        line = self.linebuf[(-1)]
        del self.linebuf[(-1)]
        return line
    buildup_line = ''
    while 1:
        line = self.file.readline()
        if (line == ''):
            line = None
        if (self.strip_comments and line):
            pos = string.find(line, '#')
            if (pos == (-1)):
                pass
            elif ((pos == 0) or (line[(pos - 1)] != '\\')):
                eol = (((line[(-1)] == '\n') and '\n') or '')
                line = (line[0:pos] + eol)
                if (string.strip(line) == ''):
                    continue
            else:
                line = string.replace(line, '\\#', '#')
        if (self.join_lines and buildup_line):
            if (line is None):
                self.warn('continuation line immediately precedes end-of-file')
                return buildup_line
            if self.collapse_join:
                line = string.lstrip(line)
            line = (buildup_line + line)
            if (type(self.current_line) is ListType):
                self.current_line[1] = (self.current_line[1] + 1)
            else:
                self.current_line = [self.current_line, (self.current_line + 1)]
        else:
            if (line is None):
                return None
            if (type(self.current_line) is ListType):
                self.current_line = (self.current_line[1] + 1)
            else:
                self.current_line = (self.current_line + 1)
        if (self.lstrip_ws and self.rstrip_ws):
            line = string.strip(line)
        elif self.lstrip_ws:
            line = string.lstrip(line)
        elif self.rstrip_ws:
            line = string.rstrip(line)
        if (((line == '') or (line == '\n')) and self.skip_blanks):
            continue
        if self.join_lines:
            if (line[(-1)] == '\\'):
                buildup_line = line[:(-1)]
                continue
            if (line[(-2):] == '\\\n'):
                buildup_line = (line[0:(-2)] + '\n')
                continue
        return line
