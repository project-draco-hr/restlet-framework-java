{
  int result=0;
  int totalFilled=0;
synchronized (getLock()) {
    if (processor.couldFill()) {
      boolean tryAgain=true;
      int drained=0;
      int filled=0;
      boolean lastDrainFailed=false;
      boolean lastFillFailed=false;
      while (tryAgain && processor.canLoop()) {
        if (isDraining()) {
          drained=0;
          if (hasRemaining()) {
            drained=processor.onDrain(this,args);
          }
          if (drained > 0) {
            result+=drained;
            lastDrainFailed=false;
            lastFillFailed=false;
            if (Context.getCurrentLogger().isLoggable(Level.FINER)) {
              Context.getCurrentLogger().finer(drained + " bytes drained from buffer");
            }
          }
 else           if (drained == -1) {
            if (result == 0) {
              result=-1;
            }
            tryAgain=false;
          }
 else           if (!lastFillFailed && couldFill()) {
            lastDrainFailed=true;
            beforeFill();
          }
 else {
            tryAgain=false;
          }
        }
 else         if (isFilling()) {
          filled=0;
          if (hasRemaining()) {
            filled=processor.onFill(this,args);
          }
          if (filled > 0) {
            totalFilled+=filled;
            lastDrainFailed=false;
            lastFillFailed=false;
            if (Context.getCurrentLogger().isLoggable(Level.FINER)) {
              Context.getCurrentLogger().finer(filled + " bytes filled into buffer");
            }
          }
 else           if (filled == -1) {
            if (result == 0) {
              result=-1;
            }
            tryAgain=false;
          }
 else           if (!lastDrainFailed && couldDrain()) {
            lastFillFailed=true;
            beforeDrain();
          }
 else {
            tryAgain=false;
          }
        }
 else {
          tryAgain=false;
        }
      }
      if ((result == 0) && !processor.couldFill()) {
        result=-1;
      }
    }
 else {
      result=-1;
    }
  }
  return result;
}
