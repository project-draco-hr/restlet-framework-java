def login(self, user, password):
    "Log in on an SMTP server that requires authentication.\n\n        The arguments are:\n            - user:     The user name to authenticate with.\n            - password: The password for the authentication.\n\n        If there has been no previous EHLO or HELO command this session, this\n        method tries ESMTP EHLO first.\n\n        This method will return normally if the authentication was successful.\n\n        This method may raise the following exceptions:\n\n         SMTPHeloError            The server didn't reply properly to\n                                  the helo greeting.\n         SMTPAuthenticationError  The server didn't accept the username/\n                                  password combination.\n         SMTPException            No suitable authentication method was\n                                  found.\n        "

    def encode_cram_md5(challenge, user, password):
        challenge = base64.decodestring(challenge)
        response = ((user + ' ') + hmac.HMAC(password, challenge).hexdigest())
        return encode_base64(response, eol='')

    def encode_plain(user, password):
        return encode_base64(('\x00%s\x00%s' % (user, password)), eol='')
    AUTH_PLAIN = 'PLAIN'
    AUTH_CRAM_MD5 = 'CRAM-MD5'
    AUTH_LOGIN = 'LOGIN'
    if ((self.helo_resp is None) and (self.ehlo_resp is None)):
        if (not (200 <= self.ehlo()[0] <= 299)):
            (code, resp) = self.helo()
            if (not (200 <= code <= 299)):
                raise SMTPHeloError(code, resp)
    if (not self.has_extn('auth')):
        raise SMTPException('SMTP AUTH extension not supported by server.')
    authlist = self.esmtp_features['auth'].split()
    preferred_auths = [AUTH_CRAM_MD5, AUTH_PLAIN, AUTH_LOGIN]
    authmethod = None
    for method in preferred_auths:
        if (method in authlist):
            authmethod = method
            break
    if (authmethod == AUTH_CRAM_MD5):
        (code, resp) = self.docmd('AUTH', AUTH_CRAM_MD5)
        if (code == 503):
            return (code, resp)
        (code, resp) = self.docmd(encode_cram_md5(resp, user, password))
    elif (authmethod == AUTH_PLAIN):
        (code, resp) = self.docmd('AUTH', ((AUTH_PLAIN + ' ') + encode_plain(user, password)))
    elif (authmethod == AUTH_LOGIN):
        (code, resp) = self.docmd('AUTH', ('%s %s' % (AUTH_LOGIN, encode_base64(user, eol=''))))
        if (code != 334):
            raise SMTPAuthenticationError(code, resp)
        (code, resp) = self.docmd(encode_base64(password, eol=''))
    elif (authmethod is None):
        raise SMTPException('No suitable authentication method found.')
    if (code not in (235, 503)):
        raise SMTPAuthenticationError(code, resp)
    return (code, resp)
