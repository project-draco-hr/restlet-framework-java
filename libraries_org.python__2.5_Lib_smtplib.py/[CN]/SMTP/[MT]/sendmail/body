def sendmail(self, from_addr, to_addrs, msg, mail_options=[], rcpt_options=[]):
    'This command performs an entire mail transaction.\n\n        The arguments are:\n            - from_addr    : The address sending this mail.\n            - to_addrs     : A list of addresses to send this mail to.  A bare\n                             string will be treated as a list with 1 address.\n            - msg          : The message to send.\n            - mail_options : List of ESMTP options (such as 8bitmime) for the\n                             mail command.\n            - rcpt_options : List of ESMTP options (such as DSN commands) for\n                             all the rcpt commands.\n\n        If there has been no previous EHLO or HELO command this session, this\n        method tries ESMTP EHLO first.  If the server does ESMTP, message size\n        and each of the specified options will be passed to it.  If EHLO\n        fails, HELO will be tried and ESMTP options suppressed.\n\n        This method will return normally if the mail is accepted for at least\n        one recipient.  It returns a dictionary, with one entry for each\n        recipient that was refused.  Each entry contains a tuple of the SMTP\n        error code and the accompanying error message sent by the server.\n\n        This method may raise the following exceptions:\n\n         SMTPHeloError          The server didn\'t reply properly to\n                                the helo greeting.\n         SMTPRecipientsRefused  The server rejected ALL recipients\n                                (no mail was sent).\n         SMTPSenderRefused      The server didn\'t accept the from_addr.\n         SMTPDataError          The server replied with an unexpected\n                                error code (other than a refusal of\n                                a recipient).\n\n        Note: the connection will be open even after an exception is raised.\n\n        Example:\n\n         >>> import smtplib\n         >>> s=smtplib.SMTP("localhost")\n         >>> tolist=["one@one.org","two@two.org","three@three.org","four@four.org"]\n         >>> msg = \'\'\'\\\n         ... From: Me@my.org\n         ... Subject: testin\'...\n         ...\n         ... This is a test \'\'\'\n         >>> s.sendmail("me@my.org",tolist,msg)\n         { "three@three.org" : ( 550 ,"User unknown" ) }\n         >>> s.quit()\n\n        In the above example, the message was accepted for delivery to three\n        of the four addresses, and one was rejected, with the error code\n        550.  If all addresses are accepted, then the method will return an\n        empty dictionary.\n\n        '
    if ((self.helo_resp is None) and (self.ehlo_resp is None)):
        if (not (200 <= self.ehlo()[0] <= 299)):
            (code, resp) = self.helo()
            if (not (200 <= code <= 299)):
                raise SMTPHeloError(code, resp)
    esmtp_opts = []
    if self.does_esmtp:
        if self.has_extn('size'):
            esmtp_opts.append(('size=%d' % len(msg)))
        for option in mail_options:
            esmtp_opts.append(option)
    (code, resp) = self.mail(from_addr, esmtp_opts)
    if (code != 250):
        self.rset()
        raise SMTPSenderRefused(code, resp, from_addr)
    senderrs = {}
    if isinstance(to_addrs, basestring):
        to_addrs = [to_addrs]
    for each in to_addrs:
        (code, resp) = self.rcpt(each, rcpt_options)
        if ((code != 250) and (code != 251)):
            senderrs[each] = (code, resp)
    if (len(senderrs) == len(to_addrs)):
        self.rset()
        raise SMTPRecipientsRefused(senderrs)
    (code, resp) = self.data(msg)
    if (code != 250):
        self.rset()
        raise SMTPDataError(code, resp)
    return senderrs
