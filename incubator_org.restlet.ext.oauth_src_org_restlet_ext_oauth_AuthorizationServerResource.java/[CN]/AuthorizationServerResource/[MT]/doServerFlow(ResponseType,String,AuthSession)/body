{
  Form params=getQuery();
  String redirUri=params.getFirstValue(REDIR_URI);
  String sessionId=null;
  if (session != null)   sessionId=session.getId();
  if (redirUri == null || redirUri.length() == 0) {
    sendError(sessionId,ErrorCode.invalid_request,params.getFirstValue(STATE),"No redirect_uri parameter found.",null);
    log.info("No mandatory redirect URI provided");
    return;
  }
  Client client=clients.findById(clientId);
  log.info("Client = " + client);
  if (client == null) {
    sendError(sessionId,ErrorCode.invalid_client,params.getFirstValue(STATE),"Need to register the client : " + clientId,null);
    log.info("Need to register the client : " + clientId);
    return;
  }
  log.info("Compare client redir:provided redir = " + client.getRedirectUri() + ":"+ redirUri);
  if (!redirUri.startsWith(client.getRedirectUri())) {
    sendError(sessionId,ErrorCode.redirect_uri_mismatch,params.getFirstValue(STATE),"Callback URI does not match.",null);
    log.info("Callback URI does not match.");
    return;
  }
  if (session != null && session.getScopeOwner() != null) {
    if (flow.equals(ResponseType.token) || flow.equals(ResponseType.code)) {
      String[] requestedScopes=parseScope(params.getFirstValue(SCOPE));
      for (      String scope : requestedScopes) {
        log.info("Requested scopes = " + scope);
      }
      session.setClient(client);
      session.setAuthFlow(flow);
      session.setRequestedScope(requestedScopes);
      if (!redirUri.equals(client.getRedirectUri())) {
        session.setDynamicCallbackURI(redirUri);
        getLogger().info("OAuth2 set dynamic callback = " + redirUri);
      }
      String state=getCookies().getFirstValue(STATE);
      if (state != null && state.length() > 0)       session.setState(state);
      getResponse().setEntity(doPostAuthenticate(session,client));
      return;
    }
  }
 else {
    log.info("Base ref = " + getReference().getParentRef());
    Reference ref=new Reference("riap://application/login");
    log.info("OAuth2 session = " + session);
    if (session == null) {
      session=new AuthSession(getContext().getAttributes(),new ScheduledThreadPoolExecutor(5));
      CookieSetting cs=new CookieSetting(ClientCookieID,session.getId());
      getResponse().getCookieSettings().add(cs);
      log.info("Setting cookie - " + session.getId());
    }
    session.setClient(client);
    session.setAuthFlow(flow);
    if (!redirUri.equals(client.getRedirectUri())) {
      session.setDynamicCallbackURI(redirUri);
      getLogger().info("OAuth2 set dynamic callback = " + redirUri);
    }
    String state=getCookies().getFirstValue(STATE);
    if (state != null && state.length() > 0)     session.setState(state);
    String[] scopes=parseScope(params.getFirstValue(SCOPE));
    session.setRequestedScope(scopes);
    log.info("Setting callback url after Authentication = " + getReference().getBaseRef());
    Reference cb=new Reference(getReference().getBaseRef());
    cb.addQueryParameter("internal",null);
    ref.addQueryParameter("callback",cb.toString(true,false));
    getResponse().setCacheDirectives(noStore);
    Redirector dispatcher=new Redirector(getContext(),ref.toString(),Redirector.MODE_SERVER_OUTBOUND);
    dispatcher.handle(getRequest(),getResponse());
  }
}
