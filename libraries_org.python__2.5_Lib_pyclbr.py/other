"Parse a Python module and describe its classes and methods.\n\nParse enough of a Python file to recognize imports and class and\nmethod definitions, and to find out the superclasses of a class.\n\nThe interface consists of a single function:\n        readmodule_ex(module [, path])\nwhere module is the name of a Python module, and path is an optional\nlist of directories where the module is to be searched.  If present,\npath is prepended to the system search path sys.path.  The return\nvalue is a dictionary.  The keys of the dictionary are the names of\nthe classes defined in the module (including classes that are defined\nvia the from XXX import YYY construct).  The values are class\ninstances of the class Class defined here.  One special key/value pair\nis present for packages: the key '__path__' has a list as its value\nwhich contains the package search path.\n\nA class is described by the class Class in this module.  Instances\nof this class have the following instance variables:\n        module -- the module name\n        name -- the name of the class\n        super -- a list of super classes (Class instances)\n        methods -- a dictionary of methods\n        file -- the file in which the class was defined\n        lineno -- the line in the file on which the class statement occurred\nThe dictionary of methods uses the method names as keys and the line\nnumbers on which the method was defined as values.\nIf the name of a super class is not recognized, the corresponding\nentry in the list of super classes is not a class instance but a\nstring giving the name of the super class.  Since import statements\nare recognized and imported modules are scanned as well, this\nshouldn't happen often.\n\nA function is described by the class Function in this module.\nInstances of this class have the following instance variables:\n        module -- the module name\n        name -- the name of the class\n        file -- the file in which the class was defined\n        lineno -- the line in the file on which the class statement occurred\n"
import sys
import imp
import tokenize
from token import NAME, DEDENT, NEWLINE, OP
from operator import itemgetter
__all__ = ['readmodule', 'readmodule_ex', 'Class', 'Function']
_modules = {}
if (__name__ == '__main__'):
    _main()
