{
  Section section=new Section();
  if (contract.getSections().isEmpty()) {
    section=new Section();
    section.setName("All resources");
    contract.getSections().add(section);
  }
 else {
    section=contract.getSections().get(0);
  }
  for (  ResourceInfo ri : resources) {
    Resource resource=new Resource();
    resource.setDescription(ri.getDescription());
    resource.setName(ri.getIdentifier());
    resource.setAuthenticationProtocol(ri.getAuthenticationProtocol());
    if (ri.getPath() == null) {
      resource.setResourcePath("/");
    }
 else     if (!ri.getPath().startsWith("/")) {
      resource.setResourcePath("/" + ri.getPath());
    }
 else {
      resource.setResourcePath(ri.getPath());
    }
    resource.setPathVariables(new ArrayList<PathVariable>());
    for (    ParameterInfo pi : ri.getParameters()) {
      if (ParameterStyle.TEMPLATE.equals(pi.getStyle())) {
        PathVariable pathVariable=new PathVariable();
        pathVariable.setDescription(pi.getDescription());
        pathVariable.setName(pi.getName());
        resource.getPathVariables().add(pathVariable);
      }
    }
    if (!ri.getChildResources().isEmpty()) {
      addResources(application,contract,ri.getChildResources(),resource.getResourcePath(),mapReps);
    }
    LOGGER.fine("Resource " + ri.getPath() + " added.");
    if (ri.getMethods().isEmpty()) {
      LOGGER.warning("Resource " + ri.getIdentifier() + " has no methods.");
      continue;
    }
    resource.setOperations(new ArrayList<Operation>());
    for (    MethodInfo mi : ri.getMethods()) {
      String methodName=mi.getMethod().getName();
      if ("OPTIONS".equals(methodName) || "PATCH".equals(methodName)) {
        LOGGER.fine("Method " + methodName + " ignored.");
        continue;
      }
      LOGGER.fine("Method " + methodName + " added.");
      Operation operation=new Operation();
      operation.setDescription(mi.getDescription());
      if (mi.getName() != null && !"".equals(mi.getName())) {
        operation.setName(mi.getName());
      }
 else {
        operation.setName(mi.getAnnotation().getJavaMethod().getName());
      }
      operation.setMethod(mi.getMethod().getName());
      String mediaType;
      if (mi.getRequest() != null && mi.getRequest().getRepresentations() != null) {
        List<RepresentationInfo> consumed=mi.getRequest().getRepresentations();
        for (        RepresentationInfo reprInfo : consumed) {
          mediaType=reprInfo.getMediaType().getName();
          operation.getConsumes().add(mediaType);
        }
      }
      if (mi.getResponse() != null && mi.getResponse().getRepresentations() != null) {
        List<RepresentationInfo> produced=mi.getResponse().getRepresentations();
        for (        RepresentationInfo reprInfo : produced) {
          mediaType=reprInfo.getMediaType().getName();
          operation.getProduces().add(mediaType);
        }
      }
      operation.setHeaders(new ArrayList<Header>());
      operation.setQueryParameters(new ArrayList<QueryParameter>());
      if (mi.getRequest() != null) {
        for (        ParameterInfo pi : mi.getRequest().getParameters()) {
          if (ParameterStyle.HEADER.equals(pi.getStyle())) {
            Header header=new Header();
            header.setAllowMultiple(pi.isRepeating());
            header.setDefaultValue(pi.getDefaultValue());
            header.setDescription(toString(pi.getDescription(),pi.getDefaultValue()));
            header.setName(pi.getName());
            header.setEnumeration(new ArrayList<String>());
            header.setRequired(pi.isRequired());
            operation.getHeaders().add(header);
          }
 else           if (ParameterStyle.QUERY.equals(pi.getStyle())) {
            QueryParameter queryParameter=new QueryParameter();
            queryParameter.setAllowMultiple(pi.isRepeating());
            queryParameter.setDefaultValue(pi.getDefaultValue());
            queryParameter.setDescription(toString(pi.getDescription(),pi.getDefaultValue()));
            queryParameter.setName(pi.getName());
            queryParameter.setEnumeration(new ArrayList<String>());
            queryParameter.setRequired(pi.isRequired());
            operation.getQueryParameters().add(queryParameter);
          }
        }
      }
      for (      ParameterInfo pi : mi.getParameters()) {
        if (ParameterStyle.HEADER.equals(pi.getStyle())) {
          Header header=new Header();
          header.setAllowMultiple(pi.isRepeating());
          header.setDefaultValue(pi.getDefaultValue());
          header.setDescription(toString(pi.getDescription(),pi.getDefaultValue()));
          header.setName(pi.getName());
          header.setEnumeration(new ArrayList<String>());
          header.setRequired(pi.isRequired());
          operation.getHeaders().add(header);
        }
 else         if (ParameterStyle.QUERY.equals(pi.getStyle())) {
          QueryParameter queryParameter=new QueryParameter();
          queryParameter.setAllowMultiple(pi.isRepeating());
          queryParameter.setDefaultValue(pi.getDefaultValue());
          queryParameter.setDescription(toString(pi.getDescription(),pi.getDefaultValue()));
          queryParameter.setName(pi.getName());
          queryParameter.setEnumeration(new ArrayList<String>());
          queryParameter.setRequired(pi.isRequired());
          operation.getQueryParameters().add(queryParameter);
        }
      }
      if (mi.getRequest() != null && mi.getRequest().getRepresentations() != null && !mi.getRequest().getRepresentations().isEmpty()) {
        addRepresentations(mapReps,mi.getRequest().getRepresentations());
        Entity entity=new Entity();
        entity.setType(mi.getRequest().getRepresentations().get(0).getType().getSimpleName());
        entity.setArray(mi.getRequest().getRepresentations().get(0).isCollection());
        operation.setInRepresentation(entity);
      }
      if (mi.getResponses() != null && !mi.getResponses().isEmpty()) {
        operation.setResponses(new ArrayList<Response>());
        Entity entity=new Entity();
        if (!mi.getResponse().getRepresentations().isEmpty()) {
          entity.setType(mi.getResponse().getRepresentations().get(0).getType().getSimpleName());
          entity.setArray(mi.getResponse().getRepresentations().get(0).isCollection());
        }
        for (        ResponseInfo rio : mi.getResponses()) {
          addRepresentations(mapReps,rio.getRepresentations());
          if (!rio.getStatuses().isEmpty()) {
            Status status=rio.getStatuses().get(0);
            Response response=new Response();
            response.setEntity(entity);
            response.setCode(status.getCode());
            response.setName(rio.getDescription());
            response.setDescription(rio.getDescription());
            response.setMessage(status.getDescription());
            operation.getResponses().add(response);
          }
        }
      }
      resource.getOperations().add(operation);
    }
    section.getResources().add(resource);
  }
}
