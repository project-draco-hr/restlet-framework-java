def test_all(self):
    u = UserDict.UserDict()
    u0 = UserDict.UserDict(d0)
    u1 = UserDict.UserDict(d1)
    u2 = UserDict.IterableUserDict(d2)
    uu = UserDict.UserDict(u)
    uu0 = UserDict.UserDict(u0)
    uu1 = UserDict.UserDict(u1)
    uu2 = UserDict.UserDict(u2)
    self.assertEqual(UserDict.UserDict(one=1, two=2), d2)
    self.assertEqual(UserDict.UserDict([('one', 1), ('two', 2)]), d2)
    self.assertEqual(UserDict.UserDict(dict=[('one', 1), ('two', 2)]), d2)
    self.assertEqual(UserDict.UserDict([('one', 1), ('two', 2)], two=3, three=5), d3)
    self.assertEqual(UserDict.UserDict.fromkeys('one two'.split()), d4)
    self.assertEqual(UserDict.UserDict().fromkeys('one two'.split()), d4)
    self.assertEqual(UserDict.UserDict.fromkeys('one two'.split(), 1), d5)
    self.assertEqual(UserDict.UserDict().fromkeys('one two'.split(), 1), d5)
    self.assert_((u1.fromkeys('one two'.split()) is not u1))
    self.assert_(isinstance(u1.fromkeys('one two'.split()), UserDict.UserDict))
    self.assert_(isinstance(u2.fromkeys('one two'.split()), UserDict.IterableUserDict))
    self.assertEqual(eval(repr(u1)), eval(repr(d1)))
    self.assertEqual(eval(`u2`), eval(`d2`))
    all = [d0, d1, d2, u, u0, u1, u2, uu, uu0, uu1, uu2]
    for a in all:
        for b in all:
            self.assertEqual(cmp(a, b), cmp(len(a), len(b)))
    self.assertEqual(u2['one'], 1)
    self.assertRaises(KeyError, u1.__getitem__, 'two')
    u3 = UserDict.UserDict(u2)
    u3['two'] = 2
    u3['three'] = 3
    del u3['three']
    self.assertRaises(KeyError, u3.__delitem__, 'three')
    u3.clear()
    self.assertEqual(u3, {})
    u2a = u2.copy()
    self.assertEqual(u2a, u2)
    u2b = UserDict.UserDict(x=42, y=23)
    u2c = u2b.copy()
    self.assertEqual(u2b, u2c)


    class MyUserDict(UserDict.UserDict):

        def display(self):
            print self
    m2 = MyUserDict(u2)
    m2a = m2.copy()
    self.assertEqual(m2a, m2)
    m2['foo'] = 'bar'
    self.assertNotEqual(m2a, m2)
    self.assertEqual(set(u2.keys()), set(d2.keys()))
    self.assertEqual(set(u2.items()), set(d2.items()))
    self.assertEqual(set(u2.values()), set(d2.values()))
    for i in u2.keys():
        self.assert_(u2.has_key(i))
        self.assert_((i in u2))
        self.assertEqual(u1.has_key(i), d1.has_key(i))
        self.assertEqual((i in u1), (i in d1))
        self.assertEqual(u0.has_key(i), d0.has_key(i))
        self.assertEqual((i in u0), (i in d0))
    t = UserDict.UserDict()
    t.update(u2)
    self.assertEqual(t, u2)


    class Items:

        def items(self):
            return (('x', 42), ('y', 23))
    t = UserDict.UserDict()
    t.update(Items())
    self.assertEqual(t, {'x': 42, 'y': 23, })
    for i in u2.keys():
        self.assertEqual(u2.get(i), u2[i])
        self.assertEqual(u1.get(i), d1.get(i))
        self.assertEqual(u0.get(i), d0.get(i))
    for i in xrange(20):
        u2[i] = str(i)
    ikeys = []
    for k in u2:
        ikeys.append(k)
    keys = u2.keys()
    self.assertEqual(Set(ikeys), Set(keys))
    t = UserDict.UserDict()
    self.assertEqual(t.setdefault('x', 42), 42)
    self.assert_(t.has_key('x'))
    self.assertEqual(t.setdefault('x', 23), 42)
    t = UserDict.UserDict(x=42)
    self.assertEqual(t.pop('x'), 42)
    self.assertRaises(KeyError, t.pop, 'x')
    self.assertEqual(t.pop('x', 1), 1)
    t['x'] = 42
    self.assertEqual(t.pop('x', 1), 42)
    t = UserDict.UserDict(x=42)
    self.assertEqual(t.popitem(), ('x', 42))
    self.assertRaises(KeyError, t.popitem)
