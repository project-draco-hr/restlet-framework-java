def test_all(self):
    s = SeqDict()
    s[10] = 'ten'
    s[20] = 'twenty'
    s[30] = 'thirty'
    del s[20]
    self.assertEqual(s[10], 'ten')
    self.assertEqual(s.keys(), [10, 30])
    self.assert_(s.has_key(10))
    self.assert_((not s.has_key(20)))
    self.assert_((10 in s))
    self.assert_((20 not in s))
    self.assertEqual([k for k in s], [10, 30])
    self.assertEqual(len(s), 2)
    self.assertEqual(list(s.iteritems()), [(10, 'ten'), (30, 'thirty')])
    self.assertEqual(list(s.iterkeys()), [10, 30])
    self.assertEqual(list(s.itervalues()), ['ten', 'thirty'])
    self.assertEqual(s.values(), ['ten', 'thirty'])
    self.assertEqual(s.items(), [(10, 'ten'), (30, 'thirty')])
    self.assertEqual(s.get(10), 'ten')
    self.assertEqual(s.get(15, 'fifteen'), 'fifteen')
    self.assertEqual(s.get(15), None)
    self.assertEqual(s.setdefault(40, 'forty'), 'forty')
    self.assertEqual(s.setdefault(10, 'null'), 'ten')
    del s[40]
    self.assertEqual(s.pop(10), 'ten')
    self.assert_((10 not in s))
    s[10] = 'ten'
    self.assertEqual(s.pop('x', 1), 1)
    s['x'] = 42
    self.assertEqual(s.pop('x', 1), 42)
    (k, v) = s.popitem()
    self.assert_((k not in s))
    s[k] = v
    s.clear()
    self.assertEqual(len(s), 0)
    self.assertRaises(KeyError, s.popitem)
    s.update({10: 'ten', 20: 'twenty', })
    self.assertEqual(s[10], 'ten')
    self.assertEqual(s[20], 'twenty')
    self.assertEqual(s, {10: 'ten', 20: 'twenty', })
    t = SeqDict()
    t[20] = 'twenty'
    t[10] = 'ten'
    self.assertEqual(s, t)
