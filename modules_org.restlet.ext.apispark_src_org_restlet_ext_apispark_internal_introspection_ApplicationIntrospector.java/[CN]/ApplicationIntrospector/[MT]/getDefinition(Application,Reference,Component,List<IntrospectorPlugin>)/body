{
  if (introspectorPlugins == null) {
    introspectorPlugins=new ArrayList<IntrospectorPlugin>();
  }
  Definition definition=new Definition();
  Contract contract=new Contract();
  contract.setDescription(StringUtils.nullToEmpty(application.getDescription()));
  if (StringUtils.isNullOrEmpty(application.getName())) {
    LOGGER.log(Level.WARNING,"Please provide a name to your application, used " + contract.getName() + " by default.");
    contract.setName(application.getClass().getName());
  }
 else {
    contract.setName(application.getName());
  }
  CollectInfo collectInfo=new CollectInfo();
  if (application instanceof DocumentedApplication) {
    DocumentedApplication documentedApplication=(DocumentedApplication)application;
    collectInfo.setSections(documentedApplication.getSections());
  }
  definition.setContract(contract);
  RestletCollector.collect(collectInfo,"",application.getInboundRoot(),null,introspectorPlugins);
  contract.setResources(collectInfo.getResources());
  contract.setRepresentations(collectInfo.getRepresentations());
  contract.setSections(collectInfo.getSections());
  String scheme=collectInfo.getSchemes().isEmpty() ? null : collectInfo.getSchemes().get(0).getName();
  if (baseRef != null) {
    Endpoint endpoint=new Endpoint(baseRef.getHostDomain(),baseRef.getHostPort(),baseRef.getSchemeProtocol().getSchemeName(),baseRef.getPath(),scheme);
    definition.getEndpoints().add(endpoint);
  }
  if (component != null) {
    LOGGER.fine("Look for the endpoint.");
    Endpoint endpoint=ComponentIntrospector.getEndpoint(component.getDefaultHost(),application,scheme);
    contract.setSections(collectInfo.getSections());
    if (endpoint != null) {
      definition.getEndpoints().add(endpoint);
    }
    for (    VirtualHost virtualHost : component.getHosts()) {
      endpoint=ComponentIntrospector.getEndpoint(virtualHost,application,scheme);
      if (endpoint != null) {
        definition.getEndpoints().add(endpoint);
      }
    }
  }
  if (definition.getEndpoints().isEmpty()) {
    Endpoint endpoint=new Endpoint("example.com",80,Protocol.HTTP.getSchemeName(),"/v1",scheme);
    definition.getEndpoints().add(endpoint);
  }
  sortDefinition(definition);
  updateRepresentationsSectionsFromResources(definition);
  for (  IntrospectorPlugin introspectorPlugin : introspectorPlugins) {
    introspectorPlugin.processDefinition(definition,application);
  }
  return definition;
}
