def __init__(self, source, events=None):
    if (not hasattr(source, 'read')):
        source = open(source, 'rb')
    self._file = source
    self._events = []
    self._index = 0
    self.root = self._root = None
    self._parser = XMLTreeBuilder()
    parser = self._parser._parser
    append = self._events.append
    if (events is None):
        events = ['end']
    for event in events:
        if (event == 'start'):
            try:
                parser.ordered_attributes = 1
                parser.specified_attributes = 1

                def handler(tag, attrib_in, event=event, append=append, start=self._parser._start_list):
                    append((event, start(tag, attrib_in)))
                parser.StartElementHandler = handler
            except AttributeError:

                def handler(tag, attrib_in, event=event, append=append, start=self._parser._start):
                    append((event, start(tag, attrib_in)))
                parser.StartElementHandler = handler
        elif (event == 'end'):

            def handler(tag, event=event, append=append, end=self._parser._end):
                append((event, end(tag)))
            parser.EndElementHandler = handler
        elif (event == 'start-ns'):

            def handler(prefix, uri, event=event, append=append):
                try:
                    uri = _encode(uri, 'ascii')
                except UnicodeError:
                    pass
                append((event, ((prefix or ''), uri)))
            parser.StartNamespaceDeclHandler = handler
        elif (event == 'end-ns'):

            def handler(prefix, event=event, append=append):
                append((event, None))
            parser.EndNamespaceDeclHandler = handler
