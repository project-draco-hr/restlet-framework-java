def _write(self, file, node, encoding, namespaces):
    tag = node.tag
    if (tag is Comment):
        file.write(('<!-- %s -->' % _escape_cdata(node.text, encoding)))
    elif (tag is ProcessingInstruction):
        file.write(('<?%s?>' % _escape_cdata(node.text, encoding)))
    else:
        items = node.items()
        xmlns_items = []
        try:
            if (isinstance(tag, QName) or (tag[:1] == '{')):
                (tag, xmlns) = fixtag(tag, namespaces)
                if xmlns:
                    xmlns_items.append(xmlns)
        except TypeError:
            _raise_serialization_error(tag)
        file.write(('<' + _encode(tag, encoding)))
        if (items or xmlns_items):
            items.sort()
            for (k, v) in items:
                try:
                    if (isinstance(k, QName) or (k[:1] == '{')):
                        (k, xmlns) = fixtag(k, namespaces)
                        if xmlns:
                            xmlns_items.append(xmlns)
                except TypeError:
                    _raise_serialization_error(k)
                try:
                    if isinstance(v, QName):
                        (v, xmlns) = fixtag(v, namespaces)
                        if xmlns:
                            xmlns_items.append(xmlns)
                except TypeError:
                    _raise_serialization_error(v)
                file.write((' %s="%s"' % (_encode(k, encoding), _escape_attrib(v, encoding))))
            for (k, v) in xmlns_items:
                file.write((' %s="%s"' % (_encode(k, encoding), _escape_attrib(v, encoding))))
        if (node.text or len(node)):
            file.write('>')
            if node.text:
                file.write(_escape_cdata(node.text, encoding))
            for n in node:
                self._write(file, n, encoding, namespaces)
            file.write((('</' + _encode(tag, encoding)) + '>'))
        else:
            file.write(' />')
        for (k, v) in xmlns_items:
            del namespaces[v]
    if node.tail:
        file.write(_escape_cdata(node.tail, encoding))
