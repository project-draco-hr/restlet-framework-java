def __init__(self, filename=None, mode=None, compresslevel=9, fileobj=None):
    "Constructor for the GzipFile class.\n\n        At least one of fileobj and filename must be given a\n        non-trivial value.\n\n        The new class instance is based on fileobj, which can be a regular\n        file, a StringIO object, or any other object which simulates a file.\n        It defaults to None, in which case filename is opened to provide\n        a file object.\n\n        When fileobj is not None, the filename argument is only used to be\n        included in the gzip file header, which may includes the original\n        filename of the uncompressed file.  It defaults to the filename of\n        fileobj, if discernible; otherwise, it defaults to the empty string,\n        and in this case the original filename is not included in the header.\n\n        The mode argument can be any of 'r', 'rb', 'a', 'ab', 'w', or 'wb',\n        depending on whether the file will be read or written.  The default\n        is the mode of fileobj if discernible; otherwise, the default is 'rb'.\n        Be aware that only the 'rb', 'ab', and 'wb' values should be used\n        for cross-platform portability.\n\n        The compresslevel argument is an integer from 1 to 9 controlling the\n        level of compression; 1 is fastest and produces the least compression,\n        and 9 is slowest and produces the most compression.  The default is 9.\n\n        "
    if (mode and ('b' not in mode)):
        mode += 'b'
    if (fileobj is None):
        fileobj = self.myfileobj = __builtin__.open(filename, (mode or 'rb'))
    if (filename is None):
        if hasattr(fileobj, 'name'):
            filename = fileobj.name
        else:
            filename = ''
    if (mode is None):
        if hasattr(fileobj, 'mode'):
            mode = fileobj.mode
        else:
            mode = 'rb'
    if (mode[0:1] == 'r'):
        self.mode = READ
        self._new_member = True
        self.extrabuf = ''
        self.extrasize = 0
        self.filename = filename
        self.min_readsize = 100
    elif ((mode[0:1] == 'w') or (mode[0:1] == 'a')):
        self.mode = WRITE
        self._init_write(filename)
        self.compress = zlib.compressobj(compresslevel, zlib.DEFLATED, (- zlib.MAX_WBITS), zlib.DEF_MEM_LEVEL, 0)
    else:
        raise IOError, (('Mode ' + mode) + ' not supported')
    self.fileobj = fileobj
    self.offset = 0
    if (self.mode == WRITE):
        self._write_gzip_header()
