from _collections import defaultdict, deque
from operator import itemgetter as _itemgetter
from keyword import iskeyword as _iskeyword
import sys as _sys
__all__ = ['defaultdict', 'deque', 'namedtuple']
if (__name__ == '__main__'):
    from cPickle import loads, dumps
    Point = namedtuple('Point', 'x, y', True)
    p = Point(x=10, y=20)
    assert (p == loads(dumps(p)))


    class Point(namedtuple('Point', 'x y')):

        @property
        def hypot(self):
            return (((self.x ** 2) + (self.y ** 2)) ** 0.5)

        def __str__(self):
            return ('Point: x=%6.3f y=%6.3f hypot=%6.3f' % (self.x, self.y, self.hypot))
    for p in (Point(3, 4), Point(14, 5), Point((9.0 / 7), 6)):
        print p


    class Point(namedtuple('Point', 'x y')):
        'Point class with optimized _make() and _replace() without error-checking'
        _make = classmethod(tuple.__new__)

        def _replace(self, _map=map, **kwds):
            return self._make(_map(kwds.get, ('x', 'y'), self))
    print Point(11, 22)._replace(x=100)
    import doctest
    TestResults = namedtuple('TestResults', 'failed attempted')
    print TestResults(*doctest.testmod())
