def namedtuple(typename, field_names, verbose=False):
    "Returns a new subclass of tuple with named fields.\n\n    >>> Point = namedtuple('Point', 'x y')\n    >>> Point.__doc__                   # docstring for the new class\n    'Point(x, y)'\n    >>> p = Point(11, y=22)             # instantiate with positional args or keywords\n    >>> p[0] + p[1]                     # indexable like a plain tuple\n    33\n    >>> x, y = p                        # unpack like a regular tuple\n    >>> x, y\n    (11, 22)\n    >>> p.x + p.y                       # fields also accessable by name\n    33\n    >>> d = p._asdict()                 # convert to a dictionary\n    >>> d['x']\n    11\n    >>> Point(**d)                      # convert from a dictionary\n    Point(x=11, y=22)\n    >>> p._replace(x=100)               # _replace() is like str.replace() but targets named fields\n    Point(x=100, y=22)\n\n    "
    if isinstance(field_names, basestring):
        field_names = field_names.replace(',', ' ').split()
    field_names = tuple(field_names)
    for name in ((typename,) + field_names):
        if (not min(((c.isalnum() or (c == '_')) for c in name))):
            raise ValueError(('Type names and field names can only contain alphanumeric characters and underscores: %r' % name))
        if _iskeyword(name):
            raise ValueError(('Type names and field names cannot be a keyword: %r' % name))
        if name[0].isdigit():
            raise ValueError(('Type names and field names cannot start with a number: %r' % name))
    seen_names = set()
    for name in field_names:
        if name.startswith('_'):
            raise ValueError(('Field names cannot start with an underscore: %r' % name))
        if (name in seen_names):
            raise ValueError(('Encountered duplicate field name: %r' % name))
        seen_names.add(name)
    numfields = len(field_names)
    argtxt = repr(field_names).replace("'", '')[1:(-1)]
    reprtxt = ', '.join((('%s=%%r' % name) for name in field_names))
    dicttxt = ', '.join((('%r: t[%d]' % (name, pos)) for (pos, name) in enumerate(field_names)))
    template = ("class %(typename)s(tuple):\n        '%(typename)s(%(argtxt)s)' \n\n        __slots__ = () \n\n        _fields = %(field_names)r \n\n        def __new__(cls, %(argtxt)s):\n            return tuple.__new__(cls, (%(argtxt)s)) \n\n        @classmethod\n        def _make(cls, iterable, new=tuple.__new__, len=len):\n            'Make a new %(typename)s object from a sequence or iterable'\n            result = new(cls, iterable)\n            if len(result) != %(numfields)d:\n                raise TypeError('Expected %(numfields)d arguments, got %%d' %% len(result))\n            return result \n\n        def __repr__(self):\n            return '%(typename)s(%(reprtxt)s)' %% self \n\n        def _asdict(t):\n            'Return a new dict which maps field names to their values'\n            return {%(dicttxt)s} \n\n        def _replace(self, **kwds):\n            'Return a new %(typename)s object replacing specified fields with new values'\n            result = self._make(map(kwds.pop, %(field_names)r, self))\n            if kwds:\n                raise ValueError('Got unexpected field names: %%r' %% kwds.keys())\n            return result \n\n" % locals())
    for (i, name) in enumerate(field_names):
        template += ('        %s = property(itemgetter(%d))\n' % (name, i))
    if verbose:
        print template
    namespace = dict(itemgetter=_itemgetter)
    try:
        exec template in namespace
    except SyntaxError as e:
        raise SyntaxError(((e.message + ':\n') + template))
    result = namespace[typename]
    if hasattr(_sys, '_getframe'):
        result.__module__ = _sys._getframe(1).f_globals['__name__']
    return result
