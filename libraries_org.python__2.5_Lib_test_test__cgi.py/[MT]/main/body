def main():
    for (orig, expect) in parse_qsl_test_cases:
        result = cgi.parse_qsl(orig, keep_blank_values=True)
        print repr(orig), '=>', result
        verify((result == expect), ('Error parsing %s' % repr(orig)))
    for (orig, expect) in parse_strict_test_cases:
        print repr(orig)
        d = do_test(orig, 'GET')
        verify((d == expect), ('Error parsing %s' % repr(orig)))
        d = do_test(orig, 'POST')
        verify((d == expect), ('Error parsing %s' % repr(orig)))
        env = {'QUERY_STRING': orig, }
        fcd = cgi.FormContentDict(env)
        sd = cgi.SvFormContentDict(env)
        fs = cgi.FieldStorage(environ=env)
        if (type(expect) == type({})):
            verify((len(expect) == len(fcd)))
            verify((norm(expect.keys()) == norm(fcd.keys())))
            verify((norm(expect.values()) == norm(fcd.values())))
            verify((norm(expect.items()) == norm(fcd.items())))
            verify((fcd.get('nonexistent field', 'default') == 'default'))
            verify((len(sd) == len(fs)))
            verify((norm(sd.keys()) == norm(fs.keys())))
            verify((fs.getvalue('nonexistent field', 'default') == 'default'))
            for key in expect.keys():
                expect_val = expect[key]
                verify(fcd.has_key(key))
                verify((norm(fcd[key]) == norm(expect[key])))
                verify((fcd.get(key, 'default') == fcd[key]))
                verify(fs.has_key(key))
                if (len(expect_val) > 1):
                    single_value = 0
                else:
                    single_value = 1
                try:
                    val = sd[key]
                except IndexError:
                    verify((not single_value))
                    verify((fs.getvalue(key) == expect_val))
                else:
                    verify(single_value)
                    verify((val == expect_val[0]))
                    verify((fs.getvalue(key) == expect_val[0]))
                verify((norm(sd.getlist(key)) == norm(expect_val)))
                if single_value:
                    verify((norm(sd.values()) == first_elts(norm(expect.values()))))
                    verify((norm(sd.items()) == first_second_elts(norm(expect.items()))))
    env = {'QUERY_STRING': 'x=1&y=2.0&z=2-3.%2b0&1=1abc', }
    expect = {'x': 1, 'y': 2.0, 'z': '2-3.+0', '1': '1abc', }
    d = cgi.InterpFormContentDict(env)
    for (k, v) in expect.items():
        verify((d[k] == v))
    for (k, v) in d.items():
        verify((expect[k] == v))
    verify((norm(expect.values()) == norm(d.values())))
    print 'Testing log'
    cgi.log('Testing')
    cgi.logfp = sys.stdout
    cgi.initlog('%s', 'Testing initlog 1')
    cgi.log('%s', 'Testing log 2')
    if os.path.exists('/dev/null'):
        cgi.logfp = None
        cgi.logfile = '/dev/null'
        cgi.initlog('%s', 'Testing log 3')
        cgi.log('Testing log 4')
    print 'Test FieldStorage methods that use readline'


    class TestReadlineFile:

        def __init__(self, file):
            self.file = file
            self.numcalls = 0

        def readline(self, size=None):
            self.numcalls += 1
            if size:
                return self.file.readline(size)
            else:
                return self.file.readline()

        def __getattr__(self, name):
            file = self.__dict__['file']
            a = getattr(file, name)
            if (not isinstance(a, int)):
                setattr(self, name, a)
            return a
    f = TestReadlineFile(tempfile.TemporaryFile())
    f.write((('x' * 256) * 1024))
    f.seek(0)
    env = {'REQUEST_METHOD': 'PUT', }
    fs = cgi.FieldStorage(fp=f, environ=env)
    verify((f.numcalls > 2))
    print 'Test basic FieldStorage multipart parsing'
    env = {'REQUEST_METHOD': 'POST', 'CONTENT_TYPE': 'multipart/form-data; boundary=---------------------------721837373350705526688164684', 'CONTENT_LENGTH': '558', }
    postdata = '-----------------------------721837373350705526688164684\nContent-Disposition: form-data; name="id"\n\n1234\n-----------------------------721837373350705526688164684\nContent-Disposition: form-data; name="title"\n\n\n-----------------------------721837373350705526688164684\nContent-Disposition: form-data; name="file"; filename="test.txt"\nContent-Type: text/plain\n\nTesting 123.\n\n-----------------------------721837373350705526688164684\nContent-Disposition: form-data; name="submit"\n\n Add \n-----------------------------721837373350705526688164684--\n'
    fs = cgi.FieldStorage(fp=StringIO(postdata), environ=env)
    verify((len(fs.list) == 4))
    expect = [{'name': 'id', 'filename': None, 'value': '1234', }, {'name': 'title', 'filename': None, 'value': '', }, {'name': 'file', 'filename': 'test.txt', 'value': 'Testing 123.\n', }, {'name': 'submit', 'filename': None, 'value': ' Add ', }]
    for x in range(len(fs.list)):
        for (k, exp) in expect[x].items():
            got = getattr(fs.list[x], k)
            verify((got == exp))
