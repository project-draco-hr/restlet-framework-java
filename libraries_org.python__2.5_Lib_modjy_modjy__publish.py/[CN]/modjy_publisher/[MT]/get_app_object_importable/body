def get_app_object_importable(self, importable_name):
    self.log.debug(("Attempting to import application callable '%s'\n" % (importable_name,)))
    if (self.cache is None):
        (application, instantiable, method_name) = self.load_importable(importable_name.strip())
        if (instantiable and self.params['cache_callables']):
            application = application()
        self.cache = (application, instantiable, method_name)
    (application, instantiable, method_name) = self.cache
    self.log.debug(('Application is ' + str(application)))
    if (instantiable and (not self.params['cache_callables'])):
        application = application()
        self.log.debug(('Instantiated application is ' + str(application)))
    if (method_name is not None):
        if (not hasattr(application, method_name)):
            self.log.fatal(("Attribute error application callable '%s' as no method '%s'" % (application, method_name)))
            self.raise_exc(ApplicationNotFound, ("Attribute error application callable '%s' as no method '%s'" % (application, method_name)))
        application = getattr(application, method_name)
        self.log.debug(('Application method is ' + str(application)))
    return application
