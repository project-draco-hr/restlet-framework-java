def load_importable(self, name):
    try:
        instantiable = False
        method_name = None
        importable_name = name
        if (name.find('()') != (-1)):
            instantiable = True
            (importable_name, method_name) = name.split('()')
            if method_name.startswith('.'):
                method_name = method_name[1:]
            if (not method_name):
                method_name = None
        (module_path, from_name) = importable_name.rsplit('.', 1)
        imported = __import__(module_path, globals(), locals(), [from_name])
        imported = getattr(imported, from_name)
        return (imported, instantiable, method_name)
    except (ImportError, AttributeError) as aix:
        self.log.fatal(("Import error import application callable '%s': %s\n" % (name, str(aix))))
        self.raise_exc(ApplicationNotFound, ("Failed to import app callable '%s': %s" % (name, str(aix))))
