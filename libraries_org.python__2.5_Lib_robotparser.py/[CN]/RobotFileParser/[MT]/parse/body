def parse(self, lines):
    'parse the input lines from a robots.txt file.\n           We allow that a user-agent: line is not preceded by\n           one or more blank lines.'
    state = 0
    linenumber = 0
    entry = Entry()
    for line in lines:
        linenumber = (linenumber + 1)
        if (not line):
            if (state == 1):
                _debug(('line %d: warning: you should insert allow: or disallow: directives below any user-agent: line' % linenumber))
                entry = Entry()
                state = 0
            elif (state == 2):
                self._add_entry(entry)
                entry = Entry()
                state = 0
        i = line.find('#')
        if (i >= 0):
            line = line[:i]
        line = line.strip()
        if (not line):
            continue
        line = line.split(':', 1)
        if (len(line) == 2):
            line[0] = line[0].strip().lower()
            line[1] = urllib.unquote(line[1].strip())
            if (line[0] == 'user-agent'):
                if (state == 2):
                    _debug(('line %d: warning: you should insert a blank line before any user-agent directive' % linenumber))
                    self._add_entry(entry)
                    entry = Entry()
                entry.useragents.append(line[1])
                state = 1
            elif (line[0] == 'disallow'):
                if (state == 0):
                    _debug(('line %d: error: you must insert a user-agent: directive before this line' % linenumber))
                else:
                    entry.rulelines.append(RuleLine(line[1], False))
                    state = 2
            elif (line[0] == 'allow'):
                if (state == 0):
                    _debug(('line %d: error: you must insert a user-agent: directive before this line' % linenumber))
                else:
                    entry.rulelines.append(RuleLine(line[1], True))
            else:
                _debug(('line %d: warning: unknown key %s' % (linenumber, line[0])))
        else:
            _debug(('line %d: error: malformed line %s' % (linenumber, line)))
    if (state == 2):
        self.entries.append(entry)
    _debug(('Parsed rules:\n%s' % str(self)))
