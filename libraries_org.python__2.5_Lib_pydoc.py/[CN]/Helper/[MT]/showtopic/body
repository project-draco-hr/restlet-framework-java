def showtopic(self, topic):
    if (not self.docdir):
        self.output.write('\nSorry, topic and keyword documentation is not available because the Python\nHTML documentation files could not be found.  If you have installed them,\nplease set the environment variable PYTHONDOCS to indicate their location.\n\nOn the Microsoft Windows operating system, the files can be built by\nrunning "hh -decompile . PythonNN.chm" in the C:\\PythonNN\\Doc> directory.\n')
        return
    target = self.topics.get(topic, self.keywords.get(topic))
    if (not target):
        self.output.write(('no documentation found for %s\n' % repr(topic)))
        return
    if (type(target) is type('')):
        return self.showtopic(target)
    (filename, xrefs) = target
    filename = (((self.docdir + '/') + filename) + '.html')
    try:
        file = open(filename)
    except:
        self.output.write(('could not read docs from %s\n' % filename))
        return
    divpat = re.compile('<div[^>]*navigat.*?</div.*?>', (re.I | re.S))
    addrpat = re.compile('<address.*?>.*?</address.*?>', (re.I | re.S))
    document = re.sub(addrpat, '', re.sub(divpat, '', file.read()))
    file.close()
    import htmllib, formatter, StringIO
    buffer = StringIO.StringIO()
    parser = htmllib.HTMLParser(formatter.AbstractFormatter(formatter.DumbWriter(buffer)))
    parser.start_table = parser.do_p
    parser.end_table = (lambda parser=parser: parser.do_p({}))
    parser.start_tr = parser.do_br
    parser.start_td = parser.start_th = (lambda a, b=buffer: b.write('\t'))
    parser.feed(document)
    buffer = replace(buffer.getvalue(), '\xa0', ' ', '\n', '\n  ')
    pager((('  ' + strip(buffer)) + '\n'))
    if xrefs:
        buffer = StringIO.StringIO()
        formatter.DumbWriter(buffer).send_flowing_data((('Related help topics: ' + join(split(xrefs), ', ')) + '\n'))
        self.output.write(('\n%s\n' % buffer.getvalue()))
