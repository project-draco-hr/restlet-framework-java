{
  try {
    startComponent();
    String uri="http://localhost:" + TEST_PORT + "/test1";
    ClientResource resource=new ClientResource(uri);
    try {
      resource.get();
    }
 catch (    ResourceException e) {
    }
    resource.release();
    assertEquals(Status.CLIENT_ERROR_UNAUTHORIZED,resource.getStatus());
    resource.setChallengeResponse(new ChallengeResponse(ChallengeScheme.HTTP_BASIC,"stiger","pwd"));
    try {
      resource.get();
    }
 catch (    ResourceException e) {
    }
    resource.release();
    assertEquals(Status.SUCCESS_OK,resource.getStatus());
    uri="http://localhost:" + TEST_PORT + "/test2";
    resource=new ClientResource(uri);
    try {
      resource.get();
    }
 catch (    ResourceException e) {
    }
    resource.release();
    assertEquals(Status.SUCCESS_OK,resource.getStatus());
    uri="http://localhost:" + TEST_PORT + "/test3";
    resource=new ClientResource(uri);
    try {
      resource.get();
    }
 catch (    ResourceException e) {
    }
    resource.release();
    assertEquals(Status.CLIENT_ERROR_FORBIDDEN,resource.getStatus());
    uri="http://localhost:" + TEST_PORT + "/test4";
    resource=new ClientResource(uri);
    resource.setChallengeResponse(new ChallengeResponse(ChallengeScheme.HTTP_BASIC,"stiger","pwd"));
    try {
      resource.get();
    }
 catch (    ResourceException e) {
    }
    resource.release();
    assertEquals(Status.CLIENT_ERROR_FORBIDDEN,resource.getStatus());
    resource.setChallengeResponse(new ChallengeResponse(ChallengeScheme.HTTP_BASIC,"larmstrong","pwd"));
    try {
      resource.get();
    }
 catch (    ResourceException e) {
    }
    resource.release();
    assertEquals(Status.SUCCESS_OK,resource.getStatus());
    uri="http://localhost:" + TEST_PORT + "/test5";
    resource=new ClientResource(uri);
    resource.setChallengeResponse(new ChallengeResponse(ChallengeScheme.HTTP_BASIC,"stiger","pwd"));
    try {
      resource.get();
    }
 catch (    ResourceException e) {
    }
    resource.release();
    assertEquals(Status.SUCCESS_OK,resource.getStatus());
    resource.setChallengeResponse(new ChallengeResponse(ChallengeScheme.HTTP_BASIC,"larmstrong","pwd"));
    try {
      resource.get();
    }
 catch (    ResourceException e) {
    }
    resource.release();
    assertEquals(Status.CLIENT_ERROR_FORBIDDEN,resource.getStatus());
    stopServer();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
