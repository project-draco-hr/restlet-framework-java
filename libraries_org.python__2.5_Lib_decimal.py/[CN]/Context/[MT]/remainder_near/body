def remainder_near(self, a, b):
    'Returns to be "a - b * n", where n is the integer nearest the exact\n        value of "x / b" (if two integers are equally near then the even one\n        is chosen).  If the result is equal to 0 then its sign will be the\n        sign of a.\n\n        This operation will fail under the same conditions as integer division\n        (that is, if integer division on the same two operands would fail, the\n        remainder cannot be calculated).\n\n        >>> ExtendedContext.remainder_near(Decimal(\'2.1\'), Decimal(\'3\'))\n        Decimal("-0.9")\n        >>> ExtendedContext.remainder_near(Decimal(\'10\'), Decimal(\'6\'))\n        Decimal("-2")\n        >>> ExtendedContext.remainder_near(Decimal(\'10\'), Decimal(\'3\'))\n        Decimal("1")\n        >>> ExtendedContext.remainder_near(Decimal(\'-10\'), Decimal(\'3\'))\n        Decimal("-1")\n        >>> ExtendedContext.remainder_near(Decimal(\'10.2\'), Decimal(\'1\'))\n        Decimal("0.2")\n        >>> ExtendedContext.remainder_near(Decimal(\'10\'), Decimal(\'0.3\'))\n        Decimal("0.1")\n        >>> ExtendedContext.remainder_near(Decimal(\'3.6\'), Decimal(\'1.3\'))\n        Decimal("-0.3")\n        '
    return a.remainder_near(b, context=self)
