def next_toward(self, a, b):
    'Returns the number closest to a, in direction towards b.\n\n        The result is the closest representable number from the first\n        operand (but not the first operand) that is in the direction\n        towards the second operand, unless the operands have the same\n        value.\n\n        >>> c = ExtendedContext.copy()\n        >>> c.Emin = -999\n        >>> c.Emax = 999\n        >>> c.next_toward(Decimal(\'1\'), Decimal(\'2\'))\n        Decimal("1.00000001")\n        >>> c.next_toward(Decimal(\'-1E-1007\'), Decimal(\'1\'))\n        Decimal("-0E-1007")\n        >>> c.next_toward(Decimal(\'-1.00000003\'), Decimal(\'0\'))\n        Decimal("-1.00000002")\n        >>> c.next_toward(Decimal(\'1\'), Decimal(\'0\'))\n        Decimal("0.999999999")\n        >>> c.next_toward(Decimal(\'1E-1007\'), Decimal(\'-100\'))\n        Decimal("0E-1007")\n        >>> c.next_toward(Decimal(\'-1.00000003\'), Decimal(\'-10\'))\n        Decimal("-1.00000004")\n        >>> c.next_toward(Decimal(\'0.00\'), Decimal(\'-0.0000\'))\n        Decimal("-0.00")\n        '
    return a.next_toward(b, context=self)
