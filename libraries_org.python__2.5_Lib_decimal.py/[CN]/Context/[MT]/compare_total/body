def compare_total(self, a, b):
    'Compares two operands using their abstract representation.\n\n        This is not like the standard compare, which use their numerical\n        value. Note that a total ordering is defined for all possible abstract\n        representations.\n\n        >>> ExtendedContext.compare_total(Decimal(\'12.73\'), Decimal(\'127.9\'))\n        Decimal("-1")\n        >>> ExtendedContext.compare_total(Decimal(\'-127\'),  Decimal(\'12\'))\n        Decimal("-1")\n        >>> ExtendedContext.compare_total(Decimal(\'12.30\'), Decimal(\'12.3\'))\n        Decimal("-1")\n        >>> ExtendedContext.compare_total(Decimal(\'12.30\'), Decimal(\'12.30\'))\n        Decimal("0")\n        >>> ExtendedContext.compare_total(Decimal(\'12.3\'),  Decimal(\'12.300\'))\n        Decimal("1")\n        >>> ExtendedContext.compare_total(Decimal(\'12.3\'),  Decimal(\'NaN\'))\n        Decimal("-1")\n        '
    return a.compare_total(b)
