def compare_signal(self, other, context=None):
    "Compares self to the other operand numerically.\n\n        It's pretty much like compare(), but all NaNs signal, with signaling\n        NaNs taking precedence over quiet NaNs.\n        "
    if (context is None):
        context = getcontext()
    self_is_nan = self._isnan()
    other_is_nan = other._isnan()
    if (self_is_nan == 2):
        return context._raise_error(InvalidOperation, 'sNaN', self)
    if (other_is_nan == 2):
        return context._raise_error(InvalidOperation, 'sNaN', other)
    if self_is_nan:
        return context._raise_error(InvalidOperation, 'NaN in compare_signal', self)
    if other_is_nan:
        return context._raise_error(InvalidOperation, 'NaN in compare_signal', other)
    return self.compare(other, context=context)
