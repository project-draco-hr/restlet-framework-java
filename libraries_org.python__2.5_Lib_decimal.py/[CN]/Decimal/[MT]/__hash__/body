def __hash__(self):
    'x.__hash__() <==> hash(x)'
    if self._is_special:
        if self._isnan():
            raise TypeError('Cannot hash a NaN value.')
        return hash(str(self))
    if (not self):
        return 0
    if self._isinteger():
        op = _WorkRep(self.to_integral_value())
        return hash(((((-1) ** op.sign) * op.int) * (10 ** op.exp)))
    return hash((self._sign, (self._exp + len(self._int)), self._int.rstrip('0')))
