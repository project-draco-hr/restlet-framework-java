def com_assign(self, node, assigning):
    while 1:
        t = node[0]
        if (t in (symbol.exprlist, symbol.testlist, symbol.testlist_safe, symbol.testlist_gexp)):
            if (len(node) > 2):
                return self.com_assign_tuple(node, assigning)
            node = node[1]
        elif (t in _assign_types):
            if (len(node) > 2):
                raise SyntaxError, "can't assign to operator"
            node = node[1]
        elif (t == symbol.power):
            if (node[1][0] != symbol.atom):
                raise SyntaxError, "can't assign to operator"
            if (len(node) > 2):
                primary = self.com_node(node[1])
                for i in range(2, (len(node) - 1)):
                    ch = node[i]
                    if (ch[0] == token.DOUBLESTAR):
                        raise SyntaxError, "can't assign to operator"
                    primary = self.com_apply_trailer(primary, ch)
                return self.com_assign_trailer(primary, node[(-1)], assigning)
            node = node[1]
        elif (t == symbol.atom):
            t = node[1][0]
            if (t == token.LPAR):
                node = node[2]
                if (node[0] == token.RPAR):
                    raise SyntaxError, "can't assign to ()"
            elif (t == token.LSQB):
                node = node[2]
                if (node[0] == token.RSQB):
                    raise SyntaxError, "can't assign to []"
                return self.com_assign_list(node, assigning)
            elif (t == token.NAME):
                return self.com_assign_name(node[1], assigning)
            else:
                raise SyntaxError, "can't assign to literal"
        else:
            raise SyntaxError, ('bad assignment (%s)' % t)
