def test_callback_in_cycle_resurrection(self):
    import gc
    alist = []


    class C(object):

        def __init__(self, value):
            self.attribute = value

        def acallback(self, ignore):
            alist.append(self.c)
    (c1, c2) = (C(1), C(2))
    c1.c = c2
    c2.c = c1
    c1.wr = weakref.ref(c2, c1.acallback)
    c2.wr = weakref.ref(c1, c2.acallback)

    def C_went_away(ignore):
        alist.append('C went away')
    wr = weakref.ref(C, C_went_away)
    del c1, c2, C
    self.assertEqual(alist, [])
    gc.collect()
    self.assertEqual(alist, ['C went away'])
    self.assertEqual(wr(), None)
    del alist[:]
    gc.collect()
    self.assertEqual(alist, [])
