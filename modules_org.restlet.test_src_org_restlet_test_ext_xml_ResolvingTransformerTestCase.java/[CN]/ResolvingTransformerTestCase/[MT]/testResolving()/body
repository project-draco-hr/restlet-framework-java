{
  final Component comp=new Component();
  final Representation xml=new StringRepresentation("<?xml version='1.0'><simpleroot/>",MediaType.TEXT_XML);
  final Representation xslt=new StringRepresentation("<?xml version=\"1.0\"?>" + "<xsl:transform xmlns:xsl='http://www.w3.org/1999/XSL/Transform' version='1.0'>" + "<xsl:template match ='/'><newroot/></xsl:template></xsl:transform>",MediaType.TEXT_XML);
  final TransformRepresentation transRep=new TransformRepresentation(comp.getContext(),xml,xslt);
  final String testCode="rnd." + (new Random()).nextInt();
  final String testData="\"The resolver is doing OK\", said the testclass " + MY_NAME + ".";
  final Representation testRep=new StringRepresentation(testData);
  final SimpleUriMapApplication testApp=new SimpleUriMapApplication();
  testApp.add(testCode,testRep);
  comp.getInternalRouter().attach("/testApp/",testApp);
  final String testBase="riap://component/testApp";
  final URIResolver uriResolver=transRep.getUriResolver();
  assertNotNull("no resolver present!",uriResolver);
  final String baseUri=testBase + "/dummy";
  final AssertResolvingHelper test=new AssertResolvingHelper(baseUri,uriResolver);
  final String absoluteUri=testBase + "/" + testCode;
  test.assertResolving("error in absolute resolving.",absoluteUri,testData);
  final String relUri=testCode;
  test.assertResolving("error in relative resolving.",relUri,testData);
  final String relLocalUri="./" + testCode;
  test.assertResolving("error in relative resolving to ./",relLocalUri,testData);
  final String relParentUri="../testApp/" + testCode;
  test.assertResolving("error in relative resolving to ../",relParentUri,testData);
}
