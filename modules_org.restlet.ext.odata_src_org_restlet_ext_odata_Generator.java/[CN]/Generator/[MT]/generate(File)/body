{
  Service service=new Service(serviceRef);
  Metadata metadata=(Metadata)service.getMetadata();
  if (metadata == null) {
    throw new Exception("Can't get the metadata for this service: " + serviceRef);
  }
  Configuration fmc=new Configuration();
  fmc.setDefaultEncoding(CharacterSet.UTF_8.getName());
  String rootTemplates="clap://class/org/restlet/ext/odata/internal/templates";
  Representation complexTmpl=new StringRepresentation(new ClientResource(rootTemplates + "/complexType.ftl").get().getText());
  Representation entityTmpl=new StringRepresentation(new ClientResource(rootTemplates + "/entityType.ftl").get().getText());
  Representation serviceTmpl=new StringRepresentation(new ClientResource(rootTemplates + "/service.ftl").get().getText());
  for (  Schema schema : metadata.getSchemas()) {
    if ((schema.getEntityTypes() != null && !schema.getEntityTypes().isEmpty()) || (schema.getComplexTypes() != null && !schema.getComplexTypes().isEmpty())) {
      String packageName=TypeUtils.getPackageName(schema);
      File packageDir=new File(outputDir,packageName.replace(".",System.getProperty("file.separator")));
      packageDir.mkdirs();
      for (      EntityType type : schema.getEntityTypes()) {
        String className=type.getClassName();
        Map<String,Object> dataModel=new HashMap<String,Object>();
        dataModel.put("type",type);
        dataModel.put("schema",schema);
        dataModel.put("metadata",metadata);
        dataModel.put("className",className);
        dataModel.put("packageName",packageName);
        TemplateRepresentation templateRepresentation=new TemplateRepresentation(entityTmpl,fmc,dataModel,MediaType.TEXT_PLAIN);
        templateRepresentation.setCharacterSet(CharacterSet.UTF_8);
        OutputStream fos=new FileOutputStream(new File(packageDir,type.getClassName() + ".java"));
        templateRepresentation.write(fos);
        fos.flush();
      }
      for (      ComplexType type : schema.getComplexTypes()) {
        String className=type.getClassName();
        Map<String,Object> dataModel=new HashMap<String,Object>();
        dataModel.put("type",type);
        dataModel.put("schema",schema);
        dataModel.put("metadata",metadata);
        dataModel.put("className",className);
        dataModel.put("packageName",packageName);
        TemplateRepresentation templateRepresentation=new TemplateRepresentation(complexTmpl,fmc,dataModel,MediaType.TEXT_PLAIN);
        templateRepresentation.setCharacterSet(CharacterSet.UTF_8);
        OutputStream fos=new FileOutputStream(new File(packageDir,type.getClassName() + ".java"));
        templateRepresentation.write(fos);
        fos.flush();
      }
    }
  }
  if (metadata.getContainers() != null && !metadata.getContainers().isEmpty()) {
    for (    EntityContainer entityContainer : metadata.getContainers()) {
      Schema schema=entityContainer.getSchema();
      StringBuffer className=new StringBuffer();
      if (serviceClassName != null) {
        if (entityContainer.isDefaultEntityContainer()) {
          className.append(serviceClassName);
        }
 else         if (metadata.getContainers().size() == 1) {
          className.append(serviceClassName);
        }
 else {
          className.append(schema.getNamespace().getNormalizedName().substring(0,1).toUpperCase());
          className.append(schema.getNamespace().getNormalizedName().substring(1));
          className.append("Service");
        }
      }
 else {
        className.append(schema.getNamespace().getNormalizedName().substring(0,1).toUpperCase());
        className.append(schema.getNamespace().getNormalizedName().substring(1));
        className.append("Service");
      }
      Map<String,Object> dataModel=new HashMap<String,Object>();
      dataModel.put("schema",schema);
      dataModel.put("metadata",metadata);
      dataModel.put("className",className);
      dataModel.put("dataServiceUri",this.serviceRef.getTargetRef());
      dataModel.put("entityContainer",entityContainer);
      TemplateRepresentation templateRepresentation=new TemplateRepresentation(serviceTmpl,fmc,dataModel,MediaType.TEXT_PLAIN);
      templateRepresentation.setCharacterSet(CharacterSet.UTF_8);
      OutputStream fos=new FileOutputStream(new File(outputDir,className + ".java"));
      templateRepresentation.write(fos);
      fos.flush();
    }
  }
}
