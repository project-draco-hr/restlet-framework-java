def _read_comm_chunk(self, chunk):
    self._nchannels = _read_short(chunk)
    self._nframes = _read_long(chunk)
    self._sampwidth = ((_read_short(chunk) + 7) / 8)
    self._framerate = int(_read_float(chunk))
    self._framesize = (self._nchannels * self._sampwidth)
    if self._aifc:
        kludge = 0
        if (chunk.chunksize == 18):
            kludge = 1
            print 'Warning: bad COMM chunk size'
            chunk.chunksize = 23
        self._comptype = chunk.read(4)
        if kludge:
            length = ord(chunk.file.read(1))
            if ((length & 1) == 0):
                length = (length + 1)
            chunk.chunksize = (chunk.chunksize + length)
            chunk.file.seek((-1), 1)
        self._compname = _read_string(chunk)
        if (self._comptype != 'NONE'):
            if (self._comptype == 'G722'):
                try:
                    import audioop
                except ImportError:
                    pass
                else:
                    self._convert = self._adpcm2lin
                    self._framesize = (self._framesize / 4)
                    return
            try:
                import cl
            except ImportError:
                if (self._comptype == 'ULAW'):
                    try:
                        import audioop
                        self._convert = self._ulaw2lin
                        self._framesize = (self._framesize / 2)
                        return
                    except ImportError:
                        pass
                raise Error, 'cannot read compressed AIFF-C files'
            if (self._comptype == 'ULAW'):
                scheme = cl.G711_ULAW
                self._framesize = (self._framesize / 2)
            elif (self._comptype == 'ALAW'):
                scheme = cl.G711_ALAW
                self._framesize = (self._framesize / 2)
            else:
                raise Error, 'unsupported compression type'
            self._decomp = cl.OpenDecompressor(scheme)
            self._convert = self._decomp_data
    else:
        self._comptype = 'NONE'
        self._compname = 'not compressed'
