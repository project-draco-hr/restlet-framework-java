{
  ApiDeclaration result=new ApiDeclaration();
  result.setApiVersion(definition.getVersion());
  Endpoint endpoint;
  if (!definition.getEndpoints().isEmpty()) {
    endpoint=definition.getEndpoints().get(0);
    result.setBasePath(endpoint.computeUrl());
  }
 else {
    endpoint=new Endpoint("http://example.com");
  }
  AuthorizationsDeclaration authorizations=new AuthorizationsDeclaration();
  if (ChallengeScheme.HTTP_BASIC.equals((endpoint.getAuthenticationProtocol()))) {
    authorizations.setBasicAuth(new BasicAuthorizationDeclaration());
  }
 else   if (ChallengeScheme.HTTP_OAUTH.equals((endpoint.getAuthenticationProtocol())) || ChallengeScheme.HTTP_OAUTH_BEARER.equals((endpoint.getAuthenticationProtocol())) || ChallengeScheme.HTTP_OAUTH_MAC.equals((endpoint.getAuthenticationProtocol()))) {
    authorizations.setOauth2(new OAuth2AuthorizationDeclaration());
  }
  result.setInfo(new ApiInfo());
  result.setSwaggerVersion(SWAGGER_VERSION);
  result.setResourcePath("/" + sectionName);
  Set<String> usedModels=new HashSet<String>();
  Section section=definition.getContract().getSection(Section.DEFAULT);
  if (section == null) {
    section=new Section();
  }
  Contract contract=definition.getContract();
  for (  Resource resource : contract.getResources()) {
    if (!resource.getResourcePath().startsWith("/" + sectionName)) {
      continue;
    }
    ResourceDeclaration rd=new ResourceDeclaration();
    rd.setPath(resource.getResourcePath());
    rd.setDescription(resource.getDescription());
    for (    Operation operation : resource.getOperations()) {
      ResourceOperationDeclaration rod=new ResourceOperationDeclaration();
      rod.setMethod(operation.getMethod());
      rod.setSummary(operation.getDescription());
      rod.setNickname(operation.getName());
      rod.setProduces(operation.getProduces());
      rod.setConsumes(operation.getConsumes());
      ResourceOperationParameterDeclaration ropd;
      for (      PathVariable pv : resource.getPathVariables()) {
        ropd=new ResourceOperationParameterDeclaration();
        ropd.setParamType("path");
        ropd.setType(toSwaggerType(pv.getType()));
        ropd.setRequired(true);
        ropd.setName(pv.getName());
        ropd.setAllowMultiple(false);
        ropd.setDescription(pv.getDescription());
        rod.getParameters().add(ropd);
      }
      PayLoad inRepr=operation.getInputPayLoad();
      if (inRepr != null) {
        ropd=new ResourceOperationParameterDeclaration();
        ropd.setParamType("body");
        ropd.setRequired(true);
        if ("Representation".equals(inRepr.getType())) {
          ropd.setType("File");
        }
 else {
          ropd.setType(toSwaggerType(inRepr.getType()));
        }
        if (inRepr.getType() != null) {
          usedModels.add(inRepr.getType());
        }
        rod.getParameters().add(ropd);
      }
      PayLoad outRepr=null;
      for (      Response response : operation.getResponses()) {
        if (Status.isSuccess(response.getCode())) {
          outRepr=response.getEntity();
        }
      }
      if (outRepr != null && outRepr.getType() != null) {
        if (outRepr.isArray()) {
          rod.setType("array");
          if (isPrimitiveType(outRepr.getType())) {
            rod.getItems().setType(toSwaggerType(outRepr.getType()));
          }
 else {
            rod.getItems().setRef(outRepr.getType());
          }
        }
 else {
          rod.setType(toSwaggerType(outRepr.getType()));
        }
        usedModels.add(outRepr.getType());
      }
 else {
        rod.setType("void");
      }
      for (      QueryParameter qp : operation.getQueryParameters()) {
        ropd=new ResourceOperationParameterDeclaration();
        ropd.setParamType("query");
        ropd.setType(toSwaggerType(qp.getType()));
        ropd.setName(qp.getName());
        ropd.setAllowMultiple(true);
        ropd.setDescription(qp.getDescription());
        ropd.setEnum_(qp.getEnumeration());
        ropd.setDefaultValue(qp.getDefaultValue());
        rod.getParameters().add(ropd);
      }
      for (      Response response : operation.getResponses()) {
        if (Status.isSuccess(response.getCode())) {
          continue;
        }
        ResponseMessageDeclaration rmd=new ResponseMessageDeclaration();
        rmd.setCode(response.getCode());
        rmd.setMessage(response.getMessage());
        if (response.getEntity() != null) {
          rmd.setResponseModel(response.getEntity().getType());
        }
        rod.getResponseMessages().add(rmd);
      }
      rd.getOperations().add(rod);
    }
    result.getApis().add(rd);
  }
  result.setModels(new TreeMap<String,ModelDeclaration>());
  Iterator<String> iterator=usedModels.iterator();
  while (iterator.hasNext()) {
    String model=iterator.next();
    Representation repr=contract.getRepresentation(model);
    if (repr == null || isPrimitiveType(model)) {
      continue;
    }
    ModelDeclaration md=new ModelDeclaration();
    md.setId(model);
    md.setDescription(repr.getDescription());
    for (    Property prop : repr.getProperties()) {
      if (prop.getMinOccurs() > 0) {
        md.getRequired().add(prop.getName());
      }
      if (!isPrimitiveType(prop.getType()) && !usedModels.contains(prop.getType())) {
        usedModels.add(prop.getType());
        iterator=usedModels.iterator();
      }
      TypePropertyDeclaration tpd=new TypePropertyDeclaration();
      tpd.setDescription(prop.getDescription());
      tpd.setEnum_(prop.getEnumeration());
      if (prop.getMaxOccurs() > 1 || prop.getMaxOccurs() == -1) {
        tpd.setType("array");
        tpd.setItems(new ItemsDeclaration());
        if (isPrimitiveType(prop.getType())) {
          tpd.getItems().setType(toSwaggerType(prop.getType()));
        }
 else {
          tpd.getItems().setRef(prop.getType());
        }
      }
 else {
        if (isPrimitiveType(prop.getType())) {
          tpd.setType(toSwaggerType(prop.getType()));
        }
 else {
          tpd.setRef(prop.getType());
        }
      }
      tpd.setMaximum(prop.getMax());
      tpd.setMinimum(prop.getMin());
      tpd.setUniqueItems(prop.isUniqueItems());
      md.getProperties().put(prop.getName(),tpd);
    }
    result.getModels().put(md.getId(),md);
  }
  Collections.sort(result.getApis(),new Comparator<ResourceDeclaration>(){
    @Override public int compare(    ResourceDeclaration o1,    ResourceDeclaration o2){
      return o1.getPath().compareTo(o2.getPath());
    }
  }
);
  return result;
}
