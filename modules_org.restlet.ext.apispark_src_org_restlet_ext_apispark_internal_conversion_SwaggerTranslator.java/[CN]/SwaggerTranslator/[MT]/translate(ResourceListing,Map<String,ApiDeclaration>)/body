{
  validate(resourceListing,apiDeclarations);
  boolean containsRawTypes=false;
  List<String> declaredTypes=new ArrayList<String>();
  List<String> declaredPathVariables;
  Map<String,List<String>> subtypes=new HashMap<String,List<String>>();
  try {
    Definition definition=new Definition();
    definition.setVersion(resourceListing.getApiVersion());
    definition.setContact(resourceListing.getInfo().getContact());
    definition.setLicense(resourceListing.getInfo().getLicenseUrl());
    Contract contract=new Contract();
    contract.setName(resourceListing.getInfo().getTitle());
    LOGGER.log(Level.FINE,"Contract " + contract.getName() + " added.");
    contract.setDescription(resourceListing.getInfo().getDescription());
    definition.setContract(contract);
    Resource resource;
    for (    Entry<String,ApiDeclaration> entry : apiDeclarations.entrySet()) {
      ApiDeclaration swagApiDeclaration=entry.getValue();
      List<String> apiProduces=swagApiDeclaration.getProduces();
      List<String> apiConsumes=swagApiDeclaration.getConsumes();
      for (      ResourceDeclaration api : swagApiDeclaration.getApis()) {
        declaredPathVariables=new ArrayList<String>();
        resource=new Resource();
        resource.setResourcePath(api.getPath());
        Operation operation;
        for (        ResourceOperationDeclaration swagOperation : api.getOperations()) {
          String methodName=swagOperation.getMethod();
          operation=new Operation();
          operation.setMethod(swagOperation.getMethod());
          operation.setName(swagOperation.getNickname());
          operation.setDescription(swagOperation.getSummary());
          Representation representation;
          for (          String produced : apiProduces.isEmpty() ? swagOperation.getProduces() : apiProduces) {
            if (!containsRawTypes && MediaType.MULTIPART_FORM_DATA.getName().equals(produced)) {
              representation=new Representation();
              representation.setName("File");
              representation.setRaw(true);
              containsRawTypes=true;
              contract.getRepresentations().add(representation);
            }
            operation.getProduces().add(produced);
          }
          for (          String consumed : apiConsumes.isEmpty() ? swagOperation.getConsumes() : apiConsumes) {
            if (!containsRawTypes && MediaType.MULTIPART_FORM_DATA.getName().equals(consumed)) {
              representation=new Representation();
              representation.setName("File");
              representation.setRaw(true);
              containsRawTypes=true;
              contract.getRepresentations().add(representation);
            }
            operation.getConsumes().add(consumed);
          }
          Entity rwadOutRepr=new Entity();
          if ("array".equals(swagOperation.getType())) {
            LOGGER.log(Level.FINER,"Operation: " + swagOperation.getNickname() + " returns an array");
            rwadOutRepr.setArray(true);
            if (swagOperation.getItems().getType() != null) {
              rwadOutRepr.setType(swagOperation.getItems().getType());
            }
 else {
              rwadOutRepr.setType(swagOperation.getItems().getRef());
            }
          }
 else {
            LOGGER.log(Level.FINER,"Operation: " + swagOperation.getNickname() + " returns a single Representation");
            rwadOutRepr.setArray(false);
            if (swagOperation.getType() != null) {
              rwadOutRepr.setType(swagOperation.getType());
            }
 else {
              rwadOutRepr.setType(swagOperation.getRef());
            }
          }
          operation.setOutRepresentation(rwadOutRepr);
          Response success=new Response();
          success.setCode(Status.SUCCESS_OK.getCode());
          success.setEntity(rwadOutRepr);
          success.setDescription("Success");
          success.setMessage(Status.SUCCESS_OK.getDescription());
          success.setName("Success");
          operation.getResponses().add(success);
          for (          ResourceOperationParameterDeclaration param : swagOperation.getParameters()) {
            if ("path".equals(param.getParamType())) {
              if (!declaredPathVariables.contains(param.getName())) {
                declaredPathVariables.add(param.getName());
                PathVariable pathVariable=toPathVariable(param);
                resource.getPathVariables().add(pathVariable);
              }
            }
 else             if ("body".equals(param.getParamType())) {
              if (operation.getInRepresentation() == null) {
                Entity rwadInRepr=toEntity(param);
                operation.setInRepresentation(rwadInRepr);
              }
            }
 else             if ("query".equals(param.getParamType())) {
              QueryParameter rwadQueryParam=toQueryParameter(param);
              operation.getQueryParameters().add(rwadQueryParam);
            }
          }
          if (swagOperation.getResponseMessages() != null) {
            for (            ResponseMessageDeclaration swagResponse : swagOperation.getResponseMessages()) {
              Response response=new Response();
              Entity entity=new Entity();
              entity.setType(swagResponse.getResponseModel());
              response.setEntity(entity);
              response.setName("Error " + swagResponse.getCode());
              response.setCode(swagResponse.getCode());
              response.setMessage(swagResponse.getMessage());
              operation.getResponses().add(response);
            }
          }
          resource.getOperations().add(operation);
          LOGGER.log(Level.FINE,"Method " + methodName + " added.");
          for (          Entry<String,ModelDeclaration> modelEntry : swagApiDeclaration.getModels().entrySet()) {
            ModelDeclaration model=modelEntry.getValue();
            if (model.getSubTypes() != null && !model.getSubTypes().isEmpty()) {
              subtypes.put(model.getId(),model.getSubTypes());
            }
            if (!declaredTypes.contains(modelEntry.getKey())) {
              declaredTypes.add(modelEntry.getKey());
              Representation rwadRepr=toRepresentation(model,modelEntry.getKey());
              contract.getRepresentations().add(rwadRepr);
              LOGGER.log(Level.FINE,"Representation " + modelEntry.getKey() + " added.");
            }
          }
          for (          Entry<String,List<String>> subtypesPair : subtypes.entrySet()) {
            List<String> subtypesOf=subtypesPair.getValue();
            for (            String subtypeOf : subtypesOf) {
              Representation repr=getRepresentationByName(contract,subtypeOf);
              repr.setExtendedType(subtypesPair.getKey());
            }
          }
        }
        definition.getContract().getResources().add(resource);
        LOGGER.log(Level.FINE,"Resource " + api.getPath() + " added.");
      }
      if (definition.getEndpoints().isEmpty()) {
        definition.getEndpoints().add(new Endpoint(swagApiDeclaration.getBasePath()));
      }
    }
    LOGGER.log(Level.FINE,"Definition successfully retrieved from Swagger definition");
    return definition;
  }
 catch (  Exception e) {
    if (e instanceof FileNotFoundException) {
      throw new TranslationException("file",((FileNotFoundException)e).getMessage());
    }
 else {
      throw new TranslationException("compliance","Impossible to read your API definition, check your Swagger specs compliance");
    }
  }
}
