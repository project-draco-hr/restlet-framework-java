def test_count(self):
    self.checkequal(3, 'aaa', 'count', 'a')
    self.checkequal(0, 'aaa', 'count', 'b')
    self.checkequal(3, 'aaa', 'count', 'a')
    self.checkequal(0, 'aaa', 'count', 'b')
    self.checkequal(3, 'aaa', 'count', 'a')
    self.checkequal(0, 'aaa', 'count', 'b')
    self.checkequal(0, 'aaa', 'count', 'b')
    self.checkequal(2, 'aaa', 'count', 'a', 1)
    self.checkequal(0, 'aaa', 'count', 'a', 10)
    self.checkequal(1, 'aaa', 'count', 'a', (-1))
    self.checkequal(3, 'aaa', 'count', 'a', (-10))
    self.checkequal(1, 'aaa', 'count', 'a', 0, 1)
    self.checkequal(3, 'aaa', 'count', 'a', 0, 10)
    self.checkequal(2, 'aaa', 'count', 'a', 0, (-1))
    self.checkequal(0, 'aaa', 'count', 'a', 0, (-10))
    self.checkequal(3, 'aaa', 'count', '', 1)
    self.checkequal(1, 'aaa', 'count', '', 3)
    self.checkequal(0, 'aaa', 'count', '', 10)
    self.checkequal(2, 'aaa', 'count', '', (-1))
    self.checkequal(4, 'aaa', 'count', '', (-10))
    self.checkraises(TypeError, 'hello', 'count')
    self.checkraises(TypeError, 'hello', 'count', 42)
    charset = ['', 'a', 'b']
    digits = 7
    base = len(charset)
    teststrings = set()
    for i in xrange((base ** digits)):
        entry = []
        for j in xrange(digits):
            (i, m) = divmod(i, base)
            entry.append(charset[m])
        teststrings.add(''.join(entry))
    teststrings = list(teststrings)
    for i in teststrings:
        i = self.fixtype(i)
        n = len(i)
        for j in teststrings:
            r1 = i.count(j)
            if j:
                (r2, rem) = divmod((n - len(i.replace(j, ''))), len(j))
            else:
                (r2, rem) = ((len(i) + 1), 0)
            if (rem or (r1 != r2)):
                self.assertEqual(rem, 0, ('%s != 0 for %s' % (rem, i)))
                self.assertEqual(r1, r2, ('%s != %s for %s' % (r1, r2, i)))
