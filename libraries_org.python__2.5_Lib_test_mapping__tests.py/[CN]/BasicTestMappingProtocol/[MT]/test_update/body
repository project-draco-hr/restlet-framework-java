def test_update(self):
    d = self._empty_mapping()
    d.update(self.other)
    self.assertEqual(d.items(), self.other.items())
    d = self._empty_mapping()
    d.update()
    self.assertEqual(d, self._empty_mapping())
    d = self._empty_mapping()
    d.update(self.other.items())
    self.assertEqual(d.items(), self.other.items())
    d = self._empty_mapping()
    d.update(self.other.iteritems())
    self.assertEqual(d.items(), self.other.items())
    self.assertRaises((TypeError, AttributeError), d.update, 42)
    outerself = self


    class SimpleUserDict:

        def __init__(self):
            self.d = outerself.reference

        def keys(self):
            return self.d.keys()

        def __getitem__(self, i):
            return self.d[i]
    d.clear()
    d.update(SimpleUserDict())
    i1 = d.items()
    i2 = self.reference.items()
    i1.sort()
    i2.sort()
    self.assertEqual(i1, i2)


    class Exc(Exception):
        pass
    d = self._empty_mapping()


    class FailingUserDict:

        def keys(self):
            raise Exc
    self.assertRaises(Exc, d.update, FailingUserDict())
    d.clear()


    class FailingUserDict:

        def keys(self):


            class BogonIter:

                def __init__(self):
                    self.i = 1

                def __iter__(self):
                    return self

                def next(self):
                    if self.i:
                        self.i = 0
                        return 'a'
                    raise Exc
            return BogonIter()

        def __getitem__(self, key):
            return key
    self.assertRaises(Exc, d.update, FailingUserDict())


    class FailingUserDict:

        def keys(self):


            class BogonIter:

                def __init__(self):
                    self.i = ord('a')

                def __iter__(self):
                    return self

                def next(self):
                    if (self.i <= ord('z')):
                        rtn = chr(self.i)
                        self.i += 1
                        return rtn
                    raise StopIteration
            return BogonIter()

        def __getitem__(self, key):
            raise Exc
    self.assertRaises(Exc, d.update, FailingUserDict())
    d = self._empty_mapping()


    class badseq(object):

        def __iter__(self):
            return self

        def next(self):
            raise Exc()
    self.assertRaises(Exc, d.update, badseq())
    self.assertRaises(ValueError, d.update, [(1, 2, 3)])
