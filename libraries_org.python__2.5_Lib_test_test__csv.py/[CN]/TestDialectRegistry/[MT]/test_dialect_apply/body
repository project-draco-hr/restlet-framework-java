def test_dialect_apply(self):


    class testA(csv.excel):
        delimiter = '\t'


    class testB(csv.excel):
        delimiter = ':'


    class testC(csv.excel):
        delimiter = '|'
    csv.register_dialect('testC', testC)
    try:
        (fd, name) = tempfile.mkstemp()
        fileobj = os.fdopen(fd, 'w+b')
        try:
            writer = csv.writer(fileobj)
            writer.writerow([1, 2, 3])
            fileobj.seek(0)
            self.assertEqual(fileobj.read(), '1,2,3\r\n')
        finally:
            fileobj.close()
            os.unlink(name)
        (fd, name) = tempfile.mkstemp()
        fileobj = os.fdopen(fd, 'w+b')
        try:
            writer = csv.writer(fileobj, testA)
            writer.writerow([1, 2, 3])
            fileobj.seek(0)
            self.assertEqual(fileobj.read(), '1\t2\t3\r\n')
        finally:
            fileobj.close()
            os.unlink(name)
        (fd, name) = tempfile.mkstemp()
        fileobj = os.fdopen(fd, 'w+b')
        try:
            writer = csv.writer(fileobj, dialect=testB())
            writer.writerow([1, 2, 3])
            fileobj.seek(0)
            self.assertEqual(fileobj.read(), '1:2:3\r\n')
        finally:
            fileobj.close()
            os.unlink(name)
        (fd, name) = tempfile.mkstemp()
        fileobj = os.fdopen(fd, 'w+b')
        try:
            writer = csv.writer(fileobj, dialect='testC')
            writer.writerow([1, 2, 3])
            fileobj.seek(0)
            self.assertEqual(fileobj.read(), '1|2|3\r\n')
        finally:
            fileobj.close()
            os.unlink(name)
        (fd, name) = tempfile.mkstemp()
        fileobj = os.fdopen(fd, 'w+b')
        try:
            writer = csv.writer(fileobj, dialect=testA, delimiter=';')
            writer.writerow([1, 2, 3])
            fileobj.seek(0)
            self.assertEqual(fileobj.read(), '1;2;3\r\n')
        finally:
            fileobj.close()
            os.unlink(name)
    finally:
        csv.unregister_dialect('testC')
