import sys
import os
import unittest
from StringIO import StringIO
import tempfile
import csv
import gc
from test import test_support
if (not hasattr(sys, 'gettotalrefcount')):
    if test_support.verbose:
        print '*** skipping leakage tests ***'
else:


    class NUL:

        def write(s, *args):
            pass
        writelines = write


    class TestLeaks(unittest.TestCase):

        def test_create_read(self):
            delta = 0
            lastrc = sys.gettotalrefcount()
            for i in xrange(20):
                gc.collect()
                self.assertEqual(gc.garbage, [])
                rc = sys.gettotalrefcount()
                csv.reader(['a,b,c\r\n'])
                csv.reader(['a,b,c\r\n'])
                csv.reader(['a,b,c\r\n'])
                delta = (rc - lastrc)
                lastrc = rc
            self.assertEqual((delta < 3), True)

        def test_create_write(self):
            delta = 0
            lastrc = sys.gettotalrefcount()
            s = NUL()
            for i in xrange(20):
                gc.collect()
                self.assertEqual(gc.garbage, [])
                rc = sys.gettotalrefcount()
                csv.writer(s)
                csv.writer(s)
                csv.writer(s)
                delta = (rc - lastrc)
                lastrc = rc
            self.assertEqual((delta < 3), True)

        def test_read(self):
            delta = 0
            rows = (['a,b,c\r\n'] * 5)
            lastrc = sys.gettotalrefcount()
            for i in xrange(20):
                gc.collect()
                self.assertEqual(gc.garbage, [])
                rc = sys.gettotalrefcount()
                rdr = csv.reader(rows)
                for row in rdr:
                    pass
                delta = (rc - lastrc)
                lastrc = rc
            self.assertEqual((delta < 5), True)

        def test_write(self):
            delta = 0
            rows = ([[1, 2, 3]] * 5)
            s = NUL()
            lastrc = sys.gettotalrefcount()
            for i in xrange(20):
                gc.collect()
                self.assertEqual(gc.garbage, [])
                rc = sys.gettotalrefcount()
                writer = csv.writer(s)
                for row in rows:
                    writer.writerow(row)
                delta = (rc - lastrc)
                lastrc = rc
            self.assertEqual((delta < 5), True)
if (__name__ == '__main__'):
    test_main()
