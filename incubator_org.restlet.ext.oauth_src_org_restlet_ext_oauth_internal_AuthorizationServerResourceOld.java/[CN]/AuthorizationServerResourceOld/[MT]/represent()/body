{
  Form params=getQuery();
  String sessionId=getCookies().getFirstValue(ClientCookieID);
  getLogger().info("sessionId = " + sessionId);
  ConcurrentMap<String,Object> attribs=getContext().getAttributes();
  AuthSession session=(sessionId == null) ? null : (AuthSession)attribs.get(sessionId);
  String id=(String)getContext().getAttributes().get(ID);
  getLogger().info("id = " + id);
  getLogger().info("session = " + session);
  if (session != null)   getLogger().info("client = " + session.getClient());
 else {
    getCookieSettings().removeAll(ClientCookieID);
  }
  if (id != null && session != null && session.getClient() != null) {
    getLogger().info("After Authentication - cleanup");
    params.removeFirst(OPENID);
    Client client=(Client)session.getClient();
    getLogger().info("Found client = " + client);
    session.setScopeOwner(id);
    return doPostAuthenticate(session,client);
  }
  String typeString=params.getFirstValue(RESPONSE_TYPE);
  getLogger().info("In service type = " + typeString);
  try {
    ResponseType type=Enum.valueOf(ResponseType.class,typeString);
    getLogger().info("Found flow - " + type);
    if (Method.GET.equals(getMethod())) {
      doGet(type,session);
    }
 else     setStatus(Status.CLIENT_ERROR_METHOD_NOT_ALLOWED);
  }
 catch (  IllegalArgumentException iae) {
    sendError(sessionId,OAuthError.UNSUPPORTED_RESPONSE_TYPE,params.getFirstValue(STATE),"Unsupported flow",null);
    getLogger().log(Level.WARNING,"Error in execution.",iae);
  }
catch (  NullPointerException npe) {
    sendError(sessionId,OAuthError.INVALID_REQUEST,params.getFirstValue(STATE),"No response_type parameter found.",null);
  }
  return getResponseEntity();
}
