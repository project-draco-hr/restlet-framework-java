{
  String certAlgorithm=getCertAlgorithm();
  String keystorePath=getKeystorePath();
  String keystorePassword=getKeystorePassword();
  String keyPassword=getKeyPassword();
  String truststoreType=getTruststoreType();
  String truststorePath=getTruststorePath();
  String truststorePassword=getTruststorePassword();
  String secureRandomAlgorithm=getSecureRandomAlgorithm();
  String securityProvider=getSecurityProvider();
  InputStream keystoreInputStream=null;
  if (keystorePath != null) {
    keystoreInputStream=new FileInputStream(keystorePath);
  }
  KeyStore keystore=KeyStore.getInstance(getKeystoreType());
  if (keystoreInputStream != null) {
    try {
      keystore.load(keystoreInputStream,keystorePassword == null ? null : keystorePassword.toCharArray());
    }
 catch (    IOException ioe) {
      getLogger().log(Level.WARNING,"Unable to load the keystore",ioe);
      keystore=null;
    }
  }
  KeyManager[] keyManagers=null;
  if (keystore != null) {
    KeyManagerFactory keyManagerFactory=KeyManagerFactory.getInstance(certAlgorithm);
    keyManagerFactory.init(keystore,keyPassword == null ? null : keyPassword.toCharArray());
    keyManagers=keyManagerFactory.getKeyManagers();
  }
  InputStream truststoreInputStream=null;
  if (truststorePath != null) {
    truststoreInputStream=new FileInputStream(truststorePath);
  }
  KeyStore truststore=null;
  if (truststoreType != null) {
    truststore=KeyStore.getInstance(truststoreType);
    truststore.load(truststoreInputStream,truststorePassword == null ? null : truststorePassword.toCharArray());
  }
  TrustManager[] trustManagers=null;
  if (truststore != null) {
    TrustManagerFactory trustManagerFactory=TrustManagerFactory.getInstance(certAlgorithm);
    trustManagerFactory.init(truststore);
    trustManagers=trustManagerFactory.getTrustManagers();
  }
  SecureRandom secureRandom=secureRandomAlgorithm == null ? null : SecureRandom.getInstance(secureRandomAlgorithm);
  SSLContext context=securityProvider == null ? SSLContext.getInstance(getSslProtocol()) : SSLContext.getInstance(getSslProtocol(),securityProvider);
  context.init(keyManagers,trustManagers,secureRandom);
  return context.getSocketFactory();
}
