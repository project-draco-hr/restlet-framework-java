def test_dunder_init(self):
    os.mkdir('foo')
    init = os.path.join('foo', '__init__.py')
    fp = open(init, 'w')
    fp.write("bar = 'test'")
    fp.close()
    module_obj = __import__('foo')
    self.assertEquals(module_obj.__file__, init)
    self.assertEquals(module_obj.bar, 'test')
    init_compiled = (init[:(-3)] + COMPILED_SUFFIX)
    self.assert_(os.path.exists(init_compiled))
    bytecode = read(init_compiled)
    fp = open(os.path.join('foo', 'test.py'), 'w')
    fp.write("import __init__; baz = __init__.bar + 'test'; init_file = __init__.__file__")
    fp.close()
    module_obj = __import__('foo.test')
    self.assertEquals(module_obj.test.baz, 'testtest')
    self.assertEqual(module_obj.test.init_file, os.path.join('foo', ('__init__' + COMPILED_SUFFIX)))
    self.assertEquals(bytecode, read(init_compiled), 'bytecode was recompiled')
    module_obj = imp.load_module('foo', *imp.find_module('foo'))
    self.assertEquals(module_obj.bar, 'test')
    self.assertEquals(bytecode, read(init_compiled), 'bytecode was recompiled')
