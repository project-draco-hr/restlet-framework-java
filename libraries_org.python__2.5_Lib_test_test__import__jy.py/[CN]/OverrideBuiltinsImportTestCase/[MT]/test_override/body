def test_override(self):
    modname = os.path.__name__
    tests = [('import os.path', "('os.path', None, -1, 'os')"), ('import os.path as path2', "('os.path', None, -1, 'os')"), ('from os.path import *', ("('os.path', ('*',), -1, '%s')" % modname)), ('from os.path import join', ("('os.path', ('join',), -1, '%s')" % modname)), ('from os.path import join as join2', ("('os.path', ('join',), -1, '%s')" % modname)), ('from os.path import join as join2, split as split2', ("('os.path', ('join', 'split'), -1, '%s')" % modname))]
    import sys
    import __builtin__
    oldimp = __builtin__.__import__
    try:

        def __import__(name, globs, locs, fromlist, level=(-1)):
            mod = oldimp(name, globs, locs, fromlist, level)
            globs['result'] = str((name, fromlist, level, mod.__name__))
            raise ImportError
        __builtin__.__import__ = __import__
        failed = 0
        for (statement, expected) in tests:
            try:
                c = compile(statement, '<unknown>', 'exec')
                exec c in locals(), globals()
                raise Exception('ImportError expected.')
            except ImportError:
                pass
            self.assertEquals(expected, result)
    finally:
        __builtin__.__import__ = oldimp
