def parse(str, flags=0, pattern=None):
    source = Tokenizer(str)
    if (pattern is None):
        pattern = Pattern()
    pattern.flags = flags
    pattern.str = str
    p = _parse_sub(source, pattern, 0)
    tail = source.get()
    if (tail == ')'):
        raise error, 'unbalanced parenthesis'
    elif tail:
        raise error, 'bogus characters at end of regular expression'
    if (flags & SRE_FLAG_DEBUG):
        p.dump()
    if ((not (flags & SRE_FLAG_VERBOSE)) and (p.pattern.flags & SRE_FLAG_VERBOSE)):
        return parse(str, p.pattern.flags)
    return p
