def parse_template(source, pattern):
    s = Tokenizer(source)
    sget = s.get
    p = []
    a = p.append

    def literal(literal, p=p, pappend=a):
        if (p and (p[(-1)][0] is LITERAL)):
            p[(-1)] = (LITERAL, (p[(-1)][1] + literal))
        else:
            pappend((LITERAL, literal))
    sep = source[:0]
    if (type(sep) is type('')):
        makechar = chr
    else:
        makechar = unichr
    while 1:
        this = sget()
        if (this is None):
            break
        if (this and (this[0] == '\\')):
            c = this[1:2]
            if (c == 'g'):
                name = ''
                if s.match('<'):
                    while 1:
                        char = sget()
                        if (char is None):
                            raise error, 'unterminated group name'
                        if (char == '>'):
                            break
                        name = (name + char)
                if (not name):
                    raise error, 'bad group name'
                try:
                    index = int(name)
                    if (index < 0):
                        raise error, 'negative group number'
                except ValueError:
                    if (not isname(name)):
                        raise error, 'bad character in group name'
                    try:
                        index = pattern.groupindex[name]
                    except KeyError:
                        raise IndexError, 'unknown group name'
                a((MARK, index))
            elif (c == '0'):
                if (s.next in OCTDIGITS):
                    this = (this + sget())
                    if (s.next in OCTDIGITS):
                        this = (this + sget())
                literal(makechar((int(this[1:], 8) & 255)))
            elif (c in DIGITS):
                isoctal = False
                if (s.next in DIGITS):
                    this = (this + sget())
                    if ((c in OCTDIGITS) and (this[2] in OCTDIGITS) and (s.next in OCTDIGITS)):
                        this = (this + sget())
                        isoctal = True
                        literal(makechar((int(this[1:], 8) & 255)))
                if (not isoctal):
                    a((MARK, int(this[1:])))
            else:
                try:
                    this = makechar(ESCAPES[this][1])
                except KeyError:
                    pass
                literal(this)
        else:
            literal(this)
    i = 0
    groups = []
    groupsappend = groups.append
    literals = ([None] * len(p))
    for (c, s) in p:
        if (c is MARK):
            groupsappend((i, s))
        else:
            literals[i] = s
        i = (i + 1)
    return (groups, literals)
