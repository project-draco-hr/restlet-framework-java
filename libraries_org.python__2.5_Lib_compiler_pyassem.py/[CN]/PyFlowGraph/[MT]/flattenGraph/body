def flattenGraph(self):
    'Arrange the blocks in order and resolve jumps'
    assert (self.stage == RAW)
    self.insts = insts = []
    pc = 0
    begin = {}
    end = {}
    for b in self.getBlocksInOrder():
        begin[b] = pc
        for inst in b.getInstructions():
            insts.append(inst)
            if (len(inst) == 1):
                pc = (pc + 1)
            elif (inst[0] != 'SET_LINENO'):
                pc = (pc + 3)
        end[b] = pc
    pc = 0
    for i in range(len(insts)):
        inst = insts[i]
        if (len(inst) == 1):
            pc = (pc + 1)
        elif (inst[0] != 'SET_LINENO'):
            pc = (pc + 3)
        opname = inst[0]
        if self.hasjrel.has_elt(opname):
            oparg = inst[1]
            offset = (begin[oparg] - pc)
            insts[i] = (opname, offset)
        elif self.hasjabs.has_elt(opname):
            insts[i] = (opname, begin[inst[1]])
    self.stage = FLAT
