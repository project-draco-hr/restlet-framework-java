def computeStackDepth(self):
    'Compute the max stack depth.\n\n        Approach is to compute the stack effect of each basic block.\n        Then find the path through the code with the largest total\n        effect.\n        '
    depth = {}
    exit = None
    for b in self.getBlocks():
        depth[b] = findDepth(b.getInstructions())
    seen = {}

    def max_depth(b, d):
        if seen.has_key(b):
            return d
        seen[b] = 1
        d = (d + depth[b])
        children = b.get_children()
        if children:
            return max([max_depth(c, d) for c in children])
        elif (not (b.label == 'exit')):
            return max_depth(self.exit, d)
        else:
            return d
    self.stacksize = max_depth(self.entry, 0)
