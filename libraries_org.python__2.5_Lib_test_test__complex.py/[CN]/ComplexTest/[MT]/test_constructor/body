def test_constructor(self):


    class OS:

        def __init__(self, value):
            self.value = value

        def __complex__(self):
            return self.value


    class NS(object):

        def __init__(self, value):
            self.value = value

        def __complex__(self):
            return self.value
    self.assertEqual(complex(OS((1 + 10j))), (1 + 10j))
    self.assertEqual(complex(NS((1 + 10j))), (1 + 10j))
    self.assertRaises(TypeError, complex, OS(None))
    self.assertRaises(TypeError, complex, NS(None))
    self.assertAlmostEqual(complex('1+10j'), (1 + 10j))
    self.assertAlmostEqual(complex(10), (10 + 0j))
    self.assertAlmostEqual(complex(10.0), (10 + 0j))
    self.assertAlmostEqual(complex(10L), (10 + 0j))
    self.assertAlmostEqual(complex((10 + 0j)), (10 + 0j))
    self.assertAlmostEqual(complex(1, 10), (1 + 10j))
    self.assertAlmostEqual(complex(1, 10L), (1 + 10j))
    self.assertAlmostEqual(complex(1, 10.0), (1 + 10j))
    self.assertAlmostEqual(complex(1L, 10), (1 + 10j))
    self.assertAlmostEqual(complex(1L, 10L), (1 + 10j))
    self.assertAlmostEqual(complex(1L, 10.0), (1 + 10j))
    self.assertAlmostEqual(complex(1.0, 10), (1 + 10j))
    self.assertAlmostEqual(complex(1.0, 10L), (1 + 10j))
    self.assertAlmostEqual(complex(1.0, 10.0), (1 + 10j))
    self.assertAlmostEqual(complex((3.14 + 0j)), (3.14 + 0j))
    self.assertAlmostEqual(complex(3.14), (3.14 + 0j))
    self.assertAlmostEqual(complex(314), (314.0 + 0j))
    self.assertAlmostEqual(complex(314L), (314.0 + 0j))
    self.assertAlmostEqual(complex((3.14 + 0j), 0j), (3.14 + 0j))
    self.assertAlmostEqual(complex(3.14, 0.0), (3.14 + 0j))
    self.assertAlmostEqual(complex(314, 0), (314.0 + 0j))
    self.assertAlmostEqual(complex(314L, 0L), (314.0 + 0j))
    self.assertAlmostEqual(complex(0j, 3.14j), ((-3.14) + 0j))
    self.assertAlmostEqual(complex(0.0, 3.14j), ((-3.14) + 0j))
    self.assertAlmostEqual(complex(0j, 3.14), 3.14j)
    self.assertAlmostEqual(complex(0.0, 3.14), 3.14j)
    self.assertAlmostEqual(complex('1'), (1 + 0j))
    self.assertAlmostEqual(complex('1j'), 1j)
    self.assertAlmostEqual(complex(), 0)
    self.assertAlmostEqual(complex('-1'), (-1))
    self.assertAlmostEqual(complex('+1'), (+ 1))


    class complex2(complex):
        pass
    self.assertAlmostEqual(complex(complex2((1 + 1j))), (1 + 1j))
    self.assertAlmostEqual(complex(real=17, imag=23), (17 + 23j))
    self.assertAlmostEqual(complex(real=(17 + 23j)), (17 + 23j))
    self.assertAlmostEqual(complex(real=(17 + 23j), imag=23), (17 + 46j))
    self.assertAlmostEqual(complex(real=(1 + 2j), imag=(3 + 4j)), ((-3) + 5j))
    c = (3.14 + 1j)
    self.assert_((complex(c) is c))
    del c
    self.assertRaises(TypeError, complex, '1', '1')
    self.assertRaises(TypeError, complex, 1, '1')
    self.assertEqual(complex('  3.14+J  '), (3.14 + 1j))
    if test_support.have_unicode:
        self.assertEqual(complex(unicode('  3.14+J  ')), (3.14 + 1j))
    self.assertRaises(ValueError, complex, '1+1j\x00j')
    self.assertRaises(TypeError, int, (5 + 3j))
    self.assertRaises(TypeError, long, (5 + 3j))
    self.assertRaises(TypeError, float, (5 + 3j))
    self.assertRaises(ValueError, complex, '')
    self.assertRaises(TypeError, complex, None)
    self.assertRaises(ValueError, complex, '\x00')
    self.assertRaises(TypeError, complex, '1', '2')
    self.assertRaises(TypeError, complex, '1', 42)
    self.assertRaises(TypeError, complex, 1, '2')
    self.assertRaises(ValueError, complex, '1+')
    self.assertRaises(ValueError, complex, '1+1j+1j')
    self.assertRaises(ValueError, complex, '--')
    if test_support.have_unicode:
        self.assertRaises(ValueError, complex, unicode(('1' * 500)))
        self.assertRaises(ValueError, complex, unicode('x'))


    class EvilExc(Exception):
        pass


    class evilcomplex:

        def __complex__(self):
            raise EvilExc
    self.assertRaises(EvilExc, complex, evilcomplex())


    class float2:

        def __init__(self, value):
            self.value = value

        def __float__(self):
            return self.value
    self.assertAlmostEqual(complex(float2(42.0)), 42)
    self.assertAlmostEqual(complex(real=float2(17.0), imag=float2(23.0)), (17 + 23j))
    self.assertRaises(TypeError, complex, float2(None))


    class complex0(complex):
        "Test usage of __complex__() when inheriting from 'complex'"

        def __complex__(self):
            return 42j


    class complex1(complex):
        'Test usage of __complex__() with a __new__() method'

        def __new__(self, value=0j):
            return complex.__new__(self, (2 * value))

        def __complex__(self):
            return self


    class complex2(complex):
        'Make sure that __complex__() calls fail if anything other than a\n            complex is returned'

        def __complex__(self):
            return None
    self.assertAlmostEqual(complex(complex0(1j)), 42j)
    self.assertAlmostEqual(complex(complex1(1j)), 2j)
    self.assertRaises(TypeError, complex, complex2(1j))
