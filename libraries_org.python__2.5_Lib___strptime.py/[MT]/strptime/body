def strptime(data_string, format='%a %b %d %H:%M:%S %Y'):
    'Return a time struct based on the input string and the format string.'
    global _TimeRE_cache, _regex_cache
    _cache_lock.acquire()
    try:
        if (_getlang() != _TimeRE_cache.locale_time.lang):
            _TimeRE_cache = TimeRE()
            _regex_cache.clear()
        if (len(_regex_cache) > _CACHE_MAX_SIZE):
            _regex_cache.clear()
        locale_time = _TimeRE_cache.locale_time
        format_regex = _regex_cache.get(format)
        if (not format_regex):
            try:
                format_regex = _TimeRE_cache.compile(format)
            except KeyError as err:
                bad_directive = err.args[0]
                if (bad_directive == '\\'):
                    bad_directive = '%'
                del err
                raise ValueError(("'%s' is a bad directive in format '%s'" % (bad_directive, format)))
            except IndexError:
                raise ValueError(("stray %% in format '%s'" % format))
            _regex_cache[format] = format_regex
    finally:
        _cache_lock.release()
    found = format_regex.match(data_string)
    if (not found):
        raise ValueError(('time data did not match format:  data=%s  fmt=%s' % (data_string, format)))
    if (len(data_string) != found.end()):
        raise ValueError(('unconverted data remains: %s' % data_string[found.end():]))
    year = 1900
    month = day = 1
    hour = minute = second = 0
    tz = (-1)
    week_of_year = (-1)
    week_of_year_start = (-1)
    weekday = julian = (-1)
    found_dict = found.groupdict()
    for group_key in found_dict.iterkeys():
        if (group_key == 'y'):
            year = int(found_dict['y'])
            if (year <= 68):
                year += 2000
            else:
                year += 1900
        elif (group_key == 'Y'):
            year = int(found_dict['Y'])
        elif (group_key == 'm'):
            month = int(found_dict['m'])
        elif (group_key == 'B'):
            month = locale_time.f_month.index(found_dict['B'].lower())
        elif (group_key == 'b'):
            month = locale_time.a_month.index(found_dict['b'].lower())
        elif (group_key == 'd'):
            day = int(found_dict['d'])
        elif (group_key == 'H'):
            hour = int(found_dict['H'])
        elif (group_key == 'I'):
            hour = int(found_dict['I'])
            ampm = found_dict.get('p', '').lower()
            if (ampm in ('', locale_time.am_pm[0])):
                if (hour == 12):
                    hour = 0
            elif (ampm == locale_time.am_pm[1]):
                if (hour != 12):
                    hour += 12
        elif (group_key == 'M'):
            minute = int(found_dict['M'])
        elif (group_key == 'S'):
            second = int(found_dict['S'])
        elif (group_key == 'A'):
            weekday = locale_time.f_weekday.index(found_dict['A'].lower())
        elif (group_key == 'a'):
            weekday = locale_time.a_weekday.index(found_dict['a'].lower())
        elif (group_key == 'w'):
            weekday = int(found_dict['w'])
            if (weekday == 0):
                weekday = 6
            else:
                weekday -= 1
        elif (group_key == 'j'):
            julian = int(found_dict['j'])
        elif (group_key in ('U', 'W')):
            week_of_year = int(found_dict[group_key])
            if (group_key == 'U'):
                week_of_year_start = 6
            else:
                week_of_year_start = 0
        elif (group_key == 'Z'):
            found_zone = found_dict['Z'].lower()
            for (value, tz_values) in enumerate(locale_time.timezone):
                if (found_zone in tz_values):
                    if ((time.tzname[0] == time.tzname[1]) and time.daylight and (found_zone not in ('utc', 'gmt'))):
                        break
                    else:
                        tz = value
                        break
    if ((julian == (-1)) and (week_of_year != (-1)) and (weekday != (-1))):
        week_starts_Mon = (True if (week_of_year_start == 0) else False)
        julian = _calc_julian_from_U_or_W(year, week_of_year, weekday, week_starts_Mon)
    if (julian == (-1)):
        julian = ((datetime_date(year, month, day).toordinal() - datetime_date(year, 1, 1).toordinal()) + 1)
    else:
        datetime_result = datetime_date.fromordinal(((julian - 1) + datetime_date(year, 1, 1).toordinal()))
        year = datetime_result.year
        month = datetime_result.month
        day = datetime_result.day
    if (weekday == (-1)):
        weekday = datetime_date(year, month, day).weekday()
    return time.struct_time((year, month, day, hour, minute, second, weekday, julian, tz))
