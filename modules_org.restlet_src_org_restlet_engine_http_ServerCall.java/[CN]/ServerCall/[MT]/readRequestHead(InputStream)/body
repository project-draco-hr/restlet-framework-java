{
  StringBuilder sb=new StringBuilder();
  int next=headStream.read();
  while ((next != -1) && !HeaderUtils.isSpace(next)) {
    sb.append((char)next);
    next=headStream.read();
  }
  if (next == -1) {
    throw new IOException("Unable to parse the request method. End of stream reached too early.");
  }
  setMethod(sb.toString());
  sb.delete(0,sb.length());
  next=headStream.read();
  while ((next != -1) && !HeaderUtils.isSpace(next)) {
    sb.append((char)next);
    next=headStream.read();
  }
  if (next == -1) {
    throw new IOException("Unable to parse the request URI. End of stream reached too early.");
  }
  setRequestUri(sb.toString());
  sb.delete(0,sb.length());
  next=headStream.read();
  while ((next != -1) && !HeaderUtils.isCarriageReturn(next)) {
    sb.append((char)next);
    next=headStream.read();
  }
  if (next == -1) {
    throw new IOException("Unable to parse the HTTP version. End of stream reached too early.");
  }
  next=headStream.read();
  if (HeaderUtils.isLineFeed(next)) {
    setVersion(sb.toString());
    sb.delete(0,sb.length());
    Parameter header=HeaderUtils.readHeader(headStream,sb);
    while (header != null) {
      getRequestHeaders().add(header);
      header=HeaderUtils.readHeader(headStream,sb);
    }
  }
 else {
    throw new IOException("Unable to parse the HTTP version. The carriage return must be followed by a line feed.");
  }
}
