def run(self):
    if DEBUG:
        print 'before _get_package_data():'
        print 'vendor =', self.vendor
        print 'packager =', self.packager
        print 'doc_files =', self.doc_files
        print 'changelog =', self.changelog
    if self.spec_only:
        spec_dir = self.dist_dir
        self.mkpath(spec_dir)
    else:
        rpm_dir = {}
        for d in ('SOURCES', 'SPECS', 'BUILD', 'RPMS', 'SRPMS'):
            rpm_dir[d] = os.path.join(self.rpm_base, d)
            self.mkpath(rpm_dir[d])
        spec_dir = rpm_dir['SPECS']
    spec_path = os.path.join(spec_dir, ('%s.spec' % self.distribution.get_name()))
    self.execute(write_file, (spec_path, self._make_spec_file()), ("writing '%s'" % spec_path))
    if self.spec_only:
        return
    saved_dist_files = self.distribution.dist_files[:]
    sdist = self.reinitialize_command('sdist')
    if self.use_bzip2:
        sdist.formats = ['bztar']
    else:
        sdist.formats = ['gztar']
    self.run_command('sdist')
    self.distribution.dist_files = saved_dist_files
    source = sdist.get_archive_files()[0]
    source_dir = rpm_dir['SOURCES']
    self.copy_file(source, source_dir)
    if self.icon:
        if os.path.exists(self.icon):
            self.copy_file(self.icon, source_dir)
        else:
            raise DistutilsFileError, ("icon file '%s' does not exist" % self.icon)
    log.info('building RPMs')
    rpm_cmd = ['rpm']
    if (os.path.exists('/usr/bin/rpmbuild') or os.path.exists('/bin/rpmbuild')):
        rpm_cmd = ['rpmbuild']
    if self.source_only:
        rpm_cmd.append('-bs')
    elif self.binary_only:
        rpm_cmd.append('-bb')
    else:
        rpm_cmd.append('-ba')
    if self.rpm3_mode:
        rpm_cmd.extend(['--define', ('_topdir %s' % os.path.abspath(self.rpm_base))])
    if (not self.keep_temp):
        rpm_cmd.append('--clean')
    rpm_cmd.append(spec_path)
    nvr_string = '%{name}-%{version}-%{release}'
    src_rpm = (nvr_string + '.src.rpm')
    non_src_rpm = (('%{arch}/' + nvr_string) + '.%{arch}.rpm')
    q_cmd = ("rpm -q --qf '%s %s\\n' --specfile '%s'" % (src_rpm, non_src_rpm, spec_path))
    out = os.popen(q_cmd)
    binary_rpms = []
    source_rpm = None
    while 1:
        line = out.readline()
        if (not line):
            break
        l = string.split(string.strip(line))
        assert (len(l) == 2)
        binary_rpms.append(l[1])
        if (source_rpm is None):
            source_rpm = l[0]
    status = out.close()
    if status:
        raise DistutilsExecError(('Failed to execute: %s' % repr(q_cmd)))
    self.spawn(rpm_cmd)
    if (not self.dry_run):
        if (not self.binary_only):
            srpm = os.path.join(rpm_dir['SRPMS'], source_rpm)
            assert os.path.exists(srpm)
            self.move_file(srpm, self.dist_dir)
        if (not self.source_only):
            for rpm in binary_rpms:
                rpm = os.path.join(rpm_dir['RPMS'], rpm)
                if os.path.exists(rpm):
                    self.move_file(rpm, self.dist_dir)
