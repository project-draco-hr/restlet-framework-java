def test_in_and_not_in(self):
    for sc5 in (IteratingSequenceClass(5), SequenceClass(5)):
        for i in range(5):
            self.assert_((i in sc5))
        for i in ('abc', (-1), 5, 42.42, (3, 4), [], {1: 1, }, (3 - 12j), sc5):
            self.assert_((i not in sc5))
    self.assertRaises(TypeError, (lambda : (3 in 12)))
    self.assertRaises(TypeError, (lambda : (3 not in map)))
    d = {'one': 1, 'two': 2, 'three': 3, 1j: 2j, }
    for k in d:
        self.assert_((k in d))
        self.assert_((k not in d.itervalues()))
    for v in d.values():
        self.assert_((v in d.itervalues()))
        self.assert_((v not in d))
    for (k, v) in d.iteritems():
        self.assert_(((k, v) in d.iteritems()))
        self.assert_(((v, k) not in d.iteritems()))
    f = open(TESTFN, 'w')
    try:
        f.write('a\nb\nc\n')
    finally:
        f.close()
    f = open(TESTFN, 'r')
    try:
        for chunk in 'abc':
            f.seek(0, 0)
            self.assert_((chunk not in f))
            f.seek(0, 0)
            self.assert_(((chunk + '\n') in f))
    finally:
        f.close()
        try:
            unlink(TESTFN)
        except OSError:
            pass
