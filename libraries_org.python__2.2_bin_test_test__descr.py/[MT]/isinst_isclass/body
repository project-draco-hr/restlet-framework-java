def isinst_isclass():
    if verbose:
        print 'Testing proxy isinstance() and isclass()...'


    class Proxy(object):

        def __init__(self, obj):
            self.__obj = obj

        def __getattribute__(self, name):
            if name.startswith('_Proxy__'):
                return object.__getattribute__(self, name)
            else:
                return getattr(self.__obj, name)


    class C:
        pass
    a = C()
    pa = Proxy(a)
    verify(isinstance(a, C))
    verify(isinstance(pa, C))


    class D(C):
        pass
    a = D()
    pa = Proxy(a)
    verify(isinstance(a, C))
    verify(isinstance(pa, C))


    class C(object):
        pass
    a = C()
    pa = Proxy(a)
    verify(isinstance(a, C))
    verify(isinstance(pa, C))


    class D(C):
        pass
    a = D()
    pa = Proxy(a)
    verify(isinstance(a, C))
    verify(isinstance(pa, C))
