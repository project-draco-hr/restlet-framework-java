{
  for (  Parameter header : headers) {
    if (header.getName().equalsIgnoreCase(HttpConstants.HEADER_LOCATION)) {
      response.setLocationRef(header.getValue());
    }
 else     if (header.getName().equalsIgnoreCase(HttpConstants.HEADER_AGE)) {
      try {
        response.setAge(Long.parseLong(header.getValue()));
      }
 catch (      NumberFormatException nfe) {
        Context.getCurrentLogger().log(Level.WARNING,"Error during Age header parsing. Header: " + header.getValue(),nfe);
      }
    }
 else     if (header.getName().equalsIgnoreCase(HttpConstants.HEADER_DATE)) {
      Date date=DateUtils.parse(header.getValue());
      if (date == null) {
        date=new Date();
      }
      response.setDate(date);
    }
 else     if (header.getName().equalsIgnoreCase(HttpConstants.HEADER_RETRY_AFTER)) {
      Date retryAfter=DateUtils.parse(header.getValue());
      if (retryAfter == null) {
        try {
          int retryAfterSecs=Integer.parseInt(header.getValue());
          Calendar calendar=Calendar.getInstance();
          calendar.add(Calendar.SECOND,retryAfterSecs);
          retryAfter=calendar.getTime();
        }
 catch (        NumberFormatException nfe) {
          Context.getCurrentLogger().log(Level.WARNING,"Error during Retry-After header parsing. Header: " + header.getValue(),nfe);
        }
      }
      response.setRetryAfter(retryAfter);
    }
 else     if ((header.getName().equalsIgnoreCase(HttpConstants.HEADER_SET_COOKIE)) || (header.getName().equalsIgnoreCase(HttpConstants.HEADER_SET_COOKIE2))) {
      try {
        CookieReader cr=new CookieReader(header.getValue());
        response.getCookieSettings().add(cr.readCookieSetting());
      }
 catch (      Exception e) {
        Context.getCurrentLogger().log(Level.WARNING,"Error during cookie setting parsing. Header: " + header.getValue(),e);
      }
    }
 else     if (header.getName().equalsIgnoreCase(HttpConstants.HEADER_WWW_AUTHENTICATE)) {
      ChallengeRequest request=org.restlet.engine.security.AuthenticatorUtils.parseRequest(header.getValue(),headers);
      response.getChallengeRequests().add(request);
    }
 else     if (header.getName().equalsIgnoreCase(HttpConstants.HEADER_PROXY_AUTHENTICATE)) {
      ChallengeRequest request=org.restlet.engine.security.AuthenticatorUtils.parseRequest(header.getValue(),headers);
      response.getProxyChallengeRequests().add(request);
    }
 else     if (header.getName().equalsIgnoreCase(HttpConstants.HEADER_SERVER)) {
      response.getServerInfo().setAgent(header.getValue());
    }
 else     if (header.getName().equalsIgnoreCase(HttpConstants.HEADER_ALLOW)) {
      HeaderReader hr=new HeaderReader(header.getValue());
      String value=hr.readValue();
      Set<Method> allowedMethods=response.getAllowedMethods();
      while (value != null) {
        allowedMethods.add(Method.valueOf(value));
        value=hr.readValue();
      }
    }
 else     if (header.getName().equalsIgnoreCase(HttpConstants.HEADER_VARY)) {
      HeaderReader hr=new HeaderReader(header.getValue());
      String value=hr.readValue();
      Set<Dimension> dimensions=response.getDimensions();
      while (value != null) {
        if (value.equalsIgnoreCase(HttpConstants.HEADER_ACCEPT)) {
          dimensions.add(Dimension.MEDIA_TYPE);
        }
 else         if (value.equalsIgnoreCase(HttpConstants.HEADER_ACCEPT_CHARSET)) {
          dimensions.add(Dimension.CHARACTER_SET);
        }
 else         if (value.equalsIgnoreCase(HttpConstants.HEADER_ACCEPT_ENCODING)) {
          dimensions.add(Dimension.ENCODING);
        }
 else         if (value.equalsIgnoreCase(HttpConstants.HEADER_ACCEPT_LANGUAGE)) {
          dimensions.add(Dimension.LANGUAGE);
        }
 else         if (value.equalsIgnoreCase(HttpConstants.HEADER_AUTHORIZATION)) {
          dimensions.add(Dimension.AUTHORIZATION);
        }
 else         if (value.equalsIgnoreCase(HttpConstants.HEADER_USER_AGENT)) {
          dimensions.add(Dimension.CLIENT_AGENT);
        }
 else         if (value.equals("*")) {
          dimensions.add(Dimension.UNSPECIFIED);
        }
        value=hr.readValue();
      }
    }
  }
}
