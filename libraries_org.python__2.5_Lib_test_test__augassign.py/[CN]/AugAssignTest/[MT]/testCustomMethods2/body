def testCustomMethods2(test_self):
    output = []


    class testall:

        def __add__(self, val):
            output.append('__add__ called')

        def __radd__(self, val):
            output.append('__radd__ called')

        def __iadd__(self, val):
            output.append('__iadd__ called')
            return self

        def __sub__(self, val):
            output.append('__sub__ called')

        def __rsub__(self, val):
            output.append('__rsub__ called')

        def __isub__(self, val):
            output.append('__isub__ called')
            return self

        def __mul__(self, val):
            output.append('__mul__ called')

        def __rmul__(self, val):
            output.append('__rmul__ called')

        def __imul__(self, val):
            output.append('__imul__ called')
            return self

        def __div__(self, val):
            output.append('__div__ called')

        def __rdiv__(self, val):
            output.append('__rdiv__ called')

        def __idiv__(self, val):
            output.append('__idiv__ called')
            return self

        def __floordiv__(self, val):
            output.append('__floordiv__ called')
            return self

        def __ifloordiv__(self, val):
            output.append('__ifloordiv__ called')
            return self

        def __rfloordiv__(self, val):
            output.append('__rfloordiv__ called')
            return self

        def __truediv__(self, val):
            output.append('__truediv__ called')
            return self

        def __itruediv__(self, val):
            output.append('__itruediv__ called')
            return self

        def __mod__(self, val):
            output.append('__mod__ called')

        def __rmod__(self, val):
            output.append('__rmod__ called')

        def __imod__(self, val):
            output.append('__imod__ called')
            return self

        def __pow__(self, val):
            output.append('__pow__ called')

        def __rpow__(self, val):
            output.append('__rpow__ called')

        def __ipow__(self, val):
            output.append('__ipow__ called')
            return self

        def __or__(self, val):
            output.append('__or__ called')

        def __ror__(self, val):
            output.append('__ror__ called')

        def __ior__(self, val):
            output.append('__ior__ called')
            return self

        def __and__(self, val):
            output.append('__and__ called')

        def __rand__(self, val):
            output.append('__rand__ called')

        def __iand__(self, val):
            output.append('__iand__ called')
            return self

        def __xor__(self, val):
            output.append('__xor__ called')

        def __rxor__(self, val):
            output.append('__rxor__ called')

        def __ixor__(self, val):
            output.append('__ixor__ called')
            return self

        def __rshift__(self, val):
            output.append('__rshift__ called')

        def __rrshift__(self, val):
            output.append('__rrshift__ called')

        def __irshift__(self, val):
            output.append('__irshift__ called')
            return self

        def __lshift__(self, val):
            output.append('__lshift__ called')

        def __rlshift__(self, val):
            output.append('__rlshift__ called')

        def __ilshift__(self, val):
            output.append('__ilshift__ called')
            return self
    x = testall()
    (x + 1)
    (1 + x)
    x += 1
    (x - 1)
    (1 - x)
    x -= 1
    (x * 1)
    (1 * x)
    x *= 1
    if ((1 / 2) == 0):
        (x / 1)
        (1 / x)
        x /= 1
    else:
        x.__div__(1)
        x.__rdiv__(1)
        x.__idiv__(1)
    (x // 1)
    (1 // x)
    x //= 1
    (x % 1)
    (1 % x)
    x %= 1
    (x ** 1)
    (1 ** x)
    x **= 1
    (x | 1)
    (1 | x)
    x |= 1
    (x & 1)
    (1 & x)
    x &= 1
    (x ^ 1)
    (1 ^ x)
    x ^= 1
    (x >> 1)
    (1 >> x)
    x >>= 1
    (x << 1)
    (1 << x)
    x <<= 1
    test_self.assertEquals(output, '__add__ called\n__radd__ called\n__iadd__ called\n__sub__ called\n__rsub__ called\n__isub__ called\n__mul__ called\n__rmul__ called\n__imul__ called\n__div__ called\n__rdiv__ called\n__idiv__ called\n__floordiv__ called\n__rfloordiv__ called\n__ifloordiv__ called\n__mod__ called\n__rmod__ called\n__imod__ called\n__pow__ called\n__rpow__ called\n__ipow__ called\n__or__ called\n__ror__ called\n__ior__ called\n__and__ called\n__rand__ called\n__iand__ called\n__xor__ called\n__rxor__ called\n__ixor__ called\n__rshift__ called\n__rrshift__ called\n__irshift__ called\n__lshift__ called\n__rlshift__ called\n__ilshift__ called\n'.splitlines())
