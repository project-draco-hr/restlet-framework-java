{
  final StringBuilder sb=new StringBuilder();
  int next=headStream.read();
  while ((next != -1) && !HttpUtils.isSpace(next)) {
    sb.append((char)next);
    next=headStream.read();
  }
  if (next == -1) {
    throw new IOException("Unable to parse the request method. End of stream reached too early.");
  }
 else {
    setMethod(sb.toString());
    sb.delete(0,sb.length());
    next=headStream.read();
    while ((next != -1) && !HttpUtils.isSpace(next)) {
      sb.append((char)next);
      next=headStream.read();
    }
    if (next == -1) {
      throw new IOException("Unable to parse the request URI. End of stream reached too early.");
    }
 else {
      setRequestUri(sb.toString());
      sb.delete(0,sb.length());
      next=headStream.read();
      while ((next != -1) && !HttpUtils.isCarriageReturn(next)) {
        sb.append((char)next);
        next=headStream.read();
      }
      if (next == -1) {
        throw new IOException("Unable to parse the HTTP version. End of stream reached too early.");
      }
 else {
        next=headStream.read();
        if (HttpUtils.isLineFeed(next)) {
          setVersion(sb.toString());
          sb.delete(0,sb.length());
          Parameter header=HttpUtils.readHeader(headStream,sb);
          while (header != null) {
            getRequestHeaders().add(header);
            header=HttpUtils.readHeader(headStream,sb);
          }
        }
 else {
          throw new IOException("Unable to parse the HTTP version. The carriage return must be followed by a line feed.");
        }
      }
    }
  }
}
