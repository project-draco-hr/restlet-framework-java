def test_extension_registry(self):
    (mod, func, code) = ('junk1 ', ' junk2', 43981)
    e = ExtensionSaver(code)
    try:
        self.assertRaises(ValueError, copy_reg.remove_extension, mod, func, code)
        copy_reg.add_extension(mod, func, code)
        self.assert_((copy_reg._extension_registry[(mod, func)] == code))
        self.assert_((copy_reg._inverted_registry[code] == (mod, func)))
        self.assert_((code not in copy_reg._extension_cache))
        copy_reg.add_extension(mod, func, code)
        self.assertRaises(ValueError, copy_reg.add_extension, mod, func, (code + 1))
        self.assertRaises(ValueError, copy_reg.remove_extension, mod, func, (code + 1))
        self.assertRaises(ValueError, copy_reg.add_extension, mod[1:], func, code)
        self.assertRaises(ValueError, copy_reg.remove_extension, mod[1:], func, code)
        self.assertRaises(ValueError, copy_reg.add_extension, mod, func[1:], code)
        self.assertRaises(ValueError, copy_reg.remove_extension, mod, func[1:], code)
        if ((code + 1) not in copy_reg._inverted_registry):
            self.assertRaises(ValueError, copy_reg.remove_extension, mod[1:], func[1:], (code + 1))
    finally:
        e.restore()
    self.assert_(((mod, func) not in copy_reg._extension_registry))
    for code in (1, 2147483647):
        e = ExtensionSaver(code)
        try:
            copy_reg.add_extension(mod, func, code)
            copy_reg.remove_extension(mod, func, code)
        finally:
            e.restore()
    for code in ((-1), 0, 2147483648L):
        self.assertRaises(ValueError, copy_reg.add_extension, mod, func, code)
