def case_sensitivity():
    print 'Testing case sensitivity...'
    cf = ConfigParser.ConfigParser()
    cf.add_section('A')
    cf.add_section('a')
    L = cf.sections()
    L.sort()
    verify((L == ['A', 'a']))
    cf.set('a', 'B', 'value')
    verify((cf.options('a') == ['b']))
    verify((cf.get('a', 'b', raw=1) == 'value'), 'could not locate option, expecting case-insensitive option names')
    verify(cf.has_option('a', 'b'))
    cf.set('A', 'A-B', 'A-B value')
    for opt in ('a-b', 'A-b', 'a-B', 'A-B'):
        verify(cf.has_option('A', opt), 'has_option() returned false for option which should exist')
    verify((cf.options('A') == ['a-b']))
    verify((cf.options('a') == ['b']))
    cf.remove_option('a', 'B')
    verify((cf.options('a') == []))
    cf = ConfigParser.ConfigParser()
    sio = StringIO.StringIO('[MySection]\nOption: first line\n\tsecond line\n')
    cf.readfp(sio)
    verify((cf.options('MySection') == ['option']))
    verify((cf.get('MySection', 'Option') == 'first line\nsecond line'))
    cf = ConfigParser.ConfigParser(defaults={'key': 'value', })
    cf.readfp(StringIO.StringIO('[section]\nnekey=nevalue\n'))
    verify(cf.has_option('section', 'Key'))
