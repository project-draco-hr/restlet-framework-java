{
  Class<?> rootResourceClass=jaxRsRootObject.getClass();
  RootResourceClass newRrc;
  try {
    newRrc=this.getSingletonRootClassWrapper(jaxRsRootObject);
  }
 catch (  IllegalParamTypeException e) {
    String msg="Ignore provider " + rootResourceClass.getName() + ": Could not instantiate class "+ rootResourceClass.getName();
    this.logger.log(Level.WARNING,msg,e);
    return false;
  }
catch (  IllegalPathOnClassException e) {
    this.logger.warning("The root resource class " + rootResourceClass.getName() + " is annotated with an illegal path: "+ e.getPath()+ ". ("+ e.getMessage()+ ")");
    return false;
  }
catch (  IllegalArgumentException e) {
    this.logger.log(Level.WARNING,"The root resource class " + rootResourceClass.getName() + " is not a valud root resource class: "+ e.getMessage(),e);
    return false;
  }
catch (  MissingAnnotationException e) {
    this.logger.log(Level.WARNING,"The root resource class " + rootResourceClass.getName() + " is not a valud root resource class: "+ e.getMessage(),e);
    return false;
  }
catch (  MissingConstructorException e) {
    this.logger.warning("The root resource class " + rootResourceClass.getName() + " has no valid constructor");
    return false;
  }
catch (  IllegalConstrParamTypeException e) {
    this.logger.warning("The root resource class " + rootResourceClass.getName() + " has no valid constructor: "+ e.getMessage());
    return false;
  }
catch (  IllegalBeanSetterTypeException e) {
    this.logger.warning("The root resource class " + rootResourceClass.getName() + " has no valid constructor: "+ e.getMessage());
    return false;
  }
catch (  IllegalFieldTypeException e) {
    this.logger.warning("The root resource class " + rootResourceClass.getName() + " has no valid constructor: "+ e.getMessage());
    return false;
  }
catch (  InjectException e) {
    this.logger.warning("Dependencies could not be injected in " + "root resource class " + rootResourceClass.getName() + ": "+ e.getMessage());
    return false;
  }
catch (  InvocationTargetException e) {
    this.logger.warning("Exception while calling bean setters in " + "root resource class " + rootResourceClass.getName() + ": "+ e.getMessage());
    return false;
  }
  PathRegExp uriTempl=newRrc.getPathRegExp();
  for (  RootResourceClass rrc : this.rootResourceClasses) {
    if (rrc.getJaxRsClass().equals(rootResourceClass)) {
      return true;
    }
    if (rrc.getPathRegExp().equals(uriTempl)) {
      this.logger.warning("There is already a root resource class with path " + uriTempl.getPathTemplateEnc());
      return false;
    }
  }
  rootResourceClasses.add(newRrc);
  return true;
}
