{
  Conditions result=super.getConditions();
  if (!this.conditionAdded) {
    String ifMatchHeader=getHttpCall().getRequestHeaders().getValues(HttpConstants.HEADER_IF_MATCH);
    String ifNoneMatchHeader=getHttpCall().getRequestHeaders().getValues(HttpConstants.HEADER_IF_NONE_MATCH);
    Date ifModifiedSince=null;
    Date ifUnmodifiedSince=null;
    for (    Parameter header : getHttpCall().getRequestHeaders()) {
      if (header.getName().equalsIgnoreCase(HttpConstants.HEADER_IF_MODIFIED_SINCE)) {
        ifModifiedSince=HttpCall.parseDate(header.getValue(),false);
      }
 else       if (header.getName().equalsIgnoreCase(HttpConstants.HEADER_IF_UNMODIFIED_SINCE)) {
        ifUnmodifiedSince=HttpCall.parseDate(header.getValue(),false);
      }
    }
    if ((ifModifiedSince != null) && (ifModifiedSince.getTime() != -1)) {
      result.setModifiedSince(ifModifiedSince);
    }
    if ((ifUnmodifiedSince != null) && (ifUnmodifiedSince.getTime() != -1)) {
      result.setUnmodifiedSince(ifUnmodifiedSince);
    }
    List<Tag> match=null;
    Tag current=null;
    if (ifMatchHeader != null) {
      try {
        HeaderReader hr=new HeaderReader(ifMatchHeader);
        String value=hr.readValue();
        while (value != null) {
          current=Tag.parse(value);
          if (match == null) {
            match=new ArrayList<Tag>();
            result.setMatch(match);
          }
          match.add(current);
          value=hr.readValue();
        }
      }
 catch (      Exception e) {
        this.context.getLogger().log(Level.INFO,"Unable to process the if-match header: " + ifMatchHeader);
      }
    }
    List<Tag> noneMatch=null;
    if (ifNoneMatchHeader != null) {
      try {
        HeaderReader hr=new HeaderReader(ifNoneMatchHeader);
        String value=hr.readValue();
        while (value != null) {
          current=Tag.parse(value);
          if (noneMatch == null) {
            noneMatch=new ArrayList<Tag>();
            result.setNoneMatch(noneMatch);
          }
          noneMatch.add(current);
          value=hr.readValue();
        }
      }
 catch (      Exception e) {
        this.context.getLogger().log(Level.INFO,"Unable to process the if-none-match header: " + ifNoneMatchHeader);
      }
    }
    this.conditionAdded=true;
  }
  return result;
}
