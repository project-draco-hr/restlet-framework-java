def test_proxy_generates_protected_methods(self):
    'Jython proxies should generate methods for protected methods on their superclasses\n\n        Tests for bug #416871'
    output = []


    class RegularBean(BeanInterface):

        def __init__(self):
            output.append('init')

        def getName(self):
            output.append('getName')


    class FinalizingBean(RegularBean):

        def finalize(self):
            pass

        def clone(self):
            return self.__class__()
    for a in (FinalizingBean(), RegularBean()):
        self.assertEquals('init', output.pop())
        a.getName()
        self.assertEquals('getName', output.pop())
        aa = a.clone()
        if isinstance(a, FinalizingBean):
            self.assertEquals('init', output.pop())
        aa.name
        self.assertEquals('getName', output.pop())
