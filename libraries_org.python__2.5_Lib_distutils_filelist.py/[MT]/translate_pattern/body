def translate_pattern(pattern, anchor=1, prefix=None, is_regex=0):
    "Translate a shell-like wildcard pattern to a compiled regular\n    expression.  Return the compiled regex.  If 'is_regex' true,\n    then 'pattern' is directly compiled to a regex (if it's a string)\n    or just returned as-is (assumes it's a regex object).\n    "
    if is_regex:
        if (type(pattern) is StringType):
            return re.compile(pattern)
        else:
            return pattern
    if pattern:
        pattern_re = glob_to_re(pattern)
    else:
        pattern_re = ''
    if (prefix is not None):
        prefix_re = glob_to_re(prefix)[0:(-1)]
        pattern_re = ('^' + os.path.join(prefix_re, ('.*' + pattern_re)))
    elif anchor:
        pattern_re = ('^' + pattern_re)
    return re.compile(pattern_re)
