def uuid1(node=None, clock_seq=None):
    "Generate a UUID from a host ID, sequence number, and the current time.\n    If 'node' is not given, getnode() is used to obtain the hardware\n    address.  If 'clock_seq' is given, it is used as the sequence number;\n    otherwise a random 14-bit sequence number is chosen."
    if (_uuid_generate_time and (node is clock_seq is None)):
        _uuid_generate_time(_buffer)
        return UUID(bytes=_buffer.raw)
    global _last_timestamp
    import time
    nanoseconds = int((time.time() * 1000000000.0))
    timestamp = (int((nanoseconds / 100)) + 122192928000000000L)
    if (timestamp <= _last_timestamp):
        timestamp = (_last_timestamp + 1)
    _last_timestamp = timestamp
    if (clock_seq is None):
        import random
        clock_seq = random.randrange((1 << 14L))
    time_low = (timestamp & 4294967295L)
    time_mid = ((timestamp >> 32L) & 65535L)
    time_hi_version = ((timestamp >> 48L) & 4095L)
    clock_seq_low = (clock_seq & 255L)
    clock_seq_hi_variant = ((clock_seq >> 8L) & 63L)
    if (node is None):
        node = getnode()
    return UUID(fields=(time_low, time_mid, time_hi_version, clock_seq_hi_variant, clock_seq_low, node), version=1)
