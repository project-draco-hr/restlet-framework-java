import sys
from test_support import *
print_test('power (test_pow.py)', 2)
print_test('integers', 3)
powtest(int)
print_test('longs', 3)
powtest(long)
print_test('floats', 3)
powtest(float)
print_test('mixed-mode', 3)
assert (((3 ** 3) % 8) == pow(3, 3, 8) == 3)
assert (((3 ** 3) % (-8)) == pow(3, 3, (-8)) == (-5))
assert (((3 ** 2) % (-2)) == pow(3, 2, (-2)) == (-1))
assert (((- (3 ** 3)) % 8) == pow((-3), 3, 8) == 5)
assert (((- (3 ** 3)) % (-8)) == pow((-3), 3, (-8)) == (-3))
assert (((5 ** 2) % (-8)) == pow(5, 2, (-8)) == (-7))
assert (((3L ** 3) % 8) == pow(3L, 3, 8) == 3L)
assert (((3L ** 3) % (-8)) == pow(3, 3L, (-8)) == (-5L))
assert (((3L ** 2) % (-2)) == pow(3, 2, (-2L)) == (-1L))
assert (((- (3L ** 3)) % 8) == pow((-3L), 3, 8) == 5L)
assert (((- (3L ** 3)) % (-8)) == pow((-3), 3L, (-8)) == (-3L))
assert (((5L ** 2) % (-8)) == pow(5, 2, (-8L)) == (-7L))
assert (((3.0 ** 3) % 8) == (pow(3.0, 3) % 8) == 3.0)
assert (((3.0 ** 3) % (-8)) == (pow(3, 3.0) % (-8)) == (-5.0))
assert (((3.0 ** 2) % (-2)) == (pow(3, 2) % (-2.0)) == (-1.0))
assert (((- (3.0 ** 3)) % 8) == (pow((-3.0), 3) % 8) == 5.0)
assert (((- (3.0 ** 3)) % (-8)) == (pow((-3), 3.0) % (-8)) == (-3.0))
assert (((5.0 ** 2) % (-8)) == (pow(5, 2) % (-8.0)) == (-7.0))
print_test("Validate that TypeError is thrown with 3 args if first two args aren't integers")
import unittest
tc = unittest.TestCase('fail')
tc.failUnlessRaises(TypeError, pow, 3.0, 3, 8)
tc.failUnlessRaises(TypeError, pow, 3, 3.0, 8)
if sys.platform.startswith('java1.1'):
    print_test('miscellaneous... skipping due to JVM bugs', 3)
else:
    print_test('miscellaneous', 3)
    for i in range((-10), 11):
        for j in range(0, 6):
            for k in range((-7), 11):
                if ((j >= 0) and (k != 0)):
                    o = (pow(i, j) % k)
                    n = pow(i, j, k)
                    assert (o == n), ('Integer mismatch: %d, %d, %d' % (i, j, k))
                if ((j >= 0) and (k != 0)):
                    o = (pow(long(i), j) % k)
                    n = pow(long(i), j, k)
                    assert (o == n), ('Long mismatch: %s, %s, %s' % (i, j, k))
