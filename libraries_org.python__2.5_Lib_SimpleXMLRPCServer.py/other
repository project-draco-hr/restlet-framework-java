'Simple XML-RPC Server.\n\nThis module can be used to create simple XML-RPC servers\nby creating a server and either installing functions, a\nclass instance, or by extending the SimpleXMLRPCServer\nclass.\n\nIt can also be used to handle XML-RPC requests in a CGI\nenvironment using CGIXMLRPCRequestHandler.\n\nA list of possible usage patterns follows:\n\n1. Install functions:\n\nserver = SimpleXMLRPCServer(("localhost", 8000))\nserver.register_function(pow)\nserver.register_function(lambda x,y: x+y, \'add\')\nserver.serve_forever()\n\n2. Install an instance:\n\nclass MyFuncs:\n    def __init__(self):\n        # make all of the string functions available through\n        # string.func_name\n        import string\n        self.string = string\n    def _listMethods(self):\n        # implement this method so that system.listMethods\n        # knows to advertise the strings methods\n        return list_public_methods(self) +                 [\'string.\' + method for method in list_public_methods(self.string)]\n    def pow(self, x, y): return pow(x, y)\n    def add(self, x, y) : return x + y\n\nserver = SimpleXMLRPCServer(("localhost", 8000))\nserver.register_introspection_functions()\nserver.register_instance(MyFuncs())\nserver.serve_forever()\n\n3. Install an instance with custom dispatch method:\n\nclass Math:\n    def _listMethods(self):\n        # this method must be present for system.listMethods\n        # to work\n        return [\'add\', \'pow\']\n    def _methodHelp(self, method):\n        # this method must be present for system.methodHelp\n        # to work\n        if method == \'add\':\n            return "add(2,3) => 5"\n        elif method == \'pow\':\n            return "pow(x, y[, z]) => number"\n        else:\n            # By convention, return empty\n            # string if no help is available\n            return ""\n    def _dispatch(self, method, params):\n        if method == \'pow\':\n            return pow(*params)\n        elif method == \'add\':\n            return params[0] + params[1]\n        else:\n            raise \'bad method\'\n\nserver = SimpleXMLRPCServer(("localhost", 8000))\nserver.register_introspection_functions()\nserver.register_instance(Math())\nserver.serve_forever()\n\n4. Subclass SimpleXMLRPCServer:\n\nclass MathServer(SimpleXMLRPCServer):\n    def _dispatch(self, method, params):\n        try:\n            # We are forcing the \'export_\' prefix on methods that are\n            # callable through XML-RPC to prevent potential security\n            # problems\n            func = getattr(self, \'export_\' + method)\n        except AttributeError:\n            raise Exception(\'method "%s" is not supported\' % method)\n        else:\n            return func(*params)\n\n    def export_add(self, x, y):\n        return x + y\n\nserver = MathServer(("localhost", 8000))\nserver.serve_forever()\n\n5. CGI script:\n\nserver = CGIXMLRPCRequestHandler()\nserver.register_function(pow)\nserver.handle_request()\n'
import xmlrpclib
from xmlrpclib import Fault
import SocketServer
import BaseHTTPServer
import sys
import os
try:
    import fcntl
except ImportError:
    fcntl = None
if (__name__ == '__main__'):
    print 'Running XML-RPC server on port 8000'
    server = SimpleXMLRPCServer(('localhost', 8000))
    server.register_function(pow)
    server.register_function((lambda x, y: (x + y)), 'add')
    server.serve_forever()
