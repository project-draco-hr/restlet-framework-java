def get_loader(module_or_name):
    'Get a PEP 302 "loader" object for module_or_name\n\n    If the module or package is accessible via the normal import\n    mechanism, a wrapper around the relevant part of that machinery\n    is returned.  Returns None if the module cannot be found or imported.\n    If the named module is not already imported, its containing package\n    (if any) is imported, in order to establish the package __path__.\n\n    This function uses iter_importers(), and is thus subject to the same\n    limitations regarding platform-specific special import locations such\n    as the Windows registry.\n    '
    if (module_or_name in sys.modules):
        module_or_name = sys.modules[module_or_name]
    if isinstance(module_or_name, ModuleType):
        module = module_or_name
        loader = getattr(module, '__loader__', None)
        if (loader is not None):
            return loader
        fullname = module.__name__
    elif (module_or_name == sys):
        fullname = 'sys'
    else:
        fullname = module_or_name
    return find_loader(fullname)
