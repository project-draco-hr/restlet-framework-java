'Utilities to support packages.'
import os
import sys
import imp
import os.path
from types import ModuleType
from org.python.core import imp as _imp, BytecodeLoader
__all__ = ['get_importer', 'iter_importers', 'get_loader', 'find_loader', 'walk_packages', 'iter_modules', 'ImpImporter', 'ImpLoader', 'read_code', 'extend_path']
iter_importer_modules = simplegeneric(iter_importer_modules)
try:
    import zipimport
    from zipimport import zipimporter

    def iter_zipimport_modules(importer, prefix=''):
        dirlist = zipimport._zip_directory_cache[importer.archive].keys()
        dirlist.sort()
        _prefix = importer.prefix
        plen = len(_prefix)
        yielded = {}
        import inspect
        for fn in dirlist:
            if (not fn.startswith(_prefix)):
                continue
            fn = fn[plen:].split(os.sep)
            if ((len(fn) == 2) and fn[1].startswith('__init__.py')):
                if (fn[0] not in yielded):
                    yielded[fn[0]] = 1
                    yield (fn[0], True)
            if (len(fn) != 1):
                continue
            modname = inspect.getmodulename(fn[0])
            if (modname == '__init__'):
                continue
            if (modname and ('.' not in modname) and (modname not in yielded)):
                yielded[modname] = 1
                yield ((prefix + modname), False)
    iter_importer_modules.register(zipimporter, iter_zipimport_modules)
except ImportError:
    pass
