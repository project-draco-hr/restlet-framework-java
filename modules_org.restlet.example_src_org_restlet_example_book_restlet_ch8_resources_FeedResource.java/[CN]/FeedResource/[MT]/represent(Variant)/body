{
  Representation representation=null;
  final MediaType mediaType=variant.getMediaType();
  if (MediaType.TEXT_HTML.equals(mediaType)) {
    final Map<String,Object> dataModel=new TreeMap<String,Object>();
    dataModel.put("currentUser",getCurrentUser());
    dataModel.put("mailbox",this.mailbox);
    dataModel.put("feed",this.feed);
    dataModel.put("mails",this.mails);
    dataModel.put("resourceRef",getRequest().getResourceRef());
    dataModel.put("rootRef",getRequest().getRootRef());
    final StringBuilder builder=new StringBuilder();
    builder.append("<link ");
    builder.append("rel=\"alternate\" ");
    builder.append("type=\"application/atom+xml\" ");
    builder.append("href=\"");
    builder.append(getRequest().getResourceRef().toString(false,false) + "?media=xml");
    builder.append("\" ");
    builder.append("title=\"feed\"");
    builder.append("/>");
    dataModel.put("feedHeaderContent",builder.toString());
    representation=getHTMLTemplateRepresentation("feed.html",dataModel);
  }
 else   if (MediaType.APPLICATION_ATOM.equals(mediaType)) {
    final org.restlet.ext.atom.Feed atomFeed=new org.restlet.ext.atom.Feed();
    final Person currentAuthor=new Person();
    currentAuthor.setName(this.mailbox.getSenderName());
    currentAuthor.setUri(new Reference(getRequest().getRootRef().toString() + "/mailboxes/" + Reference.encode(this.mailbox.getId(),CharacterSet.US_ASCII)));
    atomFeed.getAuthors().add(currentAuthor);
    final StringBuilder titleBuilder=new StringBuilder("Feed");
    for (    final String tag : this.feed.getTags()) {
      final Category category=new Category();
      category.setLabel(tag);
      category.setTerm(tag);
      atomFeed.getCategories().add(category);
      titleBuilder.append(" ").append(tag);
    }
    final Generator generator=new Generator();
    generator.setName("Atom extension for Restlet.");
    generator.setUri(new Reference("http://restlet.org"));
    generator.setVersion(Engine.VERSION);
    atomFeed.setGenerator(generator);
    atomFeed.setId(getRequest().getRootRef().toString() + "/mailboxes/" + this.mailbox.getId()+ "/feeds/"+ this.feed.getId());
    Link link=new Link();
    link.setHref(new Reference(getRequest().getRootRef().toString() + "/mailboxes/" + this.mailbox.getId()+ "/feeds/"+ this.feed.getId()));
    link.setRel(Relation.ALTERNATE);
    link.setTitle(titleBuilder.toString());
    link.setType(MediaType.TEXT_HTML);
    atomFeed.getLinks().add(link);
    link=new Link();
    link.setHref(getRequest().getResourceRef());
    link.setRel(Relation.SELF);
    link.setTitle(titleBuilder.toString());
    link.setType(mediaType);
    atomFeed.getLinks().add(link);
    atomFeed.setTitle(new Text(MediaType.TEXT_PLAIN,titleBuilder.toString()));
    atomFeed.setUpdated(new Date());
    for (    Mail mail : this.mails) {
      final Entry entry=new Entry();
      final Person author=new Person();
      author.setName(mail.getSender().getName());
      author.setUri(new Reference(mail.getSender().getMailAddress()));
      entry.getAuthors().add(author);
      final StringBuilder entryTitleBuilder=new StringBuilder("Feed");
      for (      final String tag : mail.getTags()) {
        final Category category=new Category();
        category.setLabel(tag);
        category.setTerm(tag);
        entry.getCategories().add(category);
        entryTitleBuilder.append(" ").append(tag);
      }
      final Content content=new Content();
      content.setInlineContent(new StringRepresentation(mail.getMessage(),MediaType.TEXT_PLAIN));
      entry.setContent(content);
      for (      Contact recipient : mail.getRecipients()) {
        final Person contributor=new Person();
        contributor.setName(recipient.getName());
        contributor.setUri(new Reference(recipient.getMailAddress()));
        entry.getContributors().add(contributor);
      }
      entry.setId(getRequest().getRootRef().toString() + "/mailboxes/" + this.mailbox.getId()+ "/mails"+ mail.getId());
      Link entryLink=new Link();
      entryLink.setHref(new Reference(getRequest().getRootRef().toString() + "/mailboxes/" + this.mailbox.getId()+ "/mails"+ mail.getId()));
      entryLink.setRel(Relation.ALTERNATE);
      entryLink.setTitle(entryTitleBuilder.toString());
      entryLink.setType(MediaType.TEXT_HTML);
      entry.getLinks().add(entryLink);
      entryLink=new Link();
      entryLink.setHref(new Reference(getRequest().getRootRef().toString() + "/mailboxes/" + this.mailbox.getId()+ "/mails"+ mail.getId()));
      entryLink.setRel(Relation.SELF);
      entryLink.setTitle(entryTitleBuilder.toString());
      entryLink.setType(mediaType);
      entry.getLinks().add(entryLink);
      entry.setPublished(mail.getSendingDate());
      if (mail.getMessage().length() > 100) {
        entry.setSummary(mail.getMessage().substring(0,97) + "...");
      }
 else {
        entry.setSummary(mail.getMessage());
      }
      entry.setTitle(new Text(MediaType.TEXT_PLAIN,mail.getSubject()));
      entry.setUpdated(mail.getSendingDate());
      atomFeed.getEntries().add(entry);
    }
    representation=atomFeed;
    representation.setMediaType(mediaType);
  }
  return representation;
}
