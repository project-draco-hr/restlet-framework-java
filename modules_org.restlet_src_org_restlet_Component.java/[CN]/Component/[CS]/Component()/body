{
  this.hosts=new CopyOnWriteArrayList<VirtualHost>();
  this.clients=new ClientList(null);
  this.servers=new ServerList(null,this);
  if (Engine.getInstance() != null) {
    this.helper=new ComponentHelper(this);
    if (this.helper != null) {
      this.defaultHost=new VirtualHost(getContext().createChildContext());
      this.internalRouter=new Router(getContext().createChildContext()){
        @Override public Route attach(        Restlet target){
          if (target.getContext() == null) {
            target.setContext(getContext().createChildContext());
          }
          return super.attach(target);
        }
        @Override public Route attach(        String uriPattern,        Restlet target){
          if (target.getContext() == null) {
            target.setContext(getContext().createChildContext());
          }
          return super.attach(uriPattern,target);
        }
        @Override public Route attachDefault(        Restlet defaultTarget){
          if (defaultTarget.getContext() == null) {
            defaultTarget.setContext(getContext().createChildContext());
          }
          return super.attachDefault(defaultTarget);
        }
        @Override public Finder createFinder(        Class<? extends Resource> targetClass){
          Finder result=super.createFinder(targetClass);
          result.setContext(getContext().createChildContext());
          return result;
        }
      }
;
      this.logService=new LogService(true);
      this.realmService=new RealmService(true);
      this.statusService=new StatusService(true);
      this.clients.setContext(getContext());
      this.servers.setContext(getContext());
    }
  }
}
