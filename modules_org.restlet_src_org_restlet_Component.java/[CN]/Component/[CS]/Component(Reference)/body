{
  this();
  final DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
  dbf.setNamespaceAware(false);
  dbf.setValidating(false);
  try {
    final DocumentBuilder db=dbf.newDocumentBuilder();
    final Document document=db.parse(new FileInputStream(new LocalReference(xmlConfigReference).getFile()));
    final NodeList clientNodes=document.getElementsByTagName("client");
    for (int i=0; i < clientNodes.getLength(); i++) {
      final Node clientNode=clientNodes.item(i);
      Node item=clientNode.getAttributes().getNamedItem("protocol");
      Client client=null;
      if (item == null) {
        item=clientNode.getAttributes().getNamedItem("protocols");
        if (item != null) {
          final String[] protocols=item.getNodeValue().split(" ");
          final List<Protocol> protocolsList=new ArrayList<Protocol>();
          for (          final String protocol : protocols) {
            protocolsList.add(getProtocol(protocol));
          }
          client=new Client(getContext(),protocolsList);
        }
      }
 else {
        client=new Client(getContext(),getProtocol(item.getNodeValue()));
      }
      if (client != null) {
        getClients().add(client);
      }
    }
    final NodeList serverNodes=document.getElementsByTagName("server");
    for (int i=0; i < serverNodes.getLength(); i++) {
      final Node serverNode=serverNodes.item(i);
      Node item=serverNode.getAttributes().getNamedItem("protocol");
      final Node portNode=serverNode.getAttributes().getNamedItem("port");
      final Node addressNode=serverNode.getAttributes().getNamedItem("address");
      Server server=null;
      if (item == null) {
        item=serverNode.getAttributes().getNamedItem("protocols");
        if (item != null) {
          final String[] protocols=item.getNodeValue().split(" ");
          final List<Protocol> protocolsList=new ArrayList<Protocol>();
          for (          final String protocol : protocols) {
            protocolsList.add(getProtocol(protocol));
          }
          final int port=getInt(portNode,Protocol.UNKNOWN_PORT);
          if (port == Protocol.UNKNOWN_PORT) {
            getLogger().warning("Please specify a port when defining a list of protocols.");
          }
 else {
            server=new Server(getContext(),protocolsList,getInt(portNode,Protocol.UNKNOWN_PORT),getServers().getTarget());
          }
        }
      }
 else {
        final Protocol protocol=getProtocol(item.getNodeValue());
        server=new Server(getContext(),protocol,getInt(portNode,protocol.getDefaultPort()),getServers().getTarget());
      }
      if (server != null) {
        if (addressNode != null) {
          final String address=addressNode.getNodeValue();
          if (address != null) {
            server.setAddress(address);
          }
        }
        getServers().add(server);
      }
      final NodeList defaultHostNodes=document.getElementsByTagName("defaultHost");
      if (defaultHostNodes.getLength() > 0) {
        parseHost(getDefaultHost(),defaultHostNodes.item(0));
      }
      final NodeList hostNodes=document.getElementsByTagName("host");
      for (int j=0; j < hostNodes.getLength(); j++) {
        final VirtualHost host=new VirtualHost();
        parseHost(host,hostNodes.item(j));
        getHosts().add(host);
      }
    }
    final NodeList internalRouterNodes=document.getElementsByTagName("internalRouter");
    if (internalRouterNodes.getLength() > 0) {
      parseRouter(getInternalRouter(),internalRouterNodes.item(0));
    }
    final NodeList logServiceNodes=document.getElementsByTagName("logService");
    if (logServiceNodes.getLength() > 0) {
      final Node node=logServiceNodes.item(0);
      Node item=node.getAttributes().getNamedItem("logFormat");
      if (item != null) {
        getLogService().setLogFormat(item.getNodeValue());
      }
      item=node.getAttributes().getNamedItem("loggerName");
      if (item != null) {
        getLogService().setLoggerName(item.getNodeValue());
      }
      item=node.getAttributes().getNamedItem("enabled");
      if (item != null) {
        getLogService().setEnabled(getBoolean(item,true));
      }
      item=node.getAttributes().getNamedItem("identityCheck");
      if (item != null) {
        getLogService().setIdentityCheck(getBoolean(item,true));
      }
    }
    final NodeList statusServiceNodes=document.getElementsByTagName("statusService");
    if (statusServiceNodes.getLength() > 0) {
      final Node node=statusServiceNodes.item(0);
      Node item=node.getAttributes().getNamedItem("contactEmail");
      if (item != null) {
        getStatusService().setContactEmail(item.getNodeValue());
      }
      item=node.getAttributes().getNamedItem("enabled");
      if (item != null) {
        getStatusService().setEnabled(getBoolean(item,true));
      }
      item=node.getAttributes().getNamedItem("homeRef");
      if (item != null) {
        getStatusService().setHomeRef(new Reference(item.getNodeValue()));
      }
      item=node.getAttributes().getNamedItem("overwrite");
      if (item != null) {
        getStatusService().setOverwrite(getBoolean(item,true));
      }
    }
  }
 catch (  final Exception e) {
    getLogger().log(Level.WARNING,"Unable to parse the Component XML configuration.",e);
  }
}
