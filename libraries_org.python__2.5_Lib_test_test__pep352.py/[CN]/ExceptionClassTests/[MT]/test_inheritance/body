def test_inheritance(self):
    exc_set = set((x for x in dir(exceptions) if (not x.startswith('_'))))
    inheritance_tree = open(os.path.join(os.path.split(__file__)[0], 'exception_hierarchy.txt'))
    try:
        superclass_name = inheritance_tree.readline().rstrip()
        try:
            last_exc = getattr(__builtin__, superclass_name)
        except AttributeError:
            self.fail(('base class %s not a built-in' % superclass_name))
        self.failUnless((superclass_name in exc_set))
        exc_set.discard(superclass_name)
        superclasses = []
        last_depth = 0
        for exc_line in inheritance_tree:
            exc_line = exc_line.rstrip()
            depth = exc_line.rindex('-')
            exc_name = exc_line[(depth + 2):]
            if ('(' in exc_name):
                paren_index = exc_name.index('(')
                platform_name = exc_name[(paren_index + 1):(-1)]
                exc_name = exc_name[:(paren_index - 1)]
                if (platform_system() != platform_name):
                    exc_set.discard(exc_name)
                    continue
            if ('[' in exc_name):
                left_bracket = exc_name.index('[')
                exc_name = exc_name[:(left_bracket - 1)]
            try:
                exc = getattr(__builtin__, exc_name)
            except AttributeError:
                self.fail(('%s not a built-in exception' % exc_name))
            if (last_depth < depth):
                superclasses.append((last_depth, last_exc))
            elif (last_depth > depth):
                while (superclasses[(-1)][0] >= depth):
                    superclasses.pop()
            self.failUnless(issubclass(exc, superclasses[(-1)][1]), ('%s is not a subclass of %s' % (exc.__name__, superclasses[(-1)][1].__name__)))
            try:
                self.verify_instance_interface(exc())
            except TypeError:
                pass
            self.failUnless((exc_name in exc_set))
            exc_set.discard(exc_name)
            last_exc = exc
            last_depth = depth
    finally:
        inheritance_tree.close()
    self.failUnlessEqual(len(exc_set), 0, ('%s not accounted for' % exc_set))
