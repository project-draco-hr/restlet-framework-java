def dumps(params, methodname=None, methodresponse=None, encoding=None, allow_none=0):
    'data [,options] -> marshalled data\n\n    Convert an argument tuple or a Fault instance to an XML-RPC\n    request (or response, if the methodresponse option is used).\n\n    In addition to the data object, the following options can be given\n    as keyword arguments:\n\n        methodname: the method name for a methodCall packet\n\n        methodresponse: true to create a methodResponse packet.\n        If this option is used with a tuple, the tuple must be\n        a singleton (i.e. it can contain only one element).\n\n        encoding: the packet encoding (default is UTF-8)\n\n    All 8-bit strings in the data structure are assumed to use the\n    packet encoding.  Unicode strings are automatically converted,\n    where necessary.\n    '
    assert (isinstance(params, TupleType) or isinstance(params, Fault)), 'argument must be tuple or Fault instance'
    if isinstance(params, Fault):
        methodresponse = 1
    elif (methodresponse and isinstance(params, TupleType)):
        assert (len(params) == 1), 'response tuple must be a singleton'
    if (not encoding):
        encoding = 'utf-8'
    if FastMarshaller:
        m = FastMarshaller(encoding)
    else:
        m = Marshaller(encoding, allow_none)
    data = m.dumps(params)
    if (encoding != 'utf-8'):
        xmlheader = ("<?xml version='1.0' encoding='%s'?>\n" % str(encoding))
    else:
        xmlheader = "<?xml version='1.0'?>\n"
    if methodname:
        if (not isinstance(methodname, StringType)):
            methodname = methodname.encode(encoding)
        data = (xmlheader, '<methodCall>\n<methodName>', methodname, '</methodName>\n', data, '</methodCall>\n')
    elif methodresponse:
        data = (xmlheader, '<methodResponse>\n', data, '</methodResponse>\n')
    else:
        return data
    return string.join(data, '')
