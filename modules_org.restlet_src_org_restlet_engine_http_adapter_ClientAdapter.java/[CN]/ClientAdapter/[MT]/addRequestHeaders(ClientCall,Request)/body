{
  if (httpCall != null) {
    Series<Parameter> requestHeaders=httpCall.getRequestHeaders();
    Reference hostRef=(request.getResourceRef().getBaseRef() != null) ? request.getResourceRef().getBaseRef() : request.getResourceRef();
    if (hostRef.getHostDomain() != null) {
      String host=hostRef.getHostDomain();
      int hostRefPortValue=hostRef.getHostPort();
      if ((hostRefPortValue != -1) && (hostRefPortValue != request.getProtocol().getDefaultPort())) {
        host=host + ':' + hostRefPortValue;
      }
      requestHeaders.add(HeaderConstants.HEADER_HOST,host);
    }
    request.setDate(new Date());
    requestHeaders.add(HeaderConstants.HEADER_DATE,DateUtils.format(request.getDate()));
    if (request.getClientInfo().getAgent() != null) {
      requestHeaders.add(HeaderConstants.HEADER_USER_AGENT,request.getClientInfo().getAgent());
    }
 else {
      requestHeaders.add(HeaderConstants.HEADER_USER_AGENT,Engine.VERSION_HEADER);
    }
    if (request.getClientInfo().getFrom() != null) {
      requestHeaders.add(HeaderConstants.HEADER_FROM,request.getClientInfo().getFrom());
    }
    Conditions condition=request.getConditions();
    if (!condition.getMatch().isEmpty()) {
      StringBuilder value=new StringBuilder();
      for (int i=0; i < condition.getMatch().size(); i++) {
        if (i > 0) {
          value.append(", ");
        }
        value.append(condition.getMatch().get(i).format());
      }
      httpCall.getRequestHeaders().add(HeaderConstants.HEADER_IF_MATCH,value.toString());
    }
    if (condition.getModifiedSince() != null) {
      String imsDate=DateUtils.format(condition.getModifiedSince());
      requestHeaders.add(HeaderConstants.HEADER_IF_MODIFIED_SINCE,imsDate);
    }
    if (!condition.getNoneMatch().isEmpty()) {
      StringBuilder value=new StringBuilder();
      for (int i=0; i < condition.getNoneMatch().size(); i++) {
        if (i > 0) {
          value.append(", ");
        }
        value.append(condition.getNoneMatch().get(i).format());
      }
      requestHeaders.add(HeaderConstants.HEADER_IF_NONE_MATCH,value.toString());
    }
    if (condition.getRangeTag() != null && condition.getRangeDate() != null) {
      getLogger().log(Level.WARNING,"Unable to format the HTTP If-Range header due to the presence of both entity tag and modification date.");
    }
 else {
      if (condition.getRangeTag() != null) {
        requestHeaders.add(HeaderConstants.HEADER_IF_RANGE,condition.getRangeTag().format());
      }
 else       if (condition.getRangeDate() != null) {
        String rDate=DateUtils.format(condition.getRangeDate(),DateUtils.FORMAT_RFC_1123.get(0));
        requestHeaders.add(HeaderConstants.HEADER_IF_RANGE,rDate);
      }
    }
    if (condition.getUnmodifiedSince() != null) {
      String iusDate=DateUtils.format(condition.getUnmodifiedSince(),DateUtils.FORMAT_RFC_1123.get(0));
      requestHeaders.add(HeaderConstants.HEADER_IF_UNMODIFIED_SINCE,iusDate);
    }
    if (request.getCookies().size() > 0) {
      String cookies=CookieUtils.format(request.getCookies());
      requestHeaders.add(HeaderConstants.HEADER_COOKIE,cookies);
    }
    if (request.getReferrerRef() != null) {
      requestHeaders.add(HeaderConstants.HEADER_REFERRER,request.getReferrerRef().toString());
    }
    ClientInfo client=request.getClientInfo();
    if (client.getAcceptedMediaTypes().size() > 0) {
      try {
        requestHeaders.add(HeaderConstants.HEADER_ACCEPT,PreferenceUtils.format(client.getAcceptedMediaTypes()));
      }
 catch (      IOException ioe) {
        getLogger().log(Level.WARNING,"Unable to format the HTTP Accept header",ioe);
      }
    }
 else {
      requestHeaders.add(HeaderConstants.HEADER_ACCEPT,MediaType.ALL.getName());
    }
    if (client.getAcceptedCharacterSets().size() > 0) {
      try {
        requestHeaders.add(HeaderConstants.HEADER_ACCEPT_CHARSET,PreferenceUtils.format(client.getAcceptedCharacterSets()));
      }
 catch (      IOException ioe) {
        getLogger().log(Level.WARNING,"Unable to format the HTTP Accept header",ioe);
      }
    }
    if (client.getAcceptedEncodings().size() > 0) {
      try {
        requestHeaders.add(HeaderConstants.HEADER_ACCEPT_ENCODING,PreferenceUtils.format(client.getAcceptedEncodings()));
      }
 catch (      IOException ioe) {
        getLogger().log(Level.WARNING,"Unable to format the HTTP Accept header",ioe);
      }
    }
    if (client.getAcceptedLanguages().size() > 0) {
      try {
        requestHeaders.add(HeaderConstants.HEADER_ACCEPT_LANGUAGE,PreferenceUtils.format(client.getAcceptedLanguages()));
      }
 catch (      IOException ioe) {
        getLogger().log(Level.WARNING,"Unable to format the HTTP Accept header",ioe);
      }
    }
    if (!request.getRanges().isEmpty()) {
      requestHeaders.add(HeaderConstants.HEADER_RANGE,org.restlet.engine.http.header.RangeUtils.formatRanges(request.getRanges()));
    }
    if (request.isEntityAvailable()) {
      if (request.getEntity().getMediaType() != null) {
        String contentType=request.getEntity().getMediaType().toString();
        if ((request.getEntity().getMediaType().getParameters().getFirstValue("charset") == null) && (request.getEntity().getCharacterSet() != null)) {
          contentType=contentType + "; charset=" + request.getEntity().getCharacterSet().getName();
        }
        requestHeaders.add(HeaderConstants.HEADER_CONTENT_TYPE,contentType);
      }
      if (!request.getEntity().getEncodings().isEmpty()) {
        final StringBuilder value=new StringBuilder();
        for (int i=0; i < request.getEntity().getEncodings().size(); i++) {
          if (i > 0) {
            value.append(", ");
          }
          value.append(request.getEntity().getEncodings().get(i).getName());
        }
        requestHeaders.add(HeaderConstants.HEADER_CONTENT_ENCODING,value.toString());
      }
      if (!request.getEntity().getLanguages().isEmpty()) {
        final StringBuilder value=new StringBuilder();
        for (int i=0; i < request.getEntity().getLanguages().size(); i++) {
          if (i > 0) {
            value.append(", ");
          }
          value.append(request.getEntity().getLanguages().get(i).getName());
        }
        requestHeaders.add(HeaderConstants.HEADER_CONTENT_LANGUAGE,value.toString());
      }
      if (request.getEntity().getSize() > 0) {
        requestHeaders.add(HeaderConstants.HEADER_CONTENT_LENGTH,String.valueOf(request.getEntity().getSize()));
      }
      if (request.getEntity().getRange() != null) {
        try {
          requestHeaders.add(HeaderConstants.HEADER_CONTENT_RANGE,org.restlet.engine.http.header.RangeUtils.formatContentRange(request.getEntity().getRange(),request.getEntity().getSize()));
        }
 catch (        Exception e) {
          getLogger().log(Level.WARNING,"Unable to format the HTTP Content-Range header",e);
        }
      }
      if (request.getEntity().getDigest() != null && org.restlet.data.Digest.ALGORITHM_MD5.equals(request.getEntity().getDigest().getAlgorithm())) {
        requestHeaders.add(HeaderConstants.HEADER_CONTENT_MD5,org.restlet.engine.util.Base64.encode(request.getEntity().getDigest().getValue(),false));
      }
    }
    Series<Parameter> additionalHeaders=(Series<Parameter>)request.getAttributes().get(HeaderConstants.ATTRIBUTE_HEADERS);
    addAdditionalHeaders(requestHeaders,additionalHeaders);
    ChallengeResponse challengeResponse=request.getChallengeResponse();
    if (challengeResponse != null) {
      try {
        requestHeaders.add(HeaderConstants.HEADER_AUTHORIZATION,org.restlet.engine.security.AuthenticatorUtils.formatResponse(challengeResponse,request,requestHeaders));
      }
 catch (      IOException e) {
        Context.getCurrentLogger().log(Level.WARNING,"Unable to write the Authorization header",e);
      }
    }
    ChallengeResponse proxyChallengeResponse=request.getProxyChallengeResponse();
    if (proxyChallengeResponse != null) {
      try {
        requestHeaders.add(HeaderConstants.HEADER_PROXY_AUTHORIZATION,org.restlet.engine.security.AuthenticatorUtils.formatResponse(proxyChallengeResponse,request,requestHeaders));
      }
 catch (      IOException e) {
        Context.getCurrentLogger().log(Level.WARNING,"Unable to write the Proxy-Authorization header",e);
      }
    }
    if (!request.getWarnings().isEmpty()) {
      for (      Warning warning : request.getWarnings()) {
        requestHeaders.add(HeaderConstants.HEADER_WARNING,WarningUtils.format(warning));
      }
    }
    if (!request.getCacheDirectives().isEmpty()) {
      requestHeaders.add(HeaderConstants.HEADER_CACHE_CONTROL,CacheControlUtils.format(request.getCacheDirectives()));
    }
  }
}
