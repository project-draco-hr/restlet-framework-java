{
  Filter filter=null;
  for (  Service service : getHelped().getServices()) {
    if (service.isEnabled()) {
      filter=service.createInboundFilter((getContext() == null) ? null : getContext().createChildContext());
      if (filter != null) {
        addInboundFilter(filter);
      }
      filter=service.createOutboundFilter((getContext() == null) ? null : getContext().createChildContext());
      if (filter != null) {
        addOutboundFilter(filter);
      }
    }
  }
  setInboundNext(getHelped().getInboundRoot());
  if (getOutboundNext() == null) {
    getLogger().fine("By default, an application should be attached to a parent component in order to let application's outbound root handle calls properly.");
    setOutboundNext(new Restlet(){
      Map<Protocol,Client> clients=new ConcurrentHashMap<Protocol,Client>();
      @Override public void handle(      Request request,      Response response){
        Protocol rProtocol=request.getProtocol();
        Reference rReference=request.getResourceRef();
        Protocol protocol=(rProtocol != null) ? rProtocol : (rReference != null) ? rReference.getSchemeProtocol() : null;
        if (protocol != null) {
          Client c=clients.get(protocol);
          if (c == null) {
            c=new Client(protocol);
            clients.put(protocol,c);
            getLogger().fine("Added runtime client for protocol: " + protocol.getName());
          }
          c.handle(request,response);
        }
 else {
          response.setStatus(Status.SERVER_ERROR_INTERNAL,"The server isn't properly configured to handle client calls.");
          getLogger().warning("There is no protocol detected for this request: " + request.getResourceRef());
        }
      }
      @Override public synchronized void stop() throws Exception {
        super.stop();
        for (        Client client : clients.values()) {
          client.stop();
        }
      }
    }
);
  }
}
