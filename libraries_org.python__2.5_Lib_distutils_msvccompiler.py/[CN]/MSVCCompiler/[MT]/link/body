def link(self, target_desc, objects, output_filename, output_dir=None, libraries=None, library_dirs=None, runtime_library_dirs=None, export_symbols=None, debug=0, extra_preargs=None, extra_postargs=None, build_temp=None, target_lang=None):
    if (not self.initialized):
        self.initialize()
    (objects, output_dir) = self._fix_object_args(objects, output_dir)
    (libraries, library_dirs, runtime_library_dirs) = self._fix_lib_args(libraries, library_dirs, runtime_library_dirs)
    if runtime_library_dirs:
        self.warn(("I don't know what to do with 'runtime_library_dirs': " + str(runtime_library_dirs)))
    lib_opts = gen_lib_options(self, library_dirs, runtime_library_dirs, libraries)
    if (output_dir is not None):
        output_filename = os.path.join(output_dir, output_filename)
    if self._need_link(objects, output_filename):
        if (target_desc == CCompiler.EXECUTABLE):
            if debug:
                ldflags = self.ldflags_shared_debug[1:]
            else:
                ldflags = self.ldflags_shared[1:]
        elif debug:
            ldflags = self.ldflags_shared_debug
        else:
            ldflags = self.ldflags_shared
        export_opts = []
        for sym in (export_symbols or []):
            export_opts.append(('/EXPORT:' + sym))
        ld_args = ((((ldflags + lib_opts) + export_opts) + objects) + [('/OUT:' + output_filename)])
        if (export_symbols is not None):
            (dll_name, dll_ext) = os.path.splitext(os.path.basename(output_filename))
            implib_file = os.path.join(os.path.dirname(objects[0]), self.library_filename(dll_name))
            ld_args.append(('/IMPLIB:' + implib_file))
        if extra_preargs:
            ld_args[:0] = extra_preargs
        if extra_postargs:
            ld_args.extend(extra_postargs)
        self.mkpath(os.path.dirname(output_filename))
        try:
            self.spawn(([self.linker] + ld_args))
        except DistutilsExecError as msg:
            raise LinkError, msg
    else:
        log.debug('skipping %s (up-to-date)', output_filename)
