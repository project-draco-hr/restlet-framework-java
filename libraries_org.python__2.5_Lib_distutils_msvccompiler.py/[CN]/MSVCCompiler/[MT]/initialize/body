def initialize(self):
    self.__paths = []
    if (os.environ.has_key('DISTUTILS_USE_SDK') and os.environ.has_key('MSSdk') and self.find_exe('cl.exe')):
        self.cc = 'cl.exe'
        self.linker = 'link.exe'
        self.lib = 'lib.exe'
        self.rc = 'rc.exe'
        self.mc = 'mc.exe'
    else:
        self.__paths = self.get_msvc_paths('path')
        if (len(self.__paths) == 0):
            raise DistutilsPlatformError, ("Python was built with %s, and extensions need to be built with the same version of the compiler, but it isn't installed." % self.__product)
        self.cc = self.find_exe('cl.exe')
        self.linker = self.find_exe('link.exe')
        self.lib = self.find_exe('lib.exe')
        self.rc = self.find_exe('rc.exe')
        self.mc = self.find_exe('mc.exe')
        self.set_path_env_var('lib')
        self.set_path_env_var('include')
    try:
        for p in string.split(os.environ['path'], ';'):
            self.__paths.append(p)
    except KeyError:
        pass
    self.__paths = normalize_and_reduce_paths(self.__paths)
    os.environ['path'] = string.join(self.__paths, ';')
    self.preprocess_options = None
    if (self.__arch == 'Intel'):
        self.compile_options = ['/nologo', '/Ox', '/MD', '/W3', '/GX', '/DNDEBUG']
        self.compile_options_debug = ['/nologo', '/Od', '/MDd', '/W3', '/GX', '/Z7', '/D_DEBUG']
    else:
        self.compile_options = ['/nologo', '/Ox', '/MD', '/W3', '/GS-', '/DNDEBUG']
        self.compile_options_debug = ['/nologo', '/Od', '/MDd', '/W3', '/GS-', '/Z7', '/D_DEBUG']
    self.ldflags_shared = ['/DLL', '/nologo', '/INCREMENTAL:NO']
    if (self.__version >= 7):
        self.ldflags_shared_debug = ['/DLL', '/nologo', '/INCREMENTAL:no', '/DEBUG']
    else:
        self.ldflags_shared_debug = ['/DLL', '/nologo', '/INCREMENTAL:no', '/pdb:None', '/DEBUG']
    self.ldflags_static = ['/nologo']
    self.initialized = True
