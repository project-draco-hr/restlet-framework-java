def compile(self, sources, output_dir=None, macros=None, include_dirs=None, debug=0, extra_preargs=None, extra_postargs=None, depends=None):
    if (not self.initialized):
        self.initialize()
    (macros, objects, extra_postargs, pp_opts, build) = self._setup_compile(output_dir, macros, include_dirs, sources, depends, extra_postargs)
    compile_opts = (extra_preargs or [])
    compile_opts.append('/c')
    if debug:
        compile_opts.extend(self.compile_options_debug)
    else:
        compile_opts.extend(self.compile_options)
    for obj in objects:
        try:
            (src, ext) = build[obj]
        except KeyError:
            continue
        if debug:
            src = os.path.abspath(src)
        if (ext in self._c_extensions):
            input_opt = ('/Tc' + src)
        elif (ext in self._cpp_extensions):
            input_opt = ('/Tp' + src)
        elif (ext in self._rc_extensions):
            input_opt = src
            output_opt = ('/fo' + obj)
            try:
                self.spawn(((([self.rc] + pp_opts) + [output_opt]) + [input_opt]))
            except DistutilsExecError as msg:
                raise CompileError, msg
            continue
        elif (ext in self._mc_extensions):
            h_dir = os.path.dirname(src)
            rc_dir = os.path.dirname(obj)
            try:
                self.spawn((([self.mc] + ['-h', h_dir, '-r', rc_dir]) + [src]))
                (base, _) = os.path.splitext(os.path.basename(src))
                rc_file = os.path.join(rc_dir, (base + '.rc'))
                self.spawn((([self.rc] + [('/fo' + obj)]) + [rc_file]))
            except DistutilsExecError as msg:
                raise CompileError, msg
            continue
        else:
            raise CompileError(("Don't know how to compile %s to %s" % (src, obj)))
        output_opt = ('/Fo' + obj)
        try:
            self.spawn((((([self.cc] + compile_opts) + pp_opts) + [input_opt, output_opt]) + extra_postargs))
        except DistutilsExecError as msg:
            raise CompileError, msg
    return objects
