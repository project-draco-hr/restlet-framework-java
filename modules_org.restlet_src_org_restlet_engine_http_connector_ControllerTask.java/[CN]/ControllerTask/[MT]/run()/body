{
  while (true) {
    try {
      if (isOverloaded()) {
        setOverloaded(isWorkerServiceBusy());
      }
 else {
        if (isWorkerServiceBusy()) {
          setOverloaded(true);
          getHelper().getLogger().log(Level.INFO,"Can't submit additional tasks. Consider increasing the maximum number of threads.");
        }
 else {
          for (          final Connection<?> conn : getHelper().getConnections()) {
            if (conn.canRead()) {
              execute(new Runnable(){
                public void run(){
                  conn.readMessages();
                }
              }
);
            }
            if (conn.canWrite()) {
              execute(new Runnable(){
                public void run(){
                  conn.writeMessages();
                }
              }
);
            }
            if (conn.getState() == ConnectionState.CLOSED) {
              getHelper().getConnections().remove(conn);
            }
          }
          for (int i=0; i < getHelper().getInboundMessages().size(); i++) {
            final Response response=getHelper().getInboundMessages().poll();
            if (response != null) {
              execute(new Runnable(){
                public void run(){
                  getHelper().handleInbound(response);
                }
              }
);
            }
          }
          for (int i=0; i < getHelper().getOutboundMessages().size(); i++) {
            final Response response=getHelper().getOutboundMessages().poll();
            if (response != null) {
              execute(new Runnable(){
                public void run(){
                  getHelper().handleOutbound(response);
                }
              }
);
            }
          }
        }
      }
      Thread.sleep(getHelper().getControllerSleepTimeMs());
    }
 catch (    Exception ex) {
      this.helper.getLogger().log(Level.WARNING,"Unexpected error while controlling connections",ex);
    }
  }
}
