def test_map(self):
    self.assertEqual(map(None, 'hello world'), ['h', 'e', 'l', 'l', 'o', ' ', 'w', 'o', 'r', 'l', 'd'])
    self.assertEqual(map(None, 'abcd', 'efg'), [('a', 'e'), ('b', 'f'), ('c', 'g'), ('d', None)])
    self.assertEqual(map(None, range(10)), [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
    self.assertEqual(map((lambda x: (x * x)), range(1, 4)), [1, 4, 9])
    try:
        from math import sqrt
    except ImportError:

        def sqrt(x):
            return pow(x, 0.5)
    self.assertEqual(map((lambda x: map(sqrt, x)), [[16, 4], [81, 9]]), [[4.0, 2.0], [9.0, 3.0]])
    self.assertEqual(map((lambda x, y: (x + y)), [1, 3, 2], [9, 1, 4]), [10, 4, 6])

    def plus(*v):
        accu = 0
        for i in v:
            accu = (accu + i)
        return accu
    self.assertEqual(map(plus, [1, 3, 7]), [1, 3, 7])
    self.assertEqual(map(plus, [1, 3, 7], [4, 9, 2]), [(1 + 4), (3 + 9), (7 + 2)])
    self.assertEqual(map(plus, [1, 3, 7], [4, 9, 2], [1, 1, 0]), [((1 + 4) + 1), ((3 + 9) + 1), ((7 + 2) + 0)])
    self.assertEqual(map(None, Squares(10)), [0, 1, 4, 9, 16, 25, 36, 49, 64, 81])
    self.assertEqual(map(int, Squares(10)), [0, 1, 4, 9, 16, 25, 36, 49, 64, 81])
    self.assertEqual(map(None, Squares(3), Squares(2)), [(0, 0), (1, 1), (4, None)])
    self.assertEqual(map(max, Squares(3), Squares(2)), [0, 1, 4])
    self.assertRaises(TypeError, map)
    self.assertRaises(TypeError, map, (lambda x: x), 42)
    self.assertEqual(map(None, [42]), [42])


    class BadSeq:

        def __getitem__(self, index):
            raise ValueError
    self.assertRaises(ValueError, map, (lambda x: x), BadSeq())

    def badfunc(x):
        raise RuntimeError
    self.assertRaises(RuntimeError, map, badfunc, range(5))
