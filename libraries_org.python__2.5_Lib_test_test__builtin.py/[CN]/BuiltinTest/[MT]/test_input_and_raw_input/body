def test_input_and_raw_input(self):
    self.write_testfile()
    fp = open(TESTFN, 'r')
    savestdin = sys.stdin
    savestdout = sys.stdout
    try:
        sys.stdin = fp
        sys.stdout = BitBucket()
        self.assertEqual(input(), 2)
        self.assertEqual(input('testing\n'), 2)
        self.assertEqual(raw_input(), 'The quick brown fox jumps over the lazy dog.')
        self.assertEqual(raw_input('testing\n'), 'Dear John')
        sys.stdout = savestdout
        sys.stdin.close()
        self.assertRaises(ValueError, input)
        sys.stdout = BitBucket()
        sys.stdin = cStringIO.StringIO('NULL\x00')
        self.assertRaises(TypeError, input, 42, 42)
        sys.stdin = cStringIO.StringIO("    'whitespace'")
        self.assertEqual(input(), 'whitespace')
        sys.stdin = cStringIO.StringIO()
        self.assertRaises(EOFError, input)
        sys.stdin = cStringIO.StringIO('1/2')
        sys.stdout = cStringIO.StringIO()
        exec compile('print input()', 'test_builtin_tmp', 'exec')
        sys.stdin.seek(0, 0)
        exec compile('from __future__ import division;print input()', 'test_builtin_tmp', 'exec')
        sys.stdin.seek(0, 0)
        exec compile('print input()', 'test_builtin_tmp', 'exec')
        if ((1 / 2) == 0):
            expected = ['0', '0.5', '0']
        else:
            expected = ['0.5', '0.5', '0.5']
        self.assertEqual(sys.stdout.getvalue().splitlines(), expected)
        del sys.stdout
        self.assertRaises(RuntimeError, input, 'prompt')
        del sys.stdin
        self.assertRaises(RuntimeError, input, 'prompt')
    finally:
        sys.stdin = savestdin
        sys.stdout = savestdout
        fp.close()
        unlink(TESTFN)
