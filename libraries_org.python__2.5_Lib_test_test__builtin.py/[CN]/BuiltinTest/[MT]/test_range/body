def test_range(self):
    self.assertEqual(range(3), [0, 1, 2])
    self.assertEqual(range(1, 5), [1, 2, 3, 4])
    self.assertEqual(range(0), [])
    self.assertEqual(range((-3)), [])
    self.assertEqual(range(1, 10, 3), [1, 4, 7])
    self.assertEqual(range(5, (-5), (-3)), [5, 2, (-1), (-4)])
    self.assertEqual(range((- (2 ** 100))), [])
    self.assertEqual(range(0, (- (2 ** 100))), [])
    self.assertEqual(range(0, (2 ** 100), (-1)), [])
    self.assertEqual(range(0, (2 ** 100), (-1)), [])
    a = long((10 * sys.maxint))
    b = long((100 * sys.maxint))
    c = long((50 * sys.maxint))
    self.assertEqual(range(a, (a + 2)), [a, (a + 1)])
    self.assertEqual(range((a + 2), a, (-1L)), [(a + 2), (a + 1)])
    self.assertEqual(range((a + 4), a, (-2)), [(a + 4), (a + 2)])
    seq = range(a, b, c)
    self.assert_((a in seq))
    self.assert_((b not in seq))
    self.assertEqual(len(seq), 2)
    seq = range(b, a, (- c))
    self.assert_((b in seq))
    self.assert_((a not in seq))
    self.assertEqual(len(seq), 2)
    seq = range((- a), (- b), (- c))
    self.assert_(((- a) in seq))
    self.assert_(((- b) not in seq))
    self.assertEqual(len(seq), 2)
    self.assertRaises(TypeError, range)
    self.assertRaises(TypeError, range, 1, 2, 3, 4)
    self.assertRaises(ValueError, range, 1, 2, 0)
    self.assertRaises(ValueError, range, a, (a + 1), long(0))


    class badzero(int):

        def __cmp__(self, other):
            raise RuntimeError
    self.assertRaises(RuntimeError, range, a, (a + 1), badzero(1))
    self.assertRaises(TypeError, range, 1e+100, 1e+101, 1e+101)
    self.assertRaises(TypeError, range, 0, 'spam')
    self.assertRaises(TypeError, range, 0, 42, 'spam')
    self.assertRaises(OverflowError, range, (- sys.maxint), sys.maxint)
    self.assertRaises(OverflowError, range, 0, (2 * sys.maxint))
