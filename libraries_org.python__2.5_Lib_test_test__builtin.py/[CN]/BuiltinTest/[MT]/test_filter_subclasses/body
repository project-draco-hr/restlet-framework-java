def test_filter_subclasses(self):
    funcs = (None, bool, (lambda x: True))


    class tuple2(tuple):

        def __getitem__(self, index):
            return (2 * tuple.__getitem__(self, index))


    class str2(str):

        def __getitem__(self, index):
            return (2 * str.__getitem__(self, index))
    inputs = {tuple2: {(): (), (1, 2, 3): (2, 4, 6), }, str2: {'': '', '123': '112233', }, }
    if have_unicode:


        class unicode2(unicode):

            def __getitem__(self, index):
                return (2 * unicode.__getitem__(self, index))
        inputs[unicode2] = {unicode(): unicode(), unicode('123'): unicode('112233'), }
    for (cls, inps) in inputs.iteritems():
        for (inp, exp) in inps.iteritems():
            self.assertEqual(filter(funcs[0], cls(inp)), filter(funcs[1], cls(inp)))
            for func in funcs:
                outp = filter(func, cls(inp))
                self.assertEqual(outp, exp)
                self.assert_((not isinstance(outp, cls)))
