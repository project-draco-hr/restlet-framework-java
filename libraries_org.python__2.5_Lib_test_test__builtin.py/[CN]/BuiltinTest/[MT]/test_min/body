def test_min(self):
    self.assertEqual(min('123123'), '1')
    self.assertEqual(min(1, 2, 3), 1)
    self.assertEqual(min((1, 2, 3, 1, 2, 3)), 1)
    self.assertEqual(min([1, 2, 3, 1, 2, 3]), 1)
    self.assertEqual(min(1, 2L, 3.0), 1)
    self.assertEqual(min(1L, 2.0, 3), 1L)
    self.assertEqual(min(1.0, 2, 3L), 1.0)
    self.assertRaises(TypeError, min)
    self.assertRaises(TypeError, min, 42)
    self.assertRaises(ValueError, min, ())


    class BadSeq:

        def __getitem__(self, index):
            raise ValueError
    self.assertRaises(ValueError, min, BadSeq())


    class BadNumber:

        def __cmp__(self, other):
            raise ValueError
    self.assertRaises(ValueError, min, (42, BadNumber()))
    for stmt in ('min(key=int)', 'min(1, key=int)', 'min(1, 2, keystone=int)', 'min(1, 2, key=int, abc=int)', 'min(1, 2, key=1)'):
        try:
            exec stmt in globals()
        except TypeError:
            pass
        else:
            self.fail(stmt)
    self.assertEqual(min((1,), key=neg), 1)
    self.assertEqual(min((1, 2), key=neg), 2)
    self.assertEqual(min(1, 2, key=neg), 2)
    data = [random.randrange(200) for i in range(100)]
    keys = dict(((elem, random.randrange(50)) for elem in data))
    f = keys.__getitem__
    self.assertEqual(min(data, key=f), sorted(data, key=f)[0])
