def test_eval(self):
    self.assertEqual(eval('1+1'), 2)
    self.assertEqual(eval(' 1+1\n'), 2)
    globals = {'a': 1, 'b': 2, }
    locals = {'b': 200, 'c': 300, }
    self.assertEqual(eval('a', globals), 1)
    self.assertEqual(eval('a', globals, locals), 1)
    self.assertEqual(eval('b', globals, locals), 200)
    self.assertEqual(eval('c', globals, locals), 300)
    if have_unicode:
        self.assertEqual(eval(unicode('1+1')), 2)
        self.assertEqual(eval(unicode(' 1+1\n')), 2)
    globals = {'a': 1, 'b': 2, }
    locals = {'b': 200, 'c': 300, }
    if have_unicode:
        self.assertEqual(eval(unicode('a'), globals), 1)
        self.assertEqual(eval(unicode('a'), globals, locals), 1)
        self.assertEqual(eval(unicode('b'), globals, locals), 200)
        self.assertEqual(eval(unicode('c'), globals, locals), 300)
        bom = '\xef\xbb\xbf'
        self.assertEqual(eval((bom + 'a'), globals, locals), 1)
        self.assertEqual(eval(unicode('u"\xc3\xa5"', 'utf8'), globals), unicode('\xc3\xa5', 'utf8'))
    self.assertRaises(TypeError, eval)
    self.assertRaises(TypeError, eval, ())
