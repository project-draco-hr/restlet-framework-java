import test.test_support, unittest
from test.test_support import fcmp, have_unicode, TESTFN, unlink, run_unittest, is_jython
from operator import neg
import sys, warnings, cStringIO, random, UserDict
warnings.filterwarnings('ignore', 'hex../oct.. of negative int', FutureWarning, __name__)
warnings.filterwarnings('ignore', 'integer argument expected', DeprecationWarning, 'unittest')
numruns = 0
L = [('0', 0), ('1', 1), ('9', 9), ('10', 10), ('99', 99), ('100', 100), ('314', 314), (' 314', 314), ('314 ', 314), ('  \t\t  314  \t\t  ', 314), (repr(sys.maxint), sys.maxint), ('  1x', ValueError), ('  1  ', 1), ('  1\x02  ', ValueError), ('', ValueError), (' ', ValueError), ('  \t\t  ', ValueError)]
if have_unicode:
    L += [(unicode('0'), 0), (unicode('1'), 1), (unicode('9'), 9), (unicode('10'), 10), (unicode('99'), 99), (unicode('100'), 100), (unicode('314'), 314), (unicode(' 314'), 314), (unicode('\\u0663\\u0661\\u0664 ', 'raw-unicode-escape'), 314), (unicode('  \t\t  314  \t\t  '), 314), (unicode('  1x'), ValueError), (unicode('  1  '), 1), (unicode('  1\x02  '), ValueError), (unicode(''), ValueError), (unicode(' '), ValueError), (unicode('  \t\t  '), ValueError), (unichr(512), ValueError)]
if (__name__ == '__main__'):
    test_main(verbose=True)
