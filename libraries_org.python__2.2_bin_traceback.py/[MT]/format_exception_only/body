def format_exception_only(etype, value):
    'Format the exception part of a traceback.\n\n    The arguments are the exception type and value such as given by\n    sys.last_type and sys.last_value. The return value is a list of\n    strings, each ending in a newline.  Normally, the list contains a\n    single string; however, for SyntaxError exceptions, it contains\n    several lines that (when printed) display detailed information\n    about where the syntax error occurred.  The message indicating\n    which exception occurred is the always last string in the list.\n    '
    list = []
    if (type(etype) == types.ClassType):
        stype = etype.__name__
    else:
        stype = etype
    if (value is None):
        list.append((str(stype) + '\n'))
    else:
        if (etype is SyntaxError):
            try:
                (msg, (filename, lineno, offset, line)) = value
            except:
                pass
            else:
                if (not filename):
                    filename = '<string>'
                list.append(('  File "%s", line %d\n' % (filename, lineno)))
                if (line is not None):
                    i = 0
                    while ((i < len(line)) and line[i].isspace()):
                        i = (i + 1)
                    list.append(('    %s\n' % line.strip()))
                    if (offset is not None):
                        s = '    '
                        for c in line[i:(offset - 1)]:
                            if c.isspace():
                                s = (s + c)
                            else:
                                s = (s + ' ')
                        list.append(('%s^\n' % s))
                    value = msg
        s = _some_str(value)
        if s:
            list.append(('%s: %s\n' % (str(stype), s)))
        else:
            list.append(('%s\n' % str(stype)))
    return list
