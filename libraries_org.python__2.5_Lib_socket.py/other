"\nThis is an updated socket module for use on JVMs > 1.4; it is derived from the\nold jython socket module.\nThe primary extra it provides is non-blocking support.\n\nXXX Restrictions:\n\n- Only INET sockets\n- Can't do a very good gethostbyaddr() right...\nAMAK: 20050527: added socket timeouts\nAMAK: 20070515: Added non-blocking (asynchronous) support\nAMAK: 20070515: Added client-side SSL support\nAMAK: 20080513: Added support for options\n"
_defaulttimeout = None
import errno
import jarray
import string
import struct
import sys
import threading
import time
import types
import java.io.BufferedInputStream
import java.io.BufferedOutputStream
import java.io.InterruptedIOException
import java.io.IOException
import java.lang.String
import java.lang.Exception
import java.net.DatagramPacket
import java.net.InetAddress
import java.net.InetSocketAddress
import java.net.Socket
import java.net.BindException
import java.net.ConnectException
import java.net.NoRouteToHostException
import java.net.PortUnreachableException
import java.net.ProtocolException
import java.net.SocketException
import java.net.SocketTimeoutException
import java.net.UnknownHostException
import java.nio.ByteBuffer
import java.nio.channels.DatagramChannel
import java.nio.channels.ServerSocketChannel
import java.nio.channels.SocketChannel
import java.nio.channels.AlreadyConnectedException
import java.nio.channels.AsynchronousCloseException
import java.nio.channels.CancelledKeyException
import java.nio.channels.ClosedByInterruptException
import java.nio.channels.ClosedChannelException
import java.nio.channels.ClosedSelectorException
import java.nio.channels.ConnectionPendingException
import java.nio.channels.IllegalBlockingModeException
import java.nio.channels.IllegalSelectorException
import java.nio.channels.NoConnectionPendingException
import java.nio.channels.NonReadableChannelException
import java.nio.channels.NonWritableChannelException
import java.nio.channels.NotYetBoundException
import java.nio.channels.NotYetConnectedException
import java.nio.channels.UnresolvedAddressException
import java.nio.channels.UnsupportedAddressTypeException
import javax.net.ssl.SSLSocketFactory
javax.net.ssl.SSLException
javax.net.ssl.SSLHandshakeException
javax.net.ssl.SSLKeyException
javax.net.ssl.SSLPeerUnverifiedException
javax.net.ssl.SSLProtocolException
import org.python.core.io.DatagramSocketIO
import org.python.core.io.ServerSocketIO
import org.python.core.io.SocketIO
from org.python.core.Py import newString as asPyString
ALL = None
_exception_map = {(java.io.IOException, ALL): (lambda : error(errno.ECONNRESET, 'Software caused connection abort')), (java.io.InterruptedIOException, ALL): (lambda : timeout('timed out')), (java.net.BindException, ALL): (lambda : error(errno.EADDRINUSE, 'Address already in use')), (java.net.ConnectException, ALL): (lambda : error(errno.ECONNREFUSED, 'Connection refused')), (java.net.NoRouteToHostException, ALL): None, (java.net.PortUnreachableException, ALL): None, (java.net.ProtocolException, ALL): None, (java.net.SocketException, ALL): None, (java.net.SocketTimeoutException, ALL): (lambda : timeout('timed out')), (java.net.UnknownHostException, ALL): (lambda : gaierror(errno.EGETADDRINFOFAILED, 'getaddrinfo failed')), (java.nio.channels.AlreadyConnectedException, ALL): (lambda : error(errno.EISCONN, 'Socket is already connected')), (java.nio.channels.AsynchronousCloseException, ALL): None, (java.nio.channels.CancelledKeyException, ALL): None, (java.nio.channels.ClosedByInterruptException, ALL): None, (java.nio.channels.ClosedChannelException, ALL): (lambda : error(errno.EPIPE, 'Socket closed')), (java.nio.channels.ClosedSelectorException, ALL): None, (java.nio.channels.ConnectionPendingException, ALL): None, (java.nio.channels.IllegalBlockingModeException, ALL): None, (java.nio.channels.IllegalSelectorException, ALL): None, (java.nio.channels.NoConnectionPendingException, ALL): None, (java.nio.channels.NonReadableChannelException, ALL): None, (java.nio.channels.NonWritableChannelException, ALL): None, (java.nio.channels.NotYetBoundException, ALL): None, (java.nio.channels.NotYetConnectedException, ALL): None, (java.nio.channels.UnresolvedAddressException, ALL): (lambda : gaierror(errno.EGETADDRINFOFAILED, 'getaddrinfo failed')), (java.nio.channels.UnsupportedAddressTypeException, ALL): None, (javax.net.ssl.SSLException, ALL): (lambda : sslerror((-1), 'SSL exception')), (javax.net.ssl.SSLHandshakeException, ALL): (lambda : sslerror((-1), 'SSL handshake exception')), (javax.net.ssl.SSLKeyException, ALL): (lambda : sslerror((-1), 'SSL key exception')), (javax.net.ssl.SSLPeerUnverifiedException, ALL): (lambda : sslerror((-1), 'SSL peer unverified exception')), (javax.net.ssl.SSLProtocolException, ALL): (lambda : sslerror((-1), 'SSL protocol exception')), }
MODE_BLOCKING = 'block'
MODE_NONBLOCKING = 'nonblock'
MODE_TIMEOUT = 'timeout'
_permitted_modes = (MODE_BLOCKING, MODE_NONBLOCKING, MODE_TIMEOUT)
SHUT_RD = 0
SHUT_WR = 1
SHUT_RDWR = 2
AF_UNSPEC = 0
AF_INET = 2
AF_INET6 = 23
AI_PASSIVE = 1
AI_CANONNAME = 2
SOCK_DGRAM = 1
SOCK_STREAM = 2
SOCK_RAW = 3
SOCK_RDM = 4
SOCK_SEQPACKET = 5
SOL_SOCKET = 65535
IPPROTO_TCP = 6
IPPROTO_UDP = 17
SO_BROADCAST = 1
SO_KEEPALIVE = 2
SO_LINGER = 4
SO_OOBINLINE = 8
SO_RCVBUF = 16
SO_REUSEADDR = 32
SO_SNDBUF = 64
SO_TIMEOUT = 128
TCP_NODELAY = 256
INADDR_ANY = '0.0.0.0'
INADDR_BROADCAST = '255.255.255.255'
SO_ACCEPTCONN = (-1)
SO_DEBUG = (-2)
SO_DONTROUTE = (-4)
SO_ERROR = (-8)
SO_EXCLUSIVEADDRUSE = (-16)
SO_RCVLOWAT = (-32)
SO_RCVTIMEO = (-64)
SO_REUSEPORT = (-128)
SO_SNDLOWAT = (-256)
SO_SNDTIMEO = (-512)
SO_TYPE = (-1024)
SO_USELOOPBACK = (-2048)
__all__ = ['AF_UNSPEC', 'AF_INET', 'AF_INET6', 'AI_PASSIVE', 'SOCK_DGRAM', 'SOCK_RAW', 'SOCK_RDM', 'SOCK_SEQPACKET', 'SOCK_STREAM', 'SOL_SOCKET', 'SO_BROADCAST', 'SO_ERROR', 'SO_KEEPALIVE', 'SO_LINGER', 'SO_OOBINLINE', 'SO_RCVBUF', 'SO_REUSEADDR', 'SO_SNDBUF', 'SO_TIMEOUT', 'TCP_NODELAY', 'INADDR_ANY', 'INADDR_BROADCAST', 'IPPROTO_TCP', 'IPPROTO_UDP', 'SocketType', 'error', 'herror', 'gaierror', 'timeout', 'getfqdn', 'gethostbyaddr', 'gethostbyname', 'gethostname', 'socket', 'getaddrinfo', 'getdefaulttimeout', 'setdefaulttimeout', 'has_ipv6', 'htons', 'htonl', 'ntohs', 'ntohl', 'SHUT_RD', 'SHUT_WR', 'SHUT_RDWR']
has_ipv6 = False
_socketmethods = ('bind', 'connect', 'connect_ex', 'fileno', 'listen', 'getpeername', 'getsockname', 'getsockopt', 'setsockopt', 'sendall', 'setblocking', 'settimeout', 'gettimeout', 'shutdown', 'getchannel')
_delegate_methods = ('recv', 'recvfrom', 'recv_into', 'recvfrom_into', 'send', 'sendto')
_active_sockets = set()
socket = SocketType = _socketobject
_realssl = ssl
if (__name__ == '__main__'):
    test()
