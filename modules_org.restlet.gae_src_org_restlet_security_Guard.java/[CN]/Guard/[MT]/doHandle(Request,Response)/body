{
  final boolean loggable=getLogger().isLoggable(Level.FINE);
switch (authenticate(request)) {
case AUTHENTICATION_VALID:
    ChallengeResponse challengeResponse=request.getChallengeResponse();
  if (loggable) {
    if (challengeResponse != null) {
      getLogger().fine("Authentication succeeded. Valid credentials provided for identifier: " + request.getChallengeResponse().getIdentifier() + ".");
    }
 else {
      getLogger().fine("Authentication succeeded. Valid credentials provided.");
    }
  }
if (authorize(request)) {
  if (loggable) {
    if (challengeResponse != null) {
      getLogger().fine("Request authorized for identifier: " + request.getChallengeResponse().getIdentifier() + ".");
    }
 else {
      getLogger().fine("Request authorized.");
    }
  }
  accept(request,response);
}
 else {
  if (loggable) {
    if (challengeResponse != null) {
      getLogger().fine("Request not authorized for identifier: " + request.getChallengeResponse().getIdentifier() + ".");
    }
 else {
      getLogger().fine("Request not authorized.");
    }
  }
  forbid(response);
}
break;
case AUTHENTICATION_MISSING:
if (loggable) {
getLogger().fine("Authentication failed. No credentials provided.");
}
challenge(response,false);
break;
case AUTHENTICATION_INVALID:
if (loggable) {
getLogger().fine("Authentication failed. Invalid credentials provided.");
}
if (isRechallengeEnabled()) {
challenge(response,false);
}
 else {
forbid(response);
}
break;
case AUTHENTICATION_STALE:
if (loggable) {
getLogger().fine("Authentication failed. Stale credentials provided.");
}
challenge(response,true);
break;
}
return CONTINUE;
}
