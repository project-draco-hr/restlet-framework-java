def __init__(self, cmd, capturestderr=0, bufsize=(-1)):
    "The parameter 'cmd' is the shell command to execute in a\n        sub-process.  Can be either a sequence of executable\n        and arguments, or a shell command.\n        The 'capturestderr' flag, if true, specifies that\n        the object should capture standard error output of the child process.\n        The default is false.  If the 'bufsize' parameter is specified, it\n        specifies the size of the I/O buffers to/from the child process.\n        "
    self.process = shellexecute(cmd)
    self._tochild = self.process.getOutputStream()
    self._fromchild = self.process.getInputStream()
    if capturestderr:
        self._childerr = self.process.getErrorStream()
    else:
        self._childerr = None
    import threading
    self.childWaiterLock = threading.Lock()
    if (bufsize > 0):
        self._tochild = BufferedOutputStream(self._tochild, bufsize)
        self._fromchild = BufferedInputStream(self._fromchild, bufsize)
        if self._childerr:
            self._childerr = BufferedInputStream(self._childerr, bufsize)
    self.tochild = PyFile(self._tochild)
    self.fromchild = PyFile(self._fromchild)
    if self._childerr:
        self.childerr = PyFile(self._childerr)
