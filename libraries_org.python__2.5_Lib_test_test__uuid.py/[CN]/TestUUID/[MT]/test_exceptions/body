def test_exceptions(self):
    badvalue = (lambda f: self.assertRaises(ValueError, f))
    badtype = (lambda f: self.assertRaises(TypeError, f))
    badvalue((lambda : uuid.UUID('')))
    badvalue((lambda : uuid.UUID('abc')))
    badvalue((lambda : uuid.UUID('1234567812345678123456781234567')))
    badvalue((lambda : uuid.UUID('123456781234567812345678123456789')))
    badvalue((lambda : uuid.UUID('123456781234567812345678z2345678')))
    badvalue((lambda : uuid.UUID(bytes='abc')))
    badvalue((lambda : uuid.UUID(bytes=('\x00' * 15))))
    badvalue((lambda : uuid.UUID(bytes=('\x00' * 17))))
    badvalue((lambda : uuid.UUID(bytes_le='abc')))
    badvalue((lambda : uuid.UUID(bytes_le=('\x00' * 15))))
    badvalue((lambda : uuid.UUID(bytes_le=('\x00' * 17))))
    badvalue((lambda : uuid.UUID(fields=(1,))))
    badvalue((lambda : uuid.UUID(fields=(1, 2, 3, 4, 5))))
    badvalue((lambda : uuid.UUID(fields=(1, 2, 3, 4, 5, 6, 7))))
    badvalue((lambda : uuid.UUID(fields=((-1), 0, 0, 0, 0, 0))))
    badvalue((lambda : uuid.UUID(fields=(4294967296L, 0, 0, 0, 0, 0))))
    badvalue((lambda : uuid.UUID(fields=(0, (-1), 0, 0, 0, 0))))
    badvalue((lambda : uuid.UUID(fields=(0, 65536L, 0, 0, 0, 0))))
    badvalue((lambda : uuid.UUID(fields=(0, 0, (-1), 0, 0, 0))))
    badvalue((lambda : uuid.UUID(fields=(0, 0, 65536L, 0, 0, 0))))
    badvalue((lambda : uuid.UUID(fields=(0, 0, 0, (-1), 0, 0))))
    badvalue((lambda : uuid.UUID(fields=(0, 0, 0, 256L, 0, 0))))
    badvalue((lambda : uuid.UUID(fields=(0, 0, 0, 0, (-1), 0))))
    badvalue((lambda : uuid.UUID(fields=(0, 0, 0, 0, 256L, 0))))
    badvalue((lambda : uuid.UUID(fields=(0, 0, 0, 0, 0, (-1)))))
    badvalue((lambda : uuid.UUID(fields=(0, 0, 0, 0, 0, 281474976710656L))))
    badvalue((lambda : uuid.UUID(('00' * 16), version=0)))
    badvalue((lambda : uuid.UUID(('00' * 16), version=6)))
    badvalue((lambda : uuid.UUID(int=(-1))))
    badvalue((lambda : uuid.UUID(int=(1 << 128L))))
    (h, b, f, i) = (('00' * 16), ('\x00' * 16), (0, 0, 0, 0, 0, 0), 0)
    uuid.UUID(h)
    uuid.UUID(hex=h)
    uuid.UUID(bytes=b)
    uuid.UUID(bytes_le=b)
    uuid.UUID(fields=f)
    uuid.UUID(int=i)
    badtype((lambda : uuid.UUID()))
    badtype((lambda : uuid.UUID(h, b)))
    badtype((lambda : uuid.UUID(h, b, b)))
    badtype((lambda : uuid.UUID(h, b, b, f)))
    badtype((lambda : uuid.UUID(h, b, b, f, i)))
    for hh in [[], [('hex', h)]]:
        for bb in [[], [('bytes', b)]]:
            for bble in [[], [('bytes_le', b)]]:
                for ii in [[], [('int', i)]]:
                    for ff in [[], [('fields', f)]]:
                        args = dict(((((hh + bb) + bble) + ii) + ff))
                        if (len(args) != 0):
                            badtype((lambda : uuid.UUID(h, **args)))
                        if (len(args) != 1):
                            badtype((lambda : uuid.UUID(**args)))
    u = uuid.UUID(h)
    badtype((lambda : setattr(u, 'hex', h)))
    badtype((lambda : setattr(u, 'bytes', b)))
    badtype((lambda : setattr(u, 'bytes_le', b)))
    badtype((lambda : setattr(u, 'fields', f)))
    badtype((lambda : setattr(u, 'int', i)))
    badtype((lambda : setattr(u, 'time_low', 0)))
    badtype((lambda : setattr(u, 'time_mid', 0)))
    badtype((lambda : setattr(u, 'time_hi_version', 0)))
    badtype((lambda : setattr(u, 'time_hi_version', 0)))
    badtype((lambda : setattr(u, 'clock_seq_hi_variant', 0)))
    badtype((lambda : setattr(u, 'clock_seq_low', 0)))
    badtype((lambda : setattr(u, 'node', 0)))
