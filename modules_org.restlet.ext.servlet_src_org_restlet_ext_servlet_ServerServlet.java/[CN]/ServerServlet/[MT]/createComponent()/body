{
  String componentClassName=getInitParameter(COMPONENT_KEY,null);
  Class<?> targetClass=null;
  Component component=null;
  if (componentClassName != null) {
    try {
      targetClass=loadClass(componentClassName);
    }
 catch (    ClassNotFoundException e) {
      log("[Restlet] ServerServlet couldn't find the target component class. Please check that your classpath includes " + componentClassName,e);
    }
  }
  log("[Restlet] ServerServlet: component class is " + componentClassName);
  if (targetClass != null) {
    try {
      @SuppressWarnings("unchecked") Constructor<? extends Component> ctor=((Class<? extends Component>)targetClass).getConstructor();
      log("[Restlet] ServerServlet: instantiating custom component");
      component=(Component)ctor.newInstance();
    }
 catch (    IllegalAccessException e) {
      log("[Restlet] ServerServlet couldn't instantiate the target class. Please check that you have proper access rights to " + componentClassName,e);
    }
catch (    InvocationTargetException e) {
      log("[Restlet] ServerServlet encountered an exception instantiating the target class " + componentClassName,e.getTargetException());
    }
catch (    InstantiationException e) {
      log(String.format("[Restlet] ServerServlet couldn't instantiate the target class. Please check that %s has %s.",componentClassName,"an empty constructor"),e);
    }
catch (    NoSuchMethodException e) {
      log(String.format("[Restlet] ServerServlet couldn't instantiate the target class. Please check that %s has %s.",componentClassName,"an empty constructor"),e);
    }
  }
  if (component == null) {
    component=new Component();
    final String clientProtocolsString=getInitParameter(CLIENTS_KEY,null);
    if (clientProtocolsString != null) {
      final String[] clientProtocols=clientProtocolsString.split(" ");
      Client client;
      for (      final String clientProtocol : clientProtocols) {
        client=new Client(clientProtocol);
        if (client.isAvailable()) {
          component.getClients().add(client);
        }
 else {
          log("[Restlet] Couldn't find a client connector for protocol " + clientProtocol);
        }
      }
    }
  }
  return component;
}
