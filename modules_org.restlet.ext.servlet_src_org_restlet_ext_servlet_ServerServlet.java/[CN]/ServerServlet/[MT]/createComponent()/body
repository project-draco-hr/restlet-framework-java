{
  Component component=null;
  Client warClient=createWarClient(new Context(),getServletConfig());
  Response response=warClient.get("war:///WEB-INF/restlet.xml");
  if (response.getStatus().isSuccess() && response.isEntityAvailable()) {
    component=new Component(response.getEntity());
  }
  if (component == null) {
    String componentClassName=getInitParameter(COMPONENT_KEY,null);
    if (componentClassName != null) {
      try {
        Class<?> targetClass=loadClass(componentClassName);
        component=(Component)targetClass.newInstance();
      }
 catch (      ClassNotFoundException e) {
        log("[Restlet] ServerServlet couldn't find the target class. Please check that your classpath includes " + componentClassName,e);
      }
catch (      InstantiationException e) {
        log("[Restlet] ServerServlet couldn't instantiate the target class. Please check this class has an empty constructor " + componentClassName,e);
      }
catch (      IllegalAccessException e) {
        log("[Restlet] ServerServlet couldn't instantiate the target class. Please check that you have to proper access rights to " + componentClassName,e);
      }
    }
  }
  if (component == null) {
    component=new Component();
    component.getStatusService().setEnabled(false);
    final String clientProtocolsString=getInitParameter(CLIENTS_KEY,null);
    if (clientProtocolsString != null) {
      final String[] clientProtocols=clientProtocolsString.split(" ");
      Client client;
      for (      final String clientProtocol : clientProtocols) {
        client=new Client(clientProtocol);
        if (client.isAvailable()) {
          component.getClients().add(client);
        }
 else {
          log("[Restlet] Couldn't find a client connector for protocol " + clientProtocol);
        }
      }
    }
  }
  return component;
}
