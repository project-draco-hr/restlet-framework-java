from test.test_support import TestFailed, verify, vereq, check_syntax
import sys
print '1. Parser'
print '1.1 Tokens'
print '1.1.1 Backslashes'
x = (1 + 1)
if (x != 2):
    raise TestFailed, 'backslash for line continuation'
x = 0
if (x != 0):
    raise TestFailed, 'backslash ending comment'
print '1.1.2 Numeric literals'
print '1.1.2.1 Plain integers'
if (255 != 255):
    raise TestFailed, 'hex int'
if (255 != 255):
    raise TestFailed, 'octal int'
if (2147483647 != 2147483647):
    raise TestFailed, 'large positive int'
try:
    from sys import maxint
except ImportError:
    maxint = 2147483647
if (maxint == 2147483647):
    if (((-2147483647) - 1) != (-2147483648)):
        raise TestFailed, 'max negative int'
    if (4294967295 < 0):
        raise TestFailed, 'large oct'
    if (4294967295 < 0):
        raise TestFailed, 'large hex'
    for s in ('2147483648', '040000000000', '0x100000000'):
        try:
            x = eval(s)
        except OverflowError:
            print ('OverflowError on huge integer literal ' + repr(s))
elif eval('maxint == 9223372036854775807'):
    if eval('-9223372036854775807-1 != -01000000000000000000000'):
        raise TestFailed, 'max negative int'
    if (eval('01777777777777777777777') < 0):
        raise TestFailed, 'large oct'
    if (eval('0xffffffffffffffff') < 0):
        raise TestFailed, 'large hex'
    for s in ('9223372036854775808', '02000000000000000000000', '0x10000000000000000'):
        try:
            x = eval(s)
        except OverflowError:
            print ('OverflowError on huge integer literal ' + repr(s))
else:
    print 'Weird maxint value', maxint
print '1.1.2.2 Long integers'
x = 0L
x = 0L
x = 18446744073709551615L
x = 18446744073709551615L
x = 2251799813685247L
x = 2251799813685247L
x = 123456789012345678901234567890L
x = 123456789012345678901234567890L
print '1.1.2.3 Floating point'
x = 3.14
x = 314.0
x = 0.314
x = 0.314
x = 300000000000000.0
x = 300000000000000.0
x = 3e-14
x = 300000000000000.0
x = 300000000000000.0
x = 30000000000000.0
x = 31000.0
print '1.1.3 String literals'
x = ''
y = ''
verify(((len(x) == 0) and (x == y)))
x = "'"
y = "'"
verify(((len(x) == 1) and (x == y) and (ord(x) == 39)))
x = '"'
y = '"'
verify(((len(x) == 1) and (x == y) and (ord(x) == 34)))
x = 'doesn\'t "shrink" does it'
y = 'doesn\'t "shrink" does it'
verify(((len(x) == 24) and (x == y)))
x = 'does "shrink" doesn\'t it'
y = 'does "shrink" doesn\'t it'
verify(((len(x) == 24) and (x == y)))
x = '\nThe "quick"\nbrown fox\njumps over\nthe \'lazy\' dog.\n'
y = '\nThe "quick"\nbrown fox\njumps over\nthe \'lazy\' dog.\n'
verify((x == y))
y = '\nThe "quick"\nbrown fox\njumps over\nthe \'lazy\' dog.\n'
verify((x == y))
y = '\nThe "quick"\nbrown fox\njumps over\nthe \'lazy\' dog.\n'
verify((x == y))
y = '\nThe "quick"\nbrown fox\njumps over\nthe \'lazy\' dog.\n'
verify((x == y))
print '1.2 Grammar'
print 'single_input'
print 'file_input'
print 'expr_input'
print 'eval_input'
x = eval('1, 0 or 1')
print 'funcdef'
f1()
f1(*())
f1(*(), **{})
vereq(f2.func_code.co_varnames, ('one_argument',))
vereq(f3.func_code.co_varnames, ('two', 'arguments'))
if sys.platform.startswith('java'):
    vereq(f4.func_code.co_varnames, ('two', '(compound, (argument, list))', 'compound', 'argument', 'list'))
    vereq(f5.func_code.co_varnames, ('(compound, first)', 'two', 'compound', 'first'))
else:
    vereq(f4.func_code.co_varnames, ('two', '.1', 'compound', 'argument', 'list'))
    vereq(f5.func_code.co_varnames, ('.0', 'two', 'compound', 'first'))
if sys.platform.startswith('java'):
    verify((v3.func_code.co_varnames == ('a', '(b, c)', 'rest', 'b', 'c')))
else:
    vereq(v3.func_code.co_varnames, ('a', '.1', 'rest', 'b', 'c'))
verify((v3(1, (2, 3), 4) == (1, 2, 3, (4,))))
d01()
d01(1)
d01(*(1,))
d01(**{'a': 2, })
d11(1)
d11(1, 2)
d11(1, **{'b': 2, })
d21(1, 2)
d21(1, 2, 3)
d21(*(1, 2, 3))
d21(1, *(2, 3))
d21(1, 2, *(3,))
d21(1, 2, **{'c': 3, })
d02()
d02(1)
d02(1, 2)
d02(*(1, 2))
d02(1, *(2,))
d02(1, **{'b': 2, })
d02(**{'a': 1, 'b': 2, })
d12(1)
d12(1, 2)
d12(1, 2, 3)
d22(1, 2)
d22(1, 2, 3)
d22(1, 2, 3, 4)
d01v()
d01v(1)
d01v(1, 2)
d01v(*(1, 2, 3, 4))
d01v(*(1,))
d01v(**{'a': 2, })
d11v(1)
d11v(1, 2)
d11v(1, 2, 3)
d21v(1, 2)
d21v(1, 2, 3)
d21v(1, 2, 3, 4)
d21v(*(1, 2, 3, 4))
d21v(1, 2, **{'c': 3, })
d02v()
d02v(1)
d02v(1, 2)
d02v(1, 2, 3)
d02v(1, *(2, 3, 4))
d02v(**{'a': 1, 'b': 2, })
d12v(1)
d12v(1, 2)
d12v(1, 2, 3)
d12v(1, 2, 3, 4)
d12v(*(1, 2, 3, 4))
d12v(1, 2, *(3, 4, 5))
d12v(1, *(2,), **{'c': 3, })
d22v(1, 2)
d22v(1, 2, 3)
d22v(1, 2, 3, 4)
d22v(1, 2, 3, 4, 5)
d22v(*(1, 2, 3, 4))
d22v(1, 2, *(3, 4, 5))
d22v(1, *(2, 3), **{'d': 4, })
d31v(1)
d32v((1,))
check_syntax('f(*g(1=2))')
check_syntax('f(**g(1=2))')
print 'lambdef'
l1 = (lambda : 0)
verify((l1() == 0))
l2 = (lambda : a[d])
l3 = (lambda : [(2 < x) for x in [(-1), 3, 0L]])
verify((l3() == [0, 1, 0]))
l4 = (lambda x=(lambda y=(lambda z=1: z): y()): x())
verify((l4() == 1))
l5 = (lambda x, y, z=2: ((x + y) + z))
verify((l5(1, 2) == 5))
verify((l5(1, 2, 3) == 6))
check_syntax('lambda x: x = 2')
check_syntax('lambda (None,): None')
print 'simple_stmt'
x = 1
pass
del x
foo()
print 'expr_stmt'
1
(1, 2, 3)
x = 1
x = (1, 2, 3)
x = y = z = (1, 2, 3)
(x, y, z) = (1, 2, 3)
abc = (a, b, c) = (x, y, z) = xyz = (1, 2, (3, 4))
check_syntax('x + 1 = 1')
check_syntax('a + 1 = b + 2')
print 'print_stmt'
print 1, 2, 3
print 1, 2, 3,
print 
print (0 or 1), (0 or 1),
print (0 or 1)
print 'extended print_stmt'
import sys
print  >> sys.stdout, 1, 2, 3
print  >> sys.stdout, 1, 2, 3,
print  >> sys.stdout
print  >> sys.stdout, (0 or 1), (0 or 1),
print  >> sys.stdout, (0 or 1)
gulp = Gulp()
print  >> gulp, 1, 2, 3
print  >> gulp, 1, 2, 3,
print  >> gulp
print  >> gulp, (0 or 1), (0 or 1),
print  >> gulp, (0 or 1)
driver()
driver()
check_syntax('print ,')
check_syntax('print >> x,')
print 'del_stmt'
del abc
del x, y, (z, xyz)
print 'pass_stmt'
pass
print 'flow_stmt'
print 'break_stmt'
while 1:
    break
print 'continue_stmt'
i = 1
while i:
    i = 0
    continue
msg = ''
while (not msg):
    msg = 'continue + try/except ok'
    try:
        continue
        msg = 'continue failed to continue inside try'
    except:
        msg = 'continue inside try called except block'
print msg
msg = ''
while (not msg):
    msg = 'finally block not called'
    try:
        continue
    finally:
        msg = 'continue + try/finally ok'
print msg
print 'testing continue and break in try/except in loop'
test_break_continue_loop()
print 'return_stmt'
g1()
x = g2()
check_syntax('class foo:return 1')
print 'yield_stmt'
check_syntax('class foo:yield 1')
print 'raise_stmt'
try:
    raise RuntimeError, 'just testing'
except RuntimeError:
    pass
try:
    raise KeyboardInterrupt
except KeyboardInterrupt:
    pass
print 'import_name'
import sys
import time, sys
print 'import_from'
from time import time
from time import time
from sys import *
from sys import path, argv
from sys import path, argv
from sys import path, argv
print 'global_stmt'
print 'exec_stmt'
f()
g = {}
exec 'z = 1' in g
if g.has_key('__builtins__'):
    del g['__builtins__']
if (g != {'z': 1, }):
    raise TestFailed, "exec 'z = 1' in g"
g = {}
l = {}
import warnings
warnings.filterwarnings('ignore', 'global statement', module='<string>')
exec 'global a; a = 1; b = 2' in g, l
if g.has_key('__builtins__'):
    del g['__builtins__']
if l.has_key('__builtins__'):
    del l['__builtins__']
if ((g, l) != ({'a': 1, }, {'b': 2, })):
    raise TestFailed, ('exec ... in g (%s), l (%s)' % (g, l))
print 'assert_stmt'
assert 1
assert 1, 1
assert (lambda x: x)
assert 1, (lambda x: (x + 1))
print 'if_stmt'
if 1:
    pass
if 1:
    pass
else:
    pass
if 0:
    pass
elif 0:
    pass
if 0:
    pass
elif 0:
    pass
elif 0:
    pass
elif 0:
    pass
else:
    pass
print 'while_stmt'
while 0:
    pass
while 0:
    pass
else:
    pass
x = 0
while 0:
    x = 1
else:
    x = 2
assert (x == 2)
print 'for_stmt'
for i in (1, 2, 3):
    pass
for (i, j, k) in ():
    pass
else:
    pass
n = 0
for x in Squares(10):
    n = (n + x)
if (n != 285):
    raise TestFailed, 'for over growing sequence'
result = []
for (x,) in [(1,), (2,), (3,)]:
    result.append(x)
vereq(result, [1, 2, 3])
print 'try_stmt'
try:
    (1 / 0)
except ZeroDivisionError:
    pass
else:
    pass
try:
    (1 / 0)
except EOFError:
    pass
except TypeError as msg:
    pass
except RuntimeError as msg:
    pass
except:
    pass
else:
    pass
try:
    (1 / 0)
except (EOFError, TypeError, ZeroDivisionError):
    pass
try:
    (1 / 0)
except (EOFError, TypeError, ZeroDivisionError) as msg:
    pass
try:
    pass
finally:
    pass
print 'suite'
if 1:
    pass
if 1:
    pass
if 1:
    pass
    pass
    pass
print 'test'
if (not 1):
    pass
if (1 and 1):
    pass
if (1 or 1):
    pass
if (not (not (not 1))):
    pass
if ((not 1) and 1 and 1):
    pass
if ((1 and 1) or (1 and 1 and 1) or ((not 1) and 1)):
    pass
print 'comparison'
if 1:
    pass
x = (1 == 1)
if (1 == 1):
    pass
if (1 != 1):
    pass
if (1 != 1):
    pass
if (1 < 1):
    pass
if (1 > 1):
    pass
if (1 <= 1):
    pass
if (1 >= 1):
    pass
if (1 is 1):
    pass
if (1 is not 1):
    pass
if (1 in ()):
    pass
if (1 not in ()):
    pass
if (1 < 1 > 1 == 1 >= 1 <= 1 != 1 != 1 in 1 not in 1 is 1 is not 1):
    pass
print 'binary mask ops'
x = (1 & 1)
x = (1 ^ 1)
x = (1 | 1)
print 'shift ops'
x = (1 << 1)
x = (1 >> 1)
x = ((1 << 1) >> 1)
print 'additive ops'
x = 1
x = (1 + 1)
x = ((1 - 1) - 1)
x = ((((1 - 1) + 1) - 1) + 1)
print 'multiplicative ops'
x = (1 * 1)
x = (1 / 1)
x = (1 % 1)
x = (((1 / 1) * 1) % 1)
print 'unary ops'
x = (+ 1)
x = (-1)
x = (~ 1)
x = (((~ 1) ^ (1 & 1)) | ((1 & 1) ^ (-1)))
x = (((((-1) * 1) / 1) + (1 * 1)) - ((- (- (-1))) * 1))
print 'selectors'
f1()
f2(1)
f2(1)
f3(1, 2)
f3(1, 2)
f4(1, (2, (3, 4)))
v0()
v0(1)
v0(1)
v0(1, 2)
v0(1, 2, 3, 4, 5, 6, 7, 8, 9, 0)
v1(1)
v1(1)
v1(1, 2)
v1(1, 2, 3)
v1(1, 2, 3, 4, 5, 6, 7, 8, 9, 0)
v2(1, 2)
v2(1, 2, 3)
v2(1, 2, 3, 4)
v2(1, 2, 3, 4, 5, 6, 7, 8, 9, 0)
v3(1, (2, 3))
v3(1, (2, 3), 4)
v3(1, (2, 3), 4, 5, 6, 7, 8, 9, 0)
print 
import sys, time
c = sys.path[0]
x = time.time()
x = sys.modules['time'].time()
a = '01234'
c = a[0]
c = a[(-1)]
s = a[0:5]
s = a[:5]
s = a[0:]
s = a[:]
s = a[(-5):]
s = a[:(-1)]
s = a[(-4):(-3)]
d = {}
d[1] = 1
d[(1,)] = 2
d[(1, 2)] = 3
d[(1, 2, 3)] = 4
L = list(d)
L.sort()
print L
print 'atoms'
x = 1
x = (1 or 2 or 3)
x = ((1 or 2 or 3), 2, 3)
x = []
x = [1]
x = [(1 or 2 or 3)]
x = [(1 or 2 or 3), 2, 3]
x = []
x = {}
x = {'one': 1, }
x = {'one': 1, }
x = {('one' or 'two'): (1 or 2), }
x = {'one': 1, 'two': 2, }
x = {'one': 1, 'two': 2, }
x = {'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, }
x = `x`
x = `(1 or 2 or 3)`
x = `(1, 2)`
x = x
x = 'x'
x = 123
print 'classdef'
nums = [1, 2, 3, 4, 5]
strs = ['Apple', 'Banana', 'Coconut']
spcs = ['  Apple', ' Banana ', 'Coco  nut  ']
print [s.strip() for s in spcs]
print [(3 * x) for x in nums]
print [x for x in nums if (x > 2)]
print [(i, s) for i in nums for s in strs]
print [(i, s) for i in nums for s in [f for f in strs if ('n' in f)]]
print [(lambda a: [(a ** i) for i in range((a + 1))])(j) for j in range(5)]
print test_in_func(nums)
test_nested_front()
check_syntax('[i, s for i in nums for s in strs]')
check_syntax('[x if y]')
suppliers = [(1, 'Boeing'), (2, 'Ford'), (3, 'Macdonalds')]
parts = [(10, 'Airliner'), (20, 'Engine'), (30, 'Cheeseburger')]
suppart = [(1, 10), (1, 20), (2, 20), (3, 30)]
print [(sname, pname) for (sno, sname) in suppliers for (pno, pname) in parts for (sp_sno, sp_pno) in suppart if ((sno == sp_sno) and (pno == sp_pno))]
g = ([x for x in range(10)] for x in range(1))
verify((g.next() == [x for x in range(10)]))
try:
    g.next()
    raise TestFailed, 'should produce StopIteration exception'
except StopIteration:
    pass
a = 1
try:
    g = (a for d in a)
    g.next()
    raise TestFailed, 'should produce TypeError'
except TypeError:
    pass
verify((list(((x, y) for x in 'abcd' for y in 'abcd')) == [(x, y) for x in 'abcd' for y in 'abcd']))
verify((list(((x, y) for x in 'ab' for y in 'xy')) == [(x, y) for x in 'ab' for y in 'xy']))
a = [x for x in range(10)]
b = (x for x in (y for y in a))
verify((sum(b) == sum([x for x in range(10)])))
verify((sum(((x ** 2) for x in range(10))) == sum([(x ** 2) for x in range(10)])))
verify((sum(((x * x) for x in range(10) if (x % 2))) == sum([(x * x) for x in range(10) if (x % 2)])))
verify((sum((x for x in (y for y in range(10)))) == sum([x for x in range(10)])))
verify((sum((x for x in (y for y in (z for z in range(10))))) == sum([x for x in range(10)])))
verify((sum((x for x in [y for y in (z for z in range(10))])) == sum([x for x in range(10)])))
verify((sum((x for x in (y for y in (z for z in range(10) if True)) if True)) == sum([x for x in range(10)])))
verify((sum((x for x in (y for y in (z for z in range(10) if True) if False) if True)) == 0))
check_syntax('foo(x for x in range(10), 100)')
check_syntax('foo(100, x for x in range(10))')
x = 10
g = (i for i in range(x))
x = 5
verify((len(list(g)) == 10))
x = 10
t = False
g = ((i, j) for i in range(x) if t for j in range(x))
x = 5
t = True
verify(([(i, j) for i in range(10) for j in range(5)] == list(g)))
verify([x for x in range(10) if (x % 2) if (x % 3)], [1, 5, 7])
verify((x for x in range(10) if (x % 2) if (x % 3)), [1, 5, 7])
vereq([x for (x,) in [(4,), (5,), (6,)]], [4, 5, 6])
vereq(list((x for (x,) in [(7,), (8,), (9,)])), [7, 8, 9])
verify(([x() for x in ((lambda : True), (lambda : False)) if x()] == [True]))
verify(([x() for x in ((lambda : True), (lambda : False)) if x()] == [True]))
verify(([x(False) for x in ((lambda x: (False if x else True)), (lambda x: (True if x else False))) if x(False)] == [True]))
verify(((5 if 1 else _checkeval('check 1', 0)) == 5))
verify(((_checkeval('check 2', 0) if 0 else 5) == 5))
verify((((5 and 6) if 0 else 1) == 1))
verify((((5 and 6) if 0 else 1) == 1))
verify(((5 and (6 if 1 else 1)) == 6))
verify((((0 or _checkeval('check 3', 2)) if 0 else 3) == 3))
verify((((1 or _checkeval('check 4', 2)) if 1 else _checkeval('check 5', 3)) == 1))
verify((((0 or 5) if 1 else _checkeval('check 6', 3)) == 5))
verify((((not 5) if 1 else 1) == False))
verify((((not 5) if 0 else 1) == 1))
verify((((6 + 1) if 1 else 2) == 7))
verify((((6 - 1) if 1 else 2) == 5))
verify((((6 * 2) if 1 else 4) == 12))
verify((((6 / 2) if 1 else 3) == 3))
verify((((6 < 4) if 0 else 2) == 2))
