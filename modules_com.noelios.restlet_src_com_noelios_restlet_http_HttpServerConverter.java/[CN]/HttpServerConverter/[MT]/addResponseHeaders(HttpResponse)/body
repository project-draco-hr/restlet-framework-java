{
  try {
    Series<Parameter> responseHeaders=response.getHttpCall().getResponseHeaders();
    if (response.getStatus().equals(Status.CLIENT_ERROR_METHOD_NOT_ALLOWED) || Method.OPTIONS.equals(response.getRequest().getMethod())) {
      StringBuilder sb=new StringBuilder();
      boolean first=true;
      for (      Method method : response.getAllowedMethods()) {
        if (first) {
          first=false;
        }
 else {
          sb.append(", ");
        }
        sb.append(method.getName());
      }
      responseHeaders.add(HttpConstants.HEADER_ALLOW,sb.toString());
    }
    responseHeaders.add(HttpConstants.HEADER_DATE,DateUtils.format(new Date(),DateUtils.FORMAT_RFC_1123.get(0)));
    List<CookieSetting> cookies=response.getCookieSettings();
    for (int i=0; i < cookies.size(); i++) {
      responseHeaders.add(HttpConstants.HEADER_SET_COOKIE,CookieUtils.format(cookies.get(i)));
    }
    if (response.getLocationRef() != null) {
      responseHeaders.add(HttpConstants.HEADER_LOCATION,response.getLocationRef().toString());
    }
    if (response.getChallengeRequest() != null) {
      responseHeaders.add(HttpConstants.HEADER_WWW_AUTHENTICATE,SecurityUtils.format(response.getChallengeRequest()));
    }
    response.getHttpCall().getResponseHeaders().add(HttpConstants.HEADER_SERVER,response.getServerInfo().getAgent());
    if (response.getStatus() != null) {
      response.getHttpCall().setStatusCode(response.getStatus().getCode());
      response.getHttpCall().setReasonPhrase(response.getStatus().getDescription());
    }
    if (!(response.getRequest().getClientInfo().getAgent() != null && response.getRequest().getClientInfo().getAgent().contains("MSIE"))) {
      Set<Dimension> dimensions=response.getDimensions();
      if (!dimensions.isEmpty()) {
        StringBuilder sb=new StringBuilder();
        boolean first=true;
        if (dimensions.contains(Dimension.CLIENT_ADDRESS) || dimensions.contains(Dimension.TIME) || dimensions.contains(Dimension.UNSPECIFIED)) {
          responseHeaders.add(HttpConstants.HEADER_VARY,"*");
        }
 else {
          for (          Dimension dim : response.getDimensions()) {
            if (first) {
              first=false;
            }
 else {
              sb.append(", ");
            }
            if (dim == Dimension.CHARACTER_SET) {
              sb.append(HttpConstants.HEADER_ACCEPT_CHARSET);
            }
 else             if (dim == Dimension.CLIENT_AGENT) {
              sb.append(HttpConstants.HEADER_USER_AGENT);
            }
 else             if (dim == Dimension.ENCODING) {
              sb.append(HttpConstants.HEADER_ACCEPT_ENCODING);
            }
 else             if (dim == Dimension.LANGUAGE) {
              sb.append(HttpConstants.HEADER_ACCEPT_LANGUAGE);
            }
 else             if (dim == Dimension.MEDIA_TYPE) {
              sb.append(HttpConstants.HEADER_ACCEPT);
            }
 else             if (dim == Dimension.AUTHORIZATION) {
              sb.append(HttpConstants.HEADER_AUTHORIZATION);
            }
          }
          responseHeaders.add(HttpConstants.HEADER_VARY,sb.toString());
        }
      }
    }
    Series<Parameter> additionalHeaders=(Series<Parameter>)response.getAttributes().get(HttpConstants.ATTRIBUTE_HEADERS);
    addAdditionalHeaders(responseHeaders,additionalHeaders);
  }
 catch (  Exception e) {
    getLogger().log(Level.INFO,"Exception intercepted while adding the response headers",e);
    response.getHttpCall().setStatusCode(Status.SERVER_ERROR_INTERNAL.getCode());
    response.getHttpCall().setReasonPhrase(Status.SERVER_ERROR_INTERNAL.getDescription());
  }
}
