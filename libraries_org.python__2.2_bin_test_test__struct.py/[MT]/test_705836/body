def test_705836():
    import math
    for base in range(1, 33):
        delta = 0.5
        while ((base - (delta / 2.0)) != base):
            delta /= 2.0
        smaller = (base - delta)
        packed = struct.pack('<f', smaller)
        unpacked = struct.unpack('<f', packed)[0]
        verify((base == unpacked))
        bigpacked = struct.pack('>f', smaller)
        verify((bigpacked == string_reverse(packed)), '>f pack should be byte-reversal of <f pack')
        unpacked = struct.unpack('>f', bigpacked)[0]
        verify((base == unpacked))
    big = ((1 << 24) - 1)
    big = math.ldexp(big, (127 - 23))
    packed = struct.pack('>f', big)
    unpacked = struct.unpack('>f', packed)[0]
    verify((big == unpacked))
    big = ((1 << 25) - 1)
    big = math.ldexp(big, (127 - 24))
    try:
        packed = struct.pack('>f', big)
    except OverflowError:
        pass
    else:
        TestFailed('expected OverflowError')
