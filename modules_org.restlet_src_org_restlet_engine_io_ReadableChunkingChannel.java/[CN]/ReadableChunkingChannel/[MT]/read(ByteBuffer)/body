{
  int result=0;
  boolean tryAgain=true;
  while (tryAgain) {
    if (this.lastChunkWritten) {
      result=-1;
      tryAgain=false;
    }
 else {
      int chunkStart=dst.position();
      int maxChunkDataSize=dst.remaining() - this.chunkSizeLength - 4;
      int chunkDataSize=0;
      if (maxChunkDataSize > 0) {
        dst.position(chunkStart + this.chunkSizeLength + 2);
        dst.limit(dst.position() + maxChunkDataSize);
        chunkDataSize=getWrappedChannel().read(dst);
        dst.limit(dst.capacity());
        if (chunkDataSize == -1) {
          this.lastChunkWritten=true;
          tryAgain=false;
          dst.position(chunkStart);
          result+=fillChunkSizeString(0,dst);
          dst.put((byte)13);
          dst.put((byte)10);
          result+=2;
        }
 else         if (chunkDataSize > 0) {
          dst.put((byte)13);
          dst.put((byte)10);
          dst.position(chunkStart);
          fillChunkSizeString(chunkDataSize,dst);
          dst.position(dst.position() + chunkDataSize + 2);
          result+=dst.position() - chunkStart;
        }
 else {
          dst.position(chunkStart);
        }
      }
 else {
        tryAgain=false;
      }
    }
  }
  return result;
}
