def check_extensions_list(self, extensions):
    "Ensure that the list of extensions (presumably provided as a\n        command option 'extensions') is valid, i.e. it is a list of\n        Extension objects.  We also support the old-style list of 2-tuples,\n        where the tuples are (ext_name, build_info), which are converted to\n        Extension instances here.\n\n        Raise DistutilsSetupError if the structure is invalid anywhere;\n        just returns otherwise.\n        "
    if (type(extensions) is not ListType):
        raise DistutilsSetupError, "'ext_modules' option must be a list of Extension instances"
    for i in range(len(extensions)):
        ext = extensions[i]
        if isinstance(ext, Extension):
            continue
        (ext_name, build_info) = ext
        log.warn(("old-style (ext_name, build_info) tuple found in ext_modules for extension '%s'-- please convert to Extension instance" % ext_name))
        if ((type(ext) is not TupleType) and (len(ext) != 2)):
            raise DistutilsSetupError, "each element of 'ext_modules' option must be an Extension instance or 2-tuple"
        if (not ((type(ext_name) is StringType) and extension_name_re.match(ext_name))):
            raise DistutilsSetupError, "first element of each tuple in 'ext_modules' must be the extension name (a string)"
        if (type(build_info) is not DictionaryType):
            raise DistutilsSetupError, "second element of each tuple in 'ext_modules' must be a dictionary (build info)"
        ext = Extension(ext_name, build_info['sources'])
        for key in ('include_dirs', 'library_dirs', 'libraries', 'extra_objects', 'extra_compile_args', 'extra_link_args'):
            val = build_info.get(key)
            if (val is not None):
                setattr(ext, key, val)
        ext.runtime_library_dirs = build_info.get('rpath')
        if build_info.has_key('def_file'):
            log.warn("'def_file' element of build info dict no longer supported")
        macros = build_info.get('macros')
        if macros:
            ext.define_macros = []
            ext.undef_macros = []
            for macro in macros:
                if (not ((type(macro) is TupleType) and (1 <= len(macro) <= 2))):
                    raise DistutilsSetupError, "'macros' element of build info dict must be 1- or 2-tuple"
                if (len(macro) == 1):
                    ext.undef_macros.append(macro[0])
                elif (len(macro) == 2):
                    ext.define_macros.append(macro)
        extensions[i] = ext
