def finalize_options(self):
    from distutils import sysconfig
    self.set_undefined_options('build', ('build_lib', 'build_lib'), ('build_temp', 'build_temp'), ('compiler', 'compiler'), ('debug', 'debug'), ('force', 'force'))
    if (self.package is None):
        self.package = self.distribution.ext_package
    self.extensions = self.distribution.ext_modules
    py_include = sysconfig.get_python_inc()
    plat_py_include = sysconfig.get_python_inc(plat_specific=1)
    if (self.include_dirs is None):
        self.include_dirs = (self.distribution.include_dirs or [])
    if (type(self.include_dirs) is StringType):
        self.include_dirs = string.split(self.include_dirs, os.pathsep)
    self.include_dirs.append(py_include)
    if (plat_py_include != py_include):
        self.include_dirs.append(plat_py_include)
    if (type(self.libraries) is StringType):
        self.libraries = [self.libraries]
    if (self.libraries is None):
        self.libraries = []
    if (self.library_dirs is None):
        self.library_dirs = []
    elif (type(self.library_dirs) is StringType):
        self.library_dirs = string.split(self.library_dirs, os.pathsep)
    if (self.rpath is None):
        self.rpath = []
    elif (type(self.rpath) is StringType):
        self.rpath = string.split(self.rpath, os.pathsep)
    if (os.name == 'nt'):
        self.library_dirs.append(os.path.join(sys.exec_prefix, 'libs'))
        if self.debug:
            self.build_temp = os.path.join(self.build_temp, 'Debug')
        else:
            self.build_temp = os.path.join(self.build_temp, 'Release')
        self.include_dirs.append(os.path.join(sys.exec_prefix, 'PC'))
        self.library_dirs.append(os.path.join(sys.exec_prefix, 'PCBuild'))
    if (os.name == 'os2'):
        self.library_dirs.append(os.path.join(sys.exec_prefix, 'Config'))
    if ((sys.platform[:6] == 'cygwin') or (sys.platform[:6] == 'atheos')):
        if sys.executable.startswith(os.path.join(sys.exec_prefix, 'bin')):
            self.library_dirs.append(os.path.join(sys.prefix, 'lib', ('python' + get_python_version()), 'config'))
        else:
            self.library_dirs.append('.')
    if ((sys.platform.startswith('linux') or sys.platform.startswith('gnu')) and sysconfig.get_config_var('Py_ENABLE_SHARED')):
        if sys.executable.startswith(os.path.join(sys.exec_prefix, 'bin')):
            self.library_dirs.append(sysconfig.get_config_var('LIBDIR'))
        else:
            self.library_dirs.append('.')
    if self.define:
        defines = string.split(self.define, ',')
        self.define = map((lambda symbol: (symbol, '1')), defines)
    if self.undef:
        self.undef = string.split(self.undef, ',')
    if (self.swig_opts is None):
        self.swig_opts = []
    else:
        self.swig_opts = self.swig_opts.split(' ')
