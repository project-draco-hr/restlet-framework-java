{
  try {
    this.testDir=new File(System.getProperty("java.io.tmpdir"),"TemplateFilterTestCase");
    IoUtils.delete(this.testDir,true);
    this.testDir.mkdir();
    File testFileFm1=new File(this.testDir,"testFm1.txt.fmt");
    FileWriter fw=new FileWriter(testFileFm1);
    fw.write("Method=${m}/Authority=${ra}");
    fw.close();
    File testFileFm2=new File(this.testDir,"testFm2.txt");
    fw=new FileWriter(testFileFm2);
    fw.write("Method=${m}/Authority=${ra}");
    fw.close();
    File testFileVl1=new File(this.testDir,"testVl1.txt.vm");
    fw=new FileWriter(testFileVl1);
    fw.write("Method=${m}/Path=${rp}");
    fw.close();
    File testFileVl2=new File(this.testDir,"testVl2.txt");
    fw=new FileWriter(testFileVl2);
    fw.write("Method=${m}/Path=${rp}");
    fw.close();
    Component component=new Component();
    component.getServers().add(Protocol.HTTP,TEST_PORT);
    component.getClients().add(Protocol.FILE);
    MyFreemakerApplication freemarkerApplication=new MyFreemakerApplication(this.testDir);
    MyVelocityApplication velocityApplication=new MyVelocityApplication(this.testDir);
    component.getDefaultHost().attach("/freemarker",freemarkerApplication);
    component.getDefaultHost().attach("/velocity",velocityApplication);
    component.start();
    freemarkerApplication.getTunnelService().setExtensionsTunnel(true);
    velocityApplication.getTunnelService().setExtensionsTunnel(true);
    Client client=new Client(Protocol.HTTP);
    Response response=client.handle(new Request(Method.GET,"http://localhost:" + TEST_PORT + "/freemarker/"+ testFileFm1.getName()));
    if (response.isEntityAvailable()) {
      assertEquals("Method=GET/Authority=localhost:" + TEST_PORT,response.getEntity().getText());
    }
    response=client.handle(new Request(Method.GET,"http://localhost:" + TEST_PORT + "/freemarker/"+ testFileFm2.getName()));
    assertTrue(response.getStatus().isSuccess());
    if (response.isEntityAvailable()) {
      assertEquals("Method=${m}/Authority=${ra}",response.getEntity().getText());
    }
    response=client.handle(new Request(Method.GET,"http://localhost:" + TEST_PORT + "/velocity/"+ testFileVl1.getName()));
    if (response.isEntityAvailable()) {
      assertEquals("Method=GET/Path=/velocity/testVl1",response.getEntity().getText());
    }
    response=client.handle(new Request(Method.GET,"http://localhost:" + TEST_PORT + "/velocity/"+ testFileVl2.getName()));
    assertTrue(response.getStatus().isSuccess());
    if (response.isEntityAvailable()) {
      assertEquals("Method=${m}/Path=${rp}",response.getEntity().getText());
    }
    component.stop();
    client.stop();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
