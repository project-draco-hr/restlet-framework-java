{
  try {
    this.testDir=new File(System.getProperty("java.io.tmpdir"),"TemplateFilterTestCase");
    deleteDir(this.testDir);
    this.testDir.mkdir();
    final File testFileFm1=new File(this.testDir,"testFm1.txt.fmt");
    FileWriter fw=new FileWriter(testFileFm1);
    fw.write("Method=${m}/Authority=${ra}");
    fw.close();
    final File testFileFm2=new File(this.testDir,"testFm2.txt");
    fw=new FileWriter(testFileFm2);
    fw.write("Method=${m}/Authority=${ra}");
    fw.close();
    final File testFileVl1=new File(this.testDir,"testVl1.txt.vm");
    fw=new FileWriter(testFileVl1);
    fw.write("Method=${m}/Path=${rp}");
    fw.close();
    final File testFileVl2=new File(this.testDir,"testVl2.txt");
    fw=new FileWriter(testFileVl2);
    fw.write("Method=${m}/Path=${rp}");
    fw.close();
    final Component component=new Component();
    component.getServers().add(Protocol.HTTP,8182);
    component.getClients().add(Protocol.FILE);
    final MyFreemakerApplication freemarkerApplication=new MyFreemakerApplication(component.getContext(),this.testDir);
    final MyVelocityApplication velocityApplication=new MyVelocityApplication(component.getContext(),this.testDir);
    component.getDefaultHost().attach("/freemarker",freemarkerApplication);
    component.getDefaultHost().attach("/velocity",velocityApplication);
    component.start();
    freemarkerApplication.getTunnelService().setExtensionsTunnel(true);
    velocityApplication.getTunnelService().setExtensionsTunnel(true);
    final Client client=new Client(Protocol.HTTP);
    Response response=client.get("http://localhost:8182/freemarker/" + testFileFm1.getName());
    if (response.isEntityAvailable()) {
      assertEquals(response.getEntity().getText(),"Method=GET/Authority=localhost:8182");
    }
    response=client.get("http://localhost:8182/freemarker/" + testFileFm2.getName());
    assertTrue(response.getStatus().isSuccess());
    if (response.isEntityAvailable()) {
      assertEquals(response.getEntity().getText(),"Method=${m}/Authority=${ra}");
    }
    response=client.get("http://localhost:8182/velocity/" + testFileVl1.getName());
    if (response.isEntityAvailable()) {
      assertEquals(response.getEntity().getText(),"Method=GET/Path=/velocity/testVl1");
    }
    response=client.get("http://localhost:8182/velocity/" + testFileVl2.getName());
    assertTrue(response.getStatus().isSuccess());
    if (response.isEntityAvailable()) {
      assertEquals(response.getEntity().getText(),"Method=${m}/Path=${rp}");
    }
    component.stop();
  }
 catch (  final Exception e) {
    e.printStackTrace();
  }
}
