{
  String modeParam=null;
  OpenIdMode mode=null;
  Message response;
  if (pl == null && us != null) {
    pl=us.pl;
  }
  mode=OpenIdMode.valueOf(pl.getParameterValue(OPENID_MODE));
  try {
  }
 catch (  Exception e) {
    Engine.getAnonymousLogger().warning("No Known openid.mode: " + modeParam);
    mode=OpenIdMode.errorMode;
  }
  Engine.getAnonymousLogger().info("processRequest: " + mode);
switch (mode) {
case associate:
    response=sm.associationResponse(pl);
  return new OPReturn(OPR.OK,response.keyValueFormEncoding());
case checkid_setup:
case checkid_immediate:
if (us == null || us.user == null) {
  String session=UUID.randomUUID().toString();
  this.sessions.put(session,new UserSession(pl));
  return new OPReturn(OPR.GET_USER,session);
}
OpenIdUser user=us.user;
response=sm.authResponse(pl,user.getClaimedId(),user.getClaimedId(),user.getApproved());
if (response instanceof DirectError) {
return new OPReturn(OPR.OK,response.keyValueFormEncoding());
}
if (us.user.attributes() != null && us.user.attributes().size() > 0) {
FetchResponse fr=null;
fr=FetchResponse.createFetchResponse();
for (AX attr : us.user.attributes()) {
String val=us.user.getAXValue(attr);
if (val != null) {
try {
fr.addAttribute(attr.getName(),attr.getSchema(),val);
}
 catch (MessageException e) {
e.printStackTrace();
}
}
}
if (fr.getAttributes().size() > 0) {
try {
response.addExtension(fr);
sm.sign((AuthSuccess)response);
}
 catch (Exception e) {
e.printStackTrace();
}
}
}
res.redirectSeeOther(response.getDestinationUrl(true));
return new OPReturn(OPR.OK,"");
case check_authentication:
response=sm.verify(pl);
return new OPReturn(OPR.OK,response.keyValueFormEncoding());
case errorMode:
response=DirectError.createDirectError("Unknown request");
return new OPReturn(OPR.OK,response.keyValueFormEncoding());
}
return null;
}
