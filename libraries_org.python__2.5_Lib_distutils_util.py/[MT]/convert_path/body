def convert_path(pathname):
    "Return 'pathname' as a name that will work on the native filesystem,\n    i.e. split it on '/' and put it back together again using the current\n    directory separator.  Needed because filenames in the setup script are\n    always supplied in Unix style, and have to be converted to the local\n    convention before we can actually use them in the filesystem.  Raises\n    ValueError on non-Unix-ish systems if 'pathname' either starts or\n    ends with a slash.\n    "
    if (os.sep == '/'):
        return pathname
    if (not pathname):
        return pathname
    if (pathname[0] == '/'):
        raise ValueError, ("path '%s' cannot be absolute" % pathname)
    if (pathname[(-1)] == '/'):
        raise ValueError, ("path '%s' cannot end with '/'" % pathname)
    paths = string.split(pathname, '/')
    while ('.' in paths):
        paths.remove('.')
    if (not paths):
        return os.curdir
    return apply(os.path.join, paths)
