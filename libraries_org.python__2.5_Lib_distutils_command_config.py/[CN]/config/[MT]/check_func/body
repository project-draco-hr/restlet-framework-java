def check_func(self, func, headers=None, include_dirs=None, libraries=None, library_dirs=None, decl=0, call=0):
    'Determine if function \'func\' is available by constructing a\n        source file that refers to \'func\', and compiles and links it.\n        If everything succeeds, returns true; otherwise returns false.\n\n        The constructed source file starts out by including the header\n        files listed in \'headers\'.  If \'decl\' is true, it then declares\n        \'func\' (as "int func()"); you probably shouldn\'t supply \'headers\'\n        and set \'decl\' true in the same call, or you might get errors about\n        a conflicting declarations for \'func\'.  Finally, the constructed\n        \'main()\' function either references \'func\' or (if \'call\' is true)\n        calls it.  \'libraries\' and \'library_dirs\' are used when\n        linking.\n        '
    self._check_compiler()
    body = []
    if decl:
        body.append(('int %s ();' % func))
    body.append('int main () {')
    if call:
        body.append(('  %s();' % func))
    else:
        body.append(('  %s;' % func))
    body.append('}')
    body = (string.join(body, '\n') + '\n')
    return self.try_link(body, headers, include_dirs, libraries, library_dirs)
