def testSettingException(self):


    class BadException:

        def __init__(self_):
            raise RuntimeError, "can't instantiate BadException"

    def test_capi1():
        import _testcapi
        try:
            _testcapi.raise_exception(BadException, 1)
        except TypeError as err:
            (exc, err, tb) = sys.exc_info()
            co = tb.tb_frame.f_code
            self.assertEquals(co.co_name, 'test_capi1')
            self.assert_(co.co_filename.endswith((('test_exceptions' + os.extsep) + 'py')))
        else:
            self.fail('Expected exception')

    def test_capi2():
        import _testcapi
        try:
            _testcapi.raise_exception(BadException, 0)
        except RuntimeError as err:
            (exc, err, tb) = sys.exc_info()
            co = tb.tb_frame.f_code
            self.assertEquals(co.co_name, '__init__')
            self.assert_(co.co_filename.endswith((('test_exceptions' + os.extsep) + 'py')))
            co2 = tb.tb_frame.f_back.f_code
            self.assertEquals(co2.co_name, 'test_capi2')
        else:
            self.fail('Expected exception')
    if (not sys.platform.startswith('java')):
        test_capi1()
        test_capi2()
