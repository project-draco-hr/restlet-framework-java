def set_charset(self, charset):
    'Set the charset of the payload to a given character set.\n\n        charset can be a Charset instance, a string naming a character set, or\n        None.  If it is a string it will be converted to a Charset instance.\n        If charset is None, the charset parameter will be removed from the\n        Content-Type field.  Anything else will generate a TypeError.\n\n        The message will be assumed to be of type text/* encoded with\n        charset.input_charset.  It will be converted to charset.output_charset\n        and encoded properly, if needed, when generating the plain text\n        representation of the message.  MIME headers (MIME-Version,\n        Content-Type, Content-Transfer-Encoding) will be added as needed.\n\n        '
    if (charset is None):
        self.del_param('charset')
        self._charset = None
        return
    if isinstance(charset, basestring):
        charset = email.charset.Charset(charset)
    if (not isinstance(charset, email.charset.Charset)):
        raise TypeError(charset)
    self._charset = charset
    if (not self.has_key('MIME-Version')):
        self.add_header('MIME-Version', '1.0')
    if (not self.has_key('Content-Type')):
        self.add_header('Content-Type', 'text/plain', charset=charset.get_output_charset())
    else:
        self.set_param('charset', charset.get_output_charset())
    if (str(charset) != charset.get_output_charset()):
        self._payload = charset.body_encode(self._payload)
    if (not self.has_key('Content-Transfer-Encoding')):
        cte = charset.get_body_encoding()
        try:
            cte(self)
        except TypeError:
            self._payload = charset.body_encode(self._payload)
            self.add_header('Content-Transfer-Encoding', cte)
