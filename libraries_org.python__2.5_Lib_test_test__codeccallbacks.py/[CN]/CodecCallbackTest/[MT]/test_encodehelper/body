def test_encodehelper(self):
    self.assertRaises(LookupError, u'\xff'.encode, 'ascii', 'test.unknown')

    def badencodereturn1(exc):
        return 42
    codecs.register_error('test.badencodereturn1', badencodereturn1)
    self.assertRaises(TypeError, u'\xff'.encode, 'ascii', 'test.badencodereturn1')

    def badencodereturn2(exc):
        return (u'?', None)
    codecs.register_error('test.badencodereturn2', badencodereturn2)
    self.assertRaises(TypeError, u'\xff'.encode, 'ascii', 'test.badencodereturn2')
    handler = PosReturn()
    codecs.register_error('test.posreturn', handler.handle)
    handler.pos = (-1)
    self.assertEquals(u'\xff0'.encode('ascii', 'test.posreturn'), '<?>0')
    handler.pos = (-2)
    self.assertEquals(u'\xff0'.encode('ascii', 'test.posreturn'), '<?><?>')
    handler.pos = (-3)
    self.assertRaises(IndexError, u'\xff0'.encode, 'ascii', 'test.posreturn')
    handler.pos = 1
    self.assertEquals(u'\xff0'.encode('ascii', 'test.posreturn'), '<?>0')
    handler.pos = 2
    self.assertEquals(u'\xff0'.encode('ascii', 'test.posreturn'), '<?>')
    handler.pos = 3
    self.assertRaises(IndexError, u'\xff0'.encode, 'ascii', 'test.posreturn')
    handler.pos = 0


    class D(dict):

        def __getitem__(self, key):
            raise ValueError
    for err in ('strict', 'replace', 'xmlcharrefreplace', 'backslashreplace', 'test.posreturn'):
        self.assertRaises(UnicodeError, codecs.charmap_encode, u'\xff', err, {255: None, })
        self.assertRaises(ValueError, codecs.charmap_encode, u'\xff', err, D())
        self.assertRaises(TypeError, codecs.charmap_encode, u'\xff', err, {255: 300, })
