def test_uninamereplace(self):

    def uninamereplace(exc):
        if (not isinstance(exc, UnicodeEncodeError)):
            raise TypeError(("don't know how to handle %r" % exc))
        l = []
        for c in exc.object[exc.start:exc.end]:
            l.append(unicodedata.name(c, (u'0x%x' % ord(c))))
        return ((u'\x1b[1m%s\x1b[0m' % u', '.join(l)), exc.end)
    codecs.register_error('test.uninamereplace', uninamereplace)
    sin = u'\xac\u1234\u20ac\u8000'
    sout = '\x1b[1mNOT SIGN, ETHIOPIC SYLLABLE SEE, EURO SIGN, CJK UNIFIED IDEOGRAPH-8000\x1b[0m'
    self.assertEqual(sin.encode('ascii', 'test.uninamereplace'), sout)
    sout = '\xac\x1b[1mETHIOPIC SYLLABLE SEE, EURO SIGN, CJK UNIFIED IDEOGRAPH-8000\x1b[0m'
    self.assertEqual(sin.encode('latin-1', 'test.uninamereplace'), sout)
    sout = '\xac\x1b[1mETHIOPIC SYLLABLE SEE\x1b[0m\xa4\x1b[1mCJK UNIFIED IDEOGRAPH-8000\x1b[0m'
    self.assertEqual(sin.encode('iso-8859-15', 'test.uninamereplace'), sout)
