def deal_with_app_return(self, environ, start_response_callable, app_return):
    self.log.debug(('Processing app return type: %s' % str(type(app_return))))
    if isinstance(app_return, types.StringTypes):
        raise ReturnNotIterable(('Application returned object that was not an iterable: %s' % str(type(app_return))))
    if (type(app_return) is types.FileType):
        pass
    if (hasattr(app_return, '__len__') and callable(app_return.__len__)):
        expected_pieces = app_return.__len__()
    else:
        expected_pieces = (-1)
    try:
        try:
            ix = 0
            for next_piece in app_return:
                if (not isinstance(next_piece, types.StringTypes)):
                    raise NonStringOutput(('Application returned iterable containing non-strings: %s' % str(type(next_piece))))
                if (ix == 0):
                    if (not start_response_callable.called):
                        raise StartResponseNotCalled('Start_response callable was never called.')
                    if ((not start_response_callable.content_length) and (expected_pieces == 1) and (start_response_callable.write_callable.num_writes == 0)):
                        start_response_callable.set_content_length(len(next_piece))
                start_response_callable.write_callable(next_piece)
                ix += 1
                if (ix == expected_pieces):
                    break
            if ((expected_pieces != (-1)) and (ix != expected_pieces)):
                raise WrongLength(('Iterator len() was wrong. Expected %d pieces: got %d' % (expected_pieces, ix)))
        except AttributeError as ax:
            if (str(ax) == '__getitem__'):
                raise ReturnNotIterable(('Application returned object that was not an iterable: %s' % str(type(app_return))))
            else:
                raise ax
        except TypeError as tx:
            raise ReturnNotIterable(('Application returned object that was not an iterable: %s' % str(type(app_return))))
        except ModjyException as mx:
            raise mx
        except Exception as x:
            raise ApplicationException(x)
    finally:
        if (hasattr(app_return, 'close') and callable(app_return.close)):
            app_return.close()
