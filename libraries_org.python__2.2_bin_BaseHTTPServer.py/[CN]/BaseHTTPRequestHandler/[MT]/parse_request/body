def parse_request(self):
    'Parse a request (internal).\n\n        The request should be stored in self.raw_request; the results\n        are in self.command, self.path, self.request_version and\n        self.headers.\n\n        Return value is 1 for success, 0 for failure; on failure, an\n        error is sent back.\n\n        '
    self.request_version = version = 'HTTP/0.9'
    requestline = self.raw_requestline
    if (requestline[(-2):] == '\r\n'):
        requestline = requestline[:(-2)]
    elif (requestline[(-1):] == '\n'):
        requestline = requestline[:(-1)]
    self.requestline = requestline
    words = requestline.split()
    if (len(words) == 3):
        [command, path, version] = words
        if (version[:5] != 'HTTP/'):
            self.send_error(400, ('Bad request version (%s)' % `version`))
            return 0
    elif (len(words) == 2):
        [command, path] = words
        if (command != 'GET'):
            self.send_error(400, ('Bad HTTP/0.9 request type (%s)' % `command`))
            return 0
    else:
        self.send_error(400, ('Bad request syntax (%s)' % `requestline`))
        return 0
    (self.command, self.path, self.request_version) = (command, path, version)
    self.headers = self.MessageClass(self.rfile, 0)
    return 1
