{
  boolean queryModified=false;
  String acceptCharset=query.getFirstValue(tunnelService.getCharacterSetParameter());
  String acceptEncoding=query.getFirstValue(tunnelService.getEncodingParameter());
  String acceptLanguage=query.getFirstValue(tunnelService.getLanguageParameter());
  String acceptMediaType=query.getFirstValue(tunnelService.getMediaTypeParameter());
  Metadata metadata=null;
  ClientInfo clientInfo=request.getClientInfo();
  MetadataService metadataService=getApplication().getMetadataService();
  if (acceptCharset != null) {
    metadata=metadataService.getMetadata(acceptCharset);
    if (metadata instanceof CharacterSet) {
      clientInfo.getAcceptedCharacterSets().clear();
      clientInfo.getAcceptedCharacterSets().add(new Preference<CharacterSet>((CharacterSet)metadata));
      query.removeFirst(tunnelService.getCharacterSetParameter());
      queryModified=true;
    }
  }
  if (acceptEncoding != null) {
    metadata=metadataService.getMetadata(acceptEncoding);
    if (metadata instanceof Encoding) {
      clientInfo.getAcceptedEncodings().clear();
      clientInfo.getAcceptedEncodings().add(new Preference<Encoding>((Encoding)metadata));
      query.removeFirst(tunnelService.getEncodingParameter());
      queryModified=true;
    }
  }
  if (acceptLanguage != null) {
    metadata=metadataService.getMetadata(acceptLanguage);
    if (metadata instanceof Language) {
      clientInfo.getAcceptedLanguages().clear();
      clientInfo.getAcceptedLanguages().add(new Preference<Language>((Language)metadata));
      query.removeFirst(tunnelService.getLanguageParameter());
      queryModified=true;
    }
  }
  if (acceptMediaType != null) {
    metadata=metadataService.getMetadata(acceptMediaType);
    if (metadata instanceof MediaType) {
      clientInfo.getAcceptedMediaTypes().clear();
      clientInfo.getAcceptedMediaTypes().add(new Preference<MediaType>((MediaType)metadata));
      query.removeFirst(tunnelService.getMediaTypeParameter());
      queryModified=true;
    }
  }
  return queryModified;
}
