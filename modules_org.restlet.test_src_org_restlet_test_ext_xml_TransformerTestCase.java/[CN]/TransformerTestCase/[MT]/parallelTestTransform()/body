{
  Component comp=new Component();
  final TransformRepresentation tr=new TransformRepresentation(comp.getContext(),this.source,this.xslt);
  final FailureTracker tracker=new FailureTracker();
  final int testVolume=5000;
  final Thread[] parallelTransform=new Thread[testVolume];
  for (int i=0; i < parallelTransform.length; i++) {
    final int index=i;
    parallelTransform[i]=new Thread(){
      @Override public void run(){
        try {
          final ByteArrayOutputStream out=new ByteArrayOutputStream();
          tr.write(out);
          final String result=out.toString();
          assertEquals(TransformerTestCase.this.output,result);
          out.close();
        }
 catch (        Throwable e) {
          tracker.trackFailure("Exception during write in thread ",index,e);
        }
      }
    }
;
  }
  for (  final Thread pt : parallelTransform) {
    pt.start();
  }
  tracker.report();
}
