def test_main(use_rgbimg=True):
    run_unittest(InputValidationTests)
    try:
        import imgfile
    except ImportError:
        return
    uu.decode(get_qualified_path((('testrgb' + os.extsep) + 'uue')), (('test' + os.extsep) + 'rgb'))
    if use_rgbimg:
        (image, width, height) = getrgbimage((('test' + os.extsep) + 'rgb'))
    else:
        (image, width, height) = getimage((('test' + os.extsep) + 'rgb'))
    if verbose:
        print 'crop'
    newimage = imageop.crop(image, 4, width, height, 0, 0, 1, 1)
    if verbose:
        print 'scale'
    scaleimage = imageop.scale(image, 4, width, height, 1, 1)
    if verbose:
        print 'tovideo'
    videoimage = imageop.tovideo(image, 4, width, height)
    if verbose:
        print 'rgb2rgb8'
    greyimage = imageop.rgb2rgb8(image, width, height)
    if verbose:
        print 'rgb82rgb'
    image = imageop.rgb82rgb(greyimage, width, height)
    if verbose:
        print 'rgb2grey'
    greyimage = imageop.rgb2grey(image, width, height)
    if verbose:
        print 'grey2rgb'
    image = imageop.grey2rgb(greyimage, width, height)
    if verbose:
        print 'grey2mono'
    monoimage = imageop.grey2mono(greyimage, width, height, 0)
    if verbose:
        print 'mono2grey'
    greyimage = imageop.mono2grey(monoimage, width, height, 0, 255)
    if verbose:
        print 'dither2mono'
    monoimage = imageop.dither2mono(greyimage, width, height)
    if verbose:
        print 'grey2grey4'
    grey4image = imageop.grey2grey4(greyimage, width, height)
    if verbose:
        print 'grey2grey2'
    grey2image = imageop.grey2grey2(greyimage, width, height)
    if verbose:
        print 'dither2grey2'
    grey2image = imageop.dither2grey2(greyimage, width, height)
    if verbose:
        print 'grey42grey'
    greyimage = imageop.grey42grey(grey4image, width, height)
    if verbose:
        print 'grey22grey'
    image = imageop.grey22grey(grey2image, width, height)
    unlink((('test' + os.extsep) + 'rgb'))
