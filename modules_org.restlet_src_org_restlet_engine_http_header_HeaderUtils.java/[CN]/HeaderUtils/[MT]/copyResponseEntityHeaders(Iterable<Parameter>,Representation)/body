{
  Representation result=(representation == null) ? new EmptyRepresentation() : representation;
  boolean entityHeaderFound=false;
  if (responseHeaders != null) {
    for (    Parameter header : responseHeaders) {
      if (header.getName().equalsIgnoreCase(HeaderConstants.HEADER_CONTENT_TYPE)) {
        ContentType contentType=new ContentType(header.getValue());
        result.setMediaType(contentType.getMediaType());
        if ((result.getCharacterSet() == null) || (contentType.getCharacterSet() != null)) {
          result.setCharacterSet(contentType.getCharacterSet());
        }
        entityHeaderFound=true;
      }
 else       if (header.getName().equalsIgnoreCase(HeaderConstants.HEADER_CONTENT_LENGTH)) {
        entityHeaderFound=true;
      }
 else       if (header.getName().equalsIgnoreCase(HeaderConstants.HEADER_EXPIRES)) {
        result.setExpirationDate(HeaderReader.readDate(header.getValue(),false));
        entityHeaderFound=true;
      }
 else       if (header.getName().equalsIgnoreCase(HeaderConstants.HEADER_CONTENT_ENCODING)) {
        new EncodingReader(header.getValue()).addValues(result.getEncodings());
        entityHeaderFound=true;
      }
 else       if (header.getName().equalsIgnoreCase(HeaderConstants.HEADER_CONTENT_LANGUAGE)) {
        new LanguageReader(header.getValue()).addValues(result.getLanguages());
        entityHeaderFound=true;
      }
 else       if (header.getName().equalsIgnoreCase(HeaderConstants.HEADER_LAST_MODIFIED)) {
        result.setModificationDate(HeaderReader.readDate(header.getValue(),false));
        entityHeaderFound=true;
      }
 else       if (header.getName().equalsIgnoreCase(HeaderConstants.HEADER_ETAG)) {
        result.setTag(Tag.parse(header.getValue()));
        entityHeaderFound=true;
      }
 else       if (header.getName().equalsIgnoreCase(HeaderConstants.HEADER_CONTENT_LOCATION)) {
        result.setLocationRef(header.getValue());
        entityHeaderFound=true;
      }
 else       if (header.getName().equalsIgnoreCase(HeaderConstants.HEADER_CONTENT_DISPOSITION)) {
        try {
          result.setDisposition(new DispositionReader(header.getValue()).readValue());
          entityHeaderFound=true;
        }
 catch (        IOException ioe) {
          Context.getCurrentLogger().log(Level.WARNING,"Error during Content-Disposition header parsing. Header: " + header.getValue(),ioe);
        }
      }
 else       if (header.getName().equalsIgnoreCase(HeaderConstants.HEADER_CONTENT_RANGE)) {
        org.restlet.engine.http.header.RangeReader.update(header.getValue(),result);
        entityHeaderFound=true;
      }
 else       if (header.getName().equalsIgnoreCase(HeaderConstants.HEADER_CONTENT_MD5)) {
        result.setDigest(new org.restlet.data.Digest(org.restlet.data.Digest.ALGORITHM_MD5,org.restlet.engine.util.Base64.decode(header.getValue())));
        entityHeaderFound=true;
      }
    }
  }
  if ((representation == null) && !entityHeaderFound) {
    result=null;
  }
  return result;
}
