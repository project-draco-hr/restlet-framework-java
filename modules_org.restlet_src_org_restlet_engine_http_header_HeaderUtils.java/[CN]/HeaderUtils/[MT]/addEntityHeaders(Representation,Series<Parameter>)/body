{
  if (entity == null || !entity.isAvailable()) {
    headers.add(HeaderConstants.HEADER_CONTENT_LENGTH,"0");
  }
 else {
    if (!entity.getEncodings().isEmpty()) {
      if (entity.getEncodings().size() == 1) {
        headers.add(HeaderConstants.HEADER_CONTENT_ENCODING,entity.getEncodings().get(0).getName());
      }
 else {
        StringBuilder value=new StringBuilder();
        for (        Encoding encoding : entity.getEncodings()) {
          if (!encoding.equals(Encoding.IDENTITY)) {
            if (value.length() > 0) {
              value.append(", ");
            }
            value.append(encoding.getName());
          }
        }
        if (value.length() > 0) {
          headers.add(HeaderConstants.HEADER_CONTENT_ENCODING,value.toString());
        }
      }
    }
    if (!entity.getLanguages().isEmpty()) {
      if (entity.getLanguages().size() == 1) {
        headers.add(HeaderConstants.HEADER_CONTENT_LANGUAGE,entity.getLanguages().get(0).toString());
      }
 else {
        StringBuilder value=new StringBuilder();
        for (        Language language : entity.getLanguages()) {
          if (value.length() > 0) {
            value.append(", ");
          }
          value.append(language.getName());
        }
        headers.add(HeaderConstants.HEADER_CONTENT_LANGUAGE,value.toString());
      }
    }
    long size=entity.getAvailableSize();
    if (size != Representation.UNKNOWN_SIZE) {
      headers.add(HeaderConstants.HEADER_CONTENT_LENGTH,Long.toString(size));
    }
    if (entity.getIdentifier() != null) {
      headers.add(HeaderConstants.HEADER_CONTENT_LOCATION,entity.getIdentifier().getTargetRef().toString());
    }
    if (entity.getDigest() != null && Digest.ALGORITHM_MD5.equals(entity.getDigest().getAlgorithm())) {
      headers.add(HeaderConstants.HEADER_CONTENT_MD5,new String(org.restlet.engine.util.Base64.encode(entity.getDigest().getValue(),false)));
    }
    if (entity.getRange() != null) {
      try {
        headers.add(HeaderConstants.HEADER_CONTENT_RANGE,RangeUtils.formatContentRange(entity.getRange(),entity.getSize()));
      }
 catch (      Exception e) {
        Context.getCurrentLogger().log(Level.WARNING,"Unable to format the HTTP Content-Range header",e);
      }
    }
    if (entity.getMediaType() != null) {
      String contentType=entity.getMediaType().toString();
      if ((entity.getMediaType().getParameters().getFirstValue("charset") == null) && (entity.getCharacterSet() != null)) {
        contentType=contentType + "; charset=" + entity.getCharacterSet().getName();
      }
      headers.add(HeaderConstants.HEADER_CONTENT_TYPE,contentType);
    }
    if (entity.getExpirationDate() != null) {
      headers.add(HeaderConstants.HEADER_EXPIRES,DateUtils.format(entity.getExpirationDate()));
    }
    if (entity.getModificationDate() != null) {
      headers.add(HeaderConstants.HEADER_LAST_MODIFIED,HeaderUtils.formatDate(entity.getModificationDate(),false));
    }
    if (entity.getTag() != null) {
      headers.add(HeaderConstants.HEADER_ETAG,entity.getTag().format());
    }
    if (entity.getDisposition() != null && !Disposition.TYPE_NONE.equals(entity.getDisposition().getType())) {
      headers.add(HeaderConstants.HEADER_CONTENT_DISPOSITION,ContentDispositionWriter.write(entity.getDisposition()));
    }
  }
}
