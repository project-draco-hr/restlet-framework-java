import unittest
from test import test_support
import sys
import warnings, re
warnings.filterwarnings('ignore', category=DeprecationWarning, message='.*integer argument expected, got float', module=__name__)
warnings.filterwarnings('ignore', category=DeprecationWarning, message='.*integer argument expected, got float', module='unittest')
'\n> How about the following counterproposal. This also changes some of\n> the other format codes to be a little more regular.\n>\n> Code C type Range check\n>\n> b unsigned char 0..UCHAR_MAX\n> h signed short SHRT_MIN..SHRT_MAX\n> B unsigned char none **\n> H unsigned short none **\n> k * unsigned long none\n> I * unsigned int 0..UINT_MAX\n\n\n> i int INT_MIN..INT_MAX\n> l long LONG_MIN..LONG_MAX\n\n> K * unsigned long long none\n> L long long LLONG_MIN..LLONG_MAX\n\n> Notes:\n>\n> * New format codes.\n>\n> ** Changed from previous "range-and-a-half" to "none"; the\n> range-and-a-half checking wasn\'t particularly useful.\n\nPlus a C API or two, e.g. PyInt_AsLongMask() ->\nunsigned long and PyInt_AsLongLongMask() -> unsigned\nlong long (if that exists).\n'
LARGE = 2147483647
VERY_LARGE = 78918677837786508962676478530L
from _testcapi import UCHAR_MAX, USHRT_MAX, UINT_MAX, ULONG_MAX, INT_MAX, INT_MIN, LONG_MIN, LONG_MAX, PY_SSIZE_T_MIN, PY_SSIZE_T_MAX
LLONG_MAX = ((2 ** 63) - 1)
LLONG_MIN = (- (2 ** 63))
ULLONG_MAX = ((2 ** 64) - 1)
if (__name__ == '__main__'):
    test_main()
