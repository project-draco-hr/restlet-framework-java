import pty, os, sys, signal
from test.test_support import verbose, TestFailed, TestSkipped
TEST_STRING_1 = 'I wish to buy a fish license.\n'
TEST_STRING_2 = 'For my pet fish, Eric.\n'
if verbose:

    def debug(msg):
        print msg
else:

    def debug(msg):
        pass
old_alarm = signal.signal(signal.SIGALRM, handle_sig)
signal.alarm(10)
try:
    test_basic_pty()
finally:
    signal.alarm(0)
    signal.signal(signal.SIGALRM, old_alarm)
debug('calling pty.fork()')
(pid, master_fd) = pty.fork()
if (pid == pty.CHILD):
    if (not os.isatty(1)):
        debug("Child's fd 1 is not a tty?!")
        os._exit(3)
    debug('In child, calling os.setsid()')
    try:
        os.setsid()
    except OSError:
        debug('Good: OSError was raised.')
        pass
    except AttributeError:
        debug('No setsid() available ?')
        pass
    except:
        debug('An unexpected error was raised.')
        os._exit(1)
    else:
        debug('os.setsid() succeeded! (bad!)')
        os._exit(2)
    os._exit(4)
else:
    debug(('Waiting for child (%d) to finish.' % pid))
    while True:
        try:
            data = os.read(master_fd, 80)
        except OSError:
            break
        if (not data):
            break
        sys.stdout.write(data.replace('\r\n', '\n'))
    (pid, status) = os.waitpid(pid, 0)
    res = (status >> 8)
    debug(('Child (%d) exited with status %d (%d).' % (pid, res, status)))
    if (res == 1):
        raise TestFailed, 'Child raised an unexpected exception in os.setsid()'
    elif (res == 2):
        raise TestFailed, 'pty.fork() failed to make child a session leader.'
    elif (res == 3):
        raise TestFailed, 'Child spawned by pty.fork() did not have a tty as stdout'
    elif (res != 4):
        raise TestFailed, 'pty.fork() failed for unknown reasons.'
os.close(master_fd)
