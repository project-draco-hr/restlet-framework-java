def testCompileLibrary(self):
    next_time = (time.time() + _PRINT_WORKING_MSG_INTERVAL)
    libdir = os.path.dirname(unittest.__file__)
    testdir = os.path.dirname(test.test_support.__file__)
    for dir in [libdir, testdir]:
        for basename in os.listdir(dir):
            if (next_time <= time.time()):
                next_time = (time.time() + _PRINT_WORKING_MSG_INTERVAL)
                print  >> sys.__stdout__, '  testCompileLibrary still working, be patient...'
                sys.__stdout__.flush()
            if (not basename.endswith('.py')):
                continue
            if ((not TEST_ALL) and (random() < 0.98)):
                continue
            path = os.path.join(dir, basename)
            if test.test_support.verbose:
                print 'compiling', path
            f = open(path, 'U')
            buf = f.read()
            f.close()
            if (('badsyntax' in basename) or ('bad_coding' in basename)):
                self.assertRaises(SyntaxError, compiler.compile, buf, basename, 'exec')
            else:
                try:
                    compiler.compile(buf, basename, 'exec')
                except Exception as e:
                    args = list(e.args)
                    args[0] += ('[in file %s]' % basename)
                    e.args = tuple(args)
                    raise
