def process_message(self, peer, mailfrom, rcpttos, data):
    from cStringIO import StringIO
    from Mailman import Utils
    from Mailman import Message
    from Mailman import MailList
    listnames = []
    for rcpt in rcpttos:
        local = rcpt.lower().split('@')[0]
        parts = local.split('-')
        if (len(parts) > 2):
            continue
        listname = parts[0]
        if (len(parts) == 2):
            command = parts[1]
        else:
            command = ''
        if ((not Utils.list_exists(listname)) or (command not in ('', 'admin', 'owner', 'request', 'join', 'leave'))):
            continue
        listnames.append((rcpt, listname, command))
    for (rcpt, listname, command) in listnames:
        rcpttos.remove(rcpt)
    print  >> DEBUGSTREAM, 'forwarding recips:', ' '.join(rcpttos)
    if rcpttos:
        refused = self._deliver(mailfrom, rcpttos, data)
        print  >> DEBUGSTREAM, 'we got refusals:', refused
    mlists = {}
    s = StringIO(data)
    msg = Message.Message(s)
    if (not msg.getheader('from')):
        msg['From'] = mailfrom
    if (not msg.getheader('date')):
        msg['Date'] = time.ctime(time.time())
    for (rcpt, listname, command) in listnames:
        print  >> DEBUGSTREAM, 'sending message to', rcpt
        mlist = mlists.get(listname)
        if (not mlist):
            mlist = MailList.MailList(listname, lock=0)
            mlists[listname] = mlist
        if (command == ''):
            msg.Enqueue(mlist, tolist=1)
        elif (command == 'admin'):
            msg.Enqueue(mlist, toadmin=1)
        elif (command == 'owner'):
            msg.Enqueue(mlist, toowner=1)
        elif (command == 'request'):
            msg.Enqueue(mlist, torequest=1)
        elif (command in ('join', 'leave')):
            if (command == 'join'):
                msg['Subject'] = 'subscribe'
            else:
                msg['Subject'] = 'unsubscribe'
            msg.Enqueue(mlist, torequest=1)
