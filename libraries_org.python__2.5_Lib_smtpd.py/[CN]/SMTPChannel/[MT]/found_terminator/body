def found_terminator(self):
    line = EMPTYSTRING.join(self.__line)
    print  >> DEBUGSTREAM, 'Data:', repr(line)
    self.__line = []
    if (self.__state == self.COMMAND):
        if (not line):
            self.push('500 Error: bad syntax')
            return
        method = None
        i = line.find(' ')
        if (i < 0):
            command = line.upper()
            arg = None
        else:
            command = line[:i].upper()
            arg = line[(i + 1):].strip()
        method = getattr(self, ('smtp_' + command), None)
        if (not method):
            self.push(('502 Error: command "%s" not implemented' % command))
            return
        method(arg)
        return
    else:
        if (self.__state != self.DATA):
            self.push('451 Internal confusion')
            return
        data = []
        for text in line.split('\r\n'):
            if (text and (text[0] == '.')):
                data.append(text[1:])
            else:
                data.append(text)
        self.__data = NEWLINE.join(data)
        status = self.__server.process_message(self.__peer, self.__mailfrom, self.__rcpttos, self.__data)
        self.__rcpttos = []
        self.__mailfrom = None
        self.__state = self.COMMAND
        self.set_terminator('\r\n')
        if (not status):
            self.push('250 Ok')
        else:
            self.push(status)
