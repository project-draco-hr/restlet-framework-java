"An RFC 2821 smtp proxy.\n\nUsage: %(program)s [options] [localhost:localport [remotehost:remoteport]]\n\nOptions:\n\n    --nosetuid\n    -n\n        This program generally tries to setuid `nobody', unless this flag is\n        set.  The setuid call will fail if this program is not run as root (in\n        which case, use this flag).\n\n    --version\n    -V\n        Print the version number and exit.\n\n    --class classname\n    -c classname\n        Use `classname' as the concrete SMTP proxy class.  Uses `PureProxy' by\n        default.\n\n    --debug\n    -d\n        Turn on debugging prints.\n\n    --help\n    -h\n        Print this message and exit.\n\nVersion: %(__version__)s\n\nIf localhost is not given then `localhost' is used, and if localport is not\ngiven then 8025 is used.  If remotehost is not given then `localhost' is used,\nand if remoteport is not given, then 25 is used.\n"
import sys
import os
import errno
import getopt
import time
import socket
import asyncore
import asynchat
__all__ = ['SMTPServer', 'DebuggingServer', 'PureProxy', 'MailmanProxy']
program = sys.argv[0]
__version__ = 'Python SMTP proxy version 0.2'
DEBUGSTREAM = Devnull()
NEWLINE = '\n'
EMPTYSTRING = ''
COMMASPACE = ', '
if (__name__ == '__main__'):
    options = parseargs()
    if options.setuid:
        try:
            import pwd
        except ImportError:
            print  >> sys.stderr, 'Cannot import module "pwd"; try running with -n option.'
            sys.exit(1)
        nobody = pwd.getpwnam('nobody')[2]
        try:
            os.setuid(nobody)
        except OSError as e:
            if (e.errno != errno.EPERM):
                raise
            print  >> sys.stderr, 'Cannot setuid "nobody"; try running with -n option.'
            sys.exit(1)
    classname = options.classname
    if ('.' in classname):
        lastdot = classname.rfind('.')
        mod = __import__(classname[:lastdot], globals(), locals(), [''])
        classname = classname[(lastdot + 1):]
    else:
        import __main__ as mod
    class_ = getattr(mod, classname)
    proxy = class_((options.localhost, options.localport), (options.remotehost, options.remoteport))
    try:
        asyncore.loop()
    except KeyboardInterrupt:
        pass
