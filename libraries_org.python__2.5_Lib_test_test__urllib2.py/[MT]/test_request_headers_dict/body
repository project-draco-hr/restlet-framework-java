def test_request_headers_dict():
    '\n    The Request.headers dictionary is not a documented interface.  It should\n    stay that way, because the complete set of headers are only accessible\n    through the .get_header(), .has_header(), .header_items() interface.\n    However, .headers pre-dates those methods, and so real code will be using\n    the dictionary.\n\n    The introduction in 2.4 of those methods was a mistake for the same reason:\n    code that previously saw all (urllib2 user)-provided headers in .headers\n    now sees only a subset (and the function interface is ugly and incomplete).\n    A better change would have been to replace .headers dict with a dict\n    subclass (or UserDict.DictMixin instance?)  that preserved the .headers\n    interface and also provided access to the "unredirected" headers.  It\'s\n    probably too late to fix that, though.\n\n\n    Check .capitalize() case normalization:\n\n    >>> url = "http://example.com"\n    >>> Request(url, headers={"Spam-eggs": "blah"}).headers["Spam-eggs"]\n    \'blah\'\n    >>> Request(url, headers={"spam-EggS": "blah"}).headers["Spam-eggs"]\n    \'blah\'\n\n    Currently, Request(url, "Spam-eggs").headers["Spam-Eggs"] raises KeyError,\n    but that could be changed in future.\n\n    '
