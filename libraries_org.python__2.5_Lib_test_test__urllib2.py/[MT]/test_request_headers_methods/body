def test_request_headers_methods():
    '\n    Note the case normalization of header names here, to .capitalize()-case.\n    This should be preserved for backwards-compatibility.  (In the HTTP case,\n    normalization to .title()-case is done by urllib2 before sending headers to\n    httplib).\n\n    >>> url = "http://example.com"\n    >>> r = Request(url, headers={"Spam-eggs": "blah"})\n    >>> r.has_header("Spam-eggs")\n    True\n    >>> r.header_items()\n    [(\'Spam-eggs\', \'blah\')]\n    >>> r.add_header("Foo-Bar", "baz")\n    >>> items = r.header_items()\n    >>> items.sort()\n    >>> items\n    [(\'Foo-bar\', \'baz\'), (\'Spam-eggs\', \'blah\')]\n\n    Note that e.g. r.has_header("spam-EggS") is currently False, and\n    r.get_header("spam-EggS") returns None, but that could be changed in\n    future.\n\n    >>> r.has_header("Not-there")\n    False\n    >>> print r.get_header("Not-there")\n    None\n    >>> r.get_header("Not-there", "default")\n    \'default\'\n\n    '
