def add_ordered_mock_handlers(opener, meth_spec):
    'Create MockHandlers and add them to an OpenerDirector.\n\n    meth_spec: list of lists of tuples and strings defining methods to define\n    on handlers.  eg:\n\n    [["http_error", "ftp_open"], ["http_open"]]\n\n    defines methods .http_error() and .ftp_open() on one handler, and\n    .http_open() on another.  These methods just record their arguments and\n    return None.  Using a tuple instead of a string causes the method to\n    perform some action (see MockHandler.handle()), eg:\n\n    [["http_error"], [("http_open", "return request")]]\n\n    defines .http_error() on one handler (which simply returns None), and\n    .http_open() on another handler, which returns a Request object.\n\n    '
    handlers = []
    count = 0
    for meths in meth_spec:


        class MockHandlerSubclass(MockHandler):
            pass
        h = MockHandlerSubclass(meths)
        h.handler_order += count
        h.add_parent(opener)
        count = (count + 1)
        handlers.append(h)
        opener.add_handler(h)
    return handlers
