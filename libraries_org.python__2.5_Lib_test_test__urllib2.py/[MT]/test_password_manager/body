def test_password_manager(self):
    '\n    >>> mgr = urllib2.HTTPPasswordMgr()\n    >>> add = mgr.add_password\n    >>> add("Some Realm", "http://example.com/", "joe", "password")\n    >>> add("Some Realm", "http://example.com/ni", "ni", "ni")\n    >>> add("c", "http://example.com/foo", "foo", "ni")\n    >>> add("c", "http://example.com/bar", "bar", "nini")\n    >>> add("b", "http://example.com/", "first", "blah")\n    >>> add("b", "http://example.com/", "second", "spam")\n    >>> add("a", "http://example.com", "1", "a")\n    >>> add("Some Realm", "http://c.example.com:3128", "3", "c")\n    >>> add("Some Realm", "d.example.com", "4", "d")\n    >>> add("Some Realm", "e.example.com:3128", "5", "e")\n\n    >>> mgr.find_user_password("Some Realm", "example.com")\n    (\'joe\', \'password\')\n    >>> mgr.find_user_password("Some Realm", "http://example.com")\n    (\'joe\', \'password\')\n    >>> mgr.find_user_password("Some Realm", "http://example.com/")\n    (\'joe\', \'password\')\n    >>> mgr.find_user_password("Some Realm", "http://example.com/spam")\n    (\'joe\', \'password\')\n    >>> mgr.find_user_password("Some Realm", "http://example.com/spam/spam")\n    (\'joe\', \'password\')\n    >>> mgr.find_user_password("c", "http://example.com/foo")\n    (\'foo\', \'ni\')\n    >>> mgr.find_user_password("c", "http://example.com/bar")\n    (\'bar\', \'nini\')\n\n    Actually, this is really undefined ATM\n##     Currently, we use the highest-level path where more than one match:\n\n##     >>> mgr.find_user_password("Some Realm", "http://example.com/ni")\n##     (\'joe\', \'password\')\n\n    Use latest add_password() in case of conflict:\n\n    >>> mgr.find_user_password("b", "http://example.com/")\n    (\'second\', \'spam\')\n\n    No special relationship between a.example.com and example.com:\n\n    >>> mgr.find_user_password("a", "http://example.com/")\n    (\'1\', \'a\')\n    >>> mgr.find_user_password("a", "http://a.example.com/")\n    (None, None)\n\n    Ports:\n\n    >>> mgr.find_user_password("Some Realm", "c.example.com")\n    (None, None)\n    >>> mgr.find_user_password("Some Realm", "c.example.com:3128")\n    (\'3\', \'c\')\n    >>> mgr.find_user_password("Some Realm", "http://c.example.com:3128")\n    (\'3\', \'c\')\n    >>> mgr.find_user_password("Some Realm", "d.example.com")\n    (\'4\', \'d\')\n    >>> mgr.find_user_password("Some Realm", "e.example.com:3128")\n    (\'5\', \'e\')\n\n    '
    pass
