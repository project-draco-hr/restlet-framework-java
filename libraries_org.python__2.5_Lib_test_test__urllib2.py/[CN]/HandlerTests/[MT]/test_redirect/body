def test_redirect(self):
    from_url = 'http://example.com/a.html'
    to_url = 'http://example.com/b.html'
    h = urllib2.HTTPRedirectHandler()
    o = h.parent = MockOpener()
    for code in (301, 302, 303, 307):
        for data in (None, 'blah\nblah\n'):
            method = getattr(h, ('http_error_%s' % code))
            req = Request(from_url, data)
            req.add_header('Nonsense', 'viking=withhold')
            req.add_unredirected_header('Spam', 'spam')
            try:
                method(req, MockFile(), code, 'Blah', MockHeaders({'location': to_url, }))
            except urllib2.HTTPError:
                self.assert_(((code == 307) and (data is not None)))
            self.assertEqual(o.req.get_full_url(), to_url)
            try:
                self.assertEqual(o.req.get_method(), 'GET')
            except AttributeError:
                self.assert_((not o.req.has_data()))
            self.assertEqual(o.req.headers['Nonsense'], 'viking=withhold')
            self.assert_(('Spam' not in o.req.headers))
            self.assert_(('Spam' not in o.req.unredirected_hdrs))
    req = Request(from_url)

    def redirect(h, req, url=to_url):
        h.http_error_302(req, MockFile(), 302, 'Blah', MockHeaders({'location': url, }))
    req = Request(from_url, origin_req_host='example.com')
    count = 0
    try:
        while 1:
            redirect(h, req, 'http://example.com/')
            count = (count + 1)
    except urllib2.HTTPError:
        self.assertEqual(count, urllib2.HTTPRedirectHandler.max_repeats)
    req = Request(from_url, origin_req_host='example.com')
    count = 0
    try:
        while 1:
            redirect(h, req, ('http://example.com/%d' % count))
            count = (count + 1)
    except urllib2.HTTPError:
        self.assertEqual(count, urllib2.HTTPRedirectHandler.max_redirections)
