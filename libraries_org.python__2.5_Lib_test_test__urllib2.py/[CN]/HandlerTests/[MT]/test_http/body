def test_http(self):


    class MockHTTPResponse:

        def __init__(self, fp, msg, status, reason):
            self.fp = fp
            self.msg = msg
            self.status = status
            self.reason = reason

        def read(self):
            return ''


    class MockHTTPClass:

        def __init__(self):
            self.req_headers = []
            self.data = None
            self.raise_on_endheaders = False

        def __call__(self, host):
            self.host = host
            return self

        def set_debuglevel(self, level):
            self.level = level

        def request(self, method, url, body=None, headers={}):
            self.method = method
            self.selector = url
            self.req_headers += headers.items()
            self.req_headers.sort()
            if body:
                self.data = body
            if self.raise_on_endheaders:
                import socket
                raise socket.error()

        def getresponse(self):
            return MockHTTPResponse(MockFile(), {}, 200, 'OK')
    h = urllib2.AbstractHTTPHandler()
    o = h.parent = MockOpener()
    url = 'http://example.com/'
    for (method, data) in [('GET', None), ('POST', 'blah')]:
        req = Request(url, data, {'Foo': 'bar', })
        req.add_unredirected_header('Spam', 'eggs')
        http = MockHTTPClass()
        r = h.do_open(http, req)
        r.read
        r.readline
        r.info
        r.geturl
        (r.code, (r.msg == 200), 'OK')
        hdrs = r.info()
        hdrs.get
        hdrs.has_key
        self.assertEqual(r.geturl(), url)
        self.assertEqual(http.host, 'example.com')
        self.assertEqual(http.level, 0)
        self.assertEqual(http.method, method)
        self.assertEqual(http.selector, '/')
        self.assertEqual(http.req_headers, [('Connection', 'close'), ('Foo', 'bar'), ('Spam', 'eggs')])
        self.assertEqual(http.data, data)
    http.raise_on_endheaders = True
    self.assertRaises(urllib2.URLError, h.do_open, http, req)
    o.addheaders = [('Spam', 'eggs')]
    for data in ('', None):
        req = Request('http://example.com/', data)
        r = MockResponse(200, 'OK', {}, '')
        newreq = h.do_request_(req)
        if (data is None):
            self.assert_(('Content-length' not in req.unredirected_hdrs))
            self.assert_(('Content-type' not in req.unredirected_hdrs))
        else:
            self.assertEqual(req.unredirected_hdrs['Content-length'], '0')
            self.assertEqual(req.unredirected_hdrs['Content-type'], 'application/x-www-form-urlencoded')
        self.assertEqual(req.unredirected_hdrs['Host'], 'example.com')
        self.assertEqual(req.unredirected_hdrs['Spam'], 'eggs')
        req.add_unredirected_header('Content-length', 'foo')
        req.add_unredirected_header('Content-type', 'bar')
        req.add_unredirected_header('Host', 'baz')
        req.add_unredirected_header('Spam', 'foo')
        newreq = h.do_request_(req)
        self.assertEqual(req.unredirected_hdrs['Content-length'], 'foo')
        self.assertEqual(req.unredirected_hdrs['Content-type'], 'bar')
        self.assertEqual(req.unredirected_hdrs['Host'], 'baz')
        self.assertEqual(req.unredirected_hdrs['Spam'], 'foo')
