def loadTestsFromName(self, name, module=None):
    'Return a suite of all tests cases given a string specifier.\n\n        The name may resolve either to a module, a test case class, a\n        test method within a test case class, or a callable object which\n        returns a TestCase or TestSuite instance.\n\n        The method optionally resolves the names relative to a given module.\n        '
    parts = name.split('.')
    if (module is None):
        parts_copy = parts[:]
        while parts_copy:
            try:
                module = __import__('.'.join(parts_copy))
                break
            except ImportError:
                del parts_copy[(-1)]
                if (not parts_copy):
                    raise
        parts = parts[1:]
    obj = module
    for part in parts:
        (parent, obj) = (obj, getattr(obj, part))
    if (type(obj) == types.ModuleType):
        return self.loadTestsFromModule(obj)
    elif (isinstance(obj, (type, types.ClassType)) and issubclass(obj, TestCase)):
        return self.loadTestsFromTestCase(obj)
    elif (type(obj) == types.UnboundMethodType):
        return parent(obj.__name__)
    elif isinstance(obj, TestSuite):
        return obj
    elif callable(obj):
        test = obj()
        if (not isinstance(test, (TestCase, TestSuite))):
            raise ValueError, ('calling %s returned %s, not a test' % (obj, test))
        return test
    else:
        raise ValueError, ("don't know how to make test from: %s" % obj)
