{
  if (SCHEMA_EDM.equals(uri)) {
    if ("schema".equalsIgnoreCase(localName)) {
      pushState(State.SCHEMA);
      currentSchema=new Schema();
      this.currentMetadata.getSchemas().add(currentSchema);
      Namespace namespace=new Namespace(attrs.getValue("Namespace"));
      namespace.setAlias(attrs.getValue(SCHEMA_EDM,"Alias"));
      this.currentSchema.setNamespace(namespace);
      registeredNamespaces.add(namespace);
    }
 else     if ("using".equalsIgnoreCase(localName)) {
      pushState(State.USING);
      Namespace namespace=new Namespace(attrs.getValue(SCHEMA_EDM,"Namespace"));
      namespace.setAlias(attrs.getValue(SCHEMA_EDM,"Alias"));
      this.currentSchema.getReferencedNamespaces().add(namespace);
    }
 else     if ("documentation".equalsIgnoreCase(localName)) {
      pushState(State.DOCUMENTATION);
    }
 else     if ("entityType".equalsIgnoreCase(localName)) {
      pushState(State.ENTITY_TYPE);
      currentEntityType=new EntityType(attrs.getValue("Name"));
      currentEntityType.setSchema(this.currentSchema);
      currentEntityType.setAbstractType(Boolean.parseBoolean(attrs.getValue("Abstract")));
      currentEntityType.setBlob(Boolean.parseBoolean(attrs.getValue("HasStream")));
      String value=attrs.getValue("BaseType");
      if (value != null) {
        currentEntityType.setBaseType(new EntityType(value));
      }
      this.currentSchema.getTypes().add(currentEntityType);
      discoverMapping(currentEntityType,null,currentMetadata,attrs);
      registeredEntityTypes.put(currentSchema.getNamespace().getName() + "." + currentEntityType.getName(),currentEntityType);
    }
 else     if ("key".equalsIgnoreCase(localName)) {
      pushState(State.ENTITY_TYPE_KEY);
    }
 else     if ("propertyRef".equalsIgnoreCase(localName)) {
      if (getState() == State.ENTITY_TYPE_KEY) {
        if (currentEntityType.getKeys() == null) {
          currentEntityType.setKeys(new ArrayList<Property>());
        }
        currentEntityType.getKeys().add(new Property(attrs.getValue("Name")));
      }
    }
 else     if ("property".equalsIgnoreCase(localName)) {
      Property property=new Property(attrs.getValue("Name"));
      property.setDefaultValue(attrs.getValue("Default"));
      property.setNullable(Boolean.parseBoolean(attrs.getValue("Nullable")));
      if ("fixed".equalsIgnoreCase(attrs.getValue("ConcurrencyMode"))) {
        property.setConcurrent(true);
      }
 else {
        property.setConcurrent(false);
      }
      property.setType(new Type(attrs.getValue("Type")));
      property.setGetterAccess(attrs.getValue("GetterAccess"));
      property.setSetterAccess(attrs.getValue("SetterAccess"));
      if (getState() == State.ENTITY_TYPE) {
        pushState(State.ENTITY_TYPE_PROPERTY);
        this.currentEntityType.getProperties().add(property);
      }
 else {
        pushState(State.COMPLEX_TYPE_PROPERTY);
        this.currentComplexType.getProperties().add(property);
      }
      discoverMapping(this.currentEntityType,property,currentMetadata,attrs);
    }
 else     if ("navigationProperty".equalsIgnoreCase(localName)) {
      pushState(State.NAVIGATION_PROPERTY);
      NavigationProperty property=new NavigationProperty(attrs.getValue("Name"));
      property.setFromRole(new AssociationEnd(attrs.getValue("FromRole")));
      property.setRelationship(new Association(attrs.getValue("Relationship")));
      property.setToRole(new AssociationEnd(attrs.getValue("ToRole")));
      currentEntityType.getAssociations().add(property);
    }
 else     if ("complexType".equalsIgnoreCase(localName)) {
      pushState(State.COMPLEX_TYPE);
      ComplexType complexType=new ComplexType(attrs.getValue("Name"));
      complexType.setSchema(this.currentSchema);
      complexType.setParentComplexType(currentComplexType);
      currentComplexType=complexType;
    }
 else     if ("association".equalsIgnoreCase(localName)) {
      pushState(State.ASSOCIATION);
      currentAssociation=new Association(attrs.getValue("Name"));
      currentSchema.getAssociations().add(currentAssociation);
      registeredAssociations.put(currentSchema.getNamespace().getName() + "." + currentAssociation.getName(),currentAssociation);
    }
 else     if ("end".equalsIgnoreCase(localName)) {
      if (getState() == State.ASSOCIATION) {
        pushState(State.ASSOCIATION_END);
        AssociationEnd end=new AssociationEnd(attrs.getValue("Role"));
        end.setMultiplicity(attrs.getValue("Multiplicity"));
        end.setType(new EntityType(attrs.getValue("Type")));
        currentAssociation.getEnds().add(end);
      }
 else {
        pushState(State.ASSOCIATION_SET_END);
        AssociationSetEnd end=new AssociationSetEnd(attrs.getValue("Role"));
        end.setType(new EntitySet(attrs.getValue("EntitySet")));
        currentAssociationSet.getEnds().add(end);
      }
    }
 else     if ("onDelete".equalsIgnoreCase(localName)) {
      pushState(State.ON_DELETE);
    }
 else     if ("referentialConstraint".equalsIgnoreCase(localName)) {
      pushState(State.REFERENTIAL_CONSTRAINT);
    }
 else     if ("functionImport".equalsIgnoreCase(localName)) {
      pushState(State.FUNCTION_IMPORT);
    }
 else     if ("function".equalsIgnoreCase(localName)) {
      pushState(State.FUNCTION);
    }
 else     if ("entityContainer".equalsIgnoreCase(localName)) {
      pushState(State.ENTITY_CONTAINER);
      currentEntityContainer=new EntityContainer(attrs.getValue("Name"));
      currentEntityContainer.setDefaultEntityContainer(Boolean.parseBoolean(attrs.getValue("IsDefaultEntityContainer")));
      String value=attrs.getValue("Extends");
      if (value != null) {
        currentEntityContainer.setExtended(new EntityContainer(value));
      }
      currentMetadata.getContainers().add(currentEntityContainer);
      registeredContainers.put(currentEntityContainer.getName(),currentEntityContainer);
    }
 else     if ("entitySet".equalsIgnoreCase(localName)) {
      pushState(State.ENTITY_SET);
      EntitySet entitySet=new EntitySet(attrs.getValue("Name"));
      entitySet.setType(new EntityType(attrs.getValue("EntityType")));
      currentEntityContainer.getEntities().add(entitySet);
    }
 else     if ("associationSet".equalsIgnoreCase(localName)) {
      pushState(State.ASSOCIATION_SET);
      currentAssociationSet=new AssociationSet(attrs.getValue("Name"));
      currentAssociationSet.setAssociation(new Association(attrs.getValue("Association")));
      currentEntityContainer.getAssociations().add(currentAssociationSet);
    }
  }
}
