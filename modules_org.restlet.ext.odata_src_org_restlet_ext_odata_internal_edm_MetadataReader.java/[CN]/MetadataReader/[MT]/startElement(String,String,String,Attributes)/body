{
  Map<String,String> attr=new HashMap<String,String>();
  for (int i=0; i < attributes.getLength(); i++) {
    attr.put(attributes.getLocalName(i),attributes.getValue(i));
  }
  if ("schema".equalsIgnoreCase(localName)) {
    pushState(State.SCHEMA);
    currentSchema=new Schema();
    this.currentMetadata.getSchemas().add(currentSchema);
    Namespace namespace=new Namespace(attr.get("Namespace"));
    namespace.setAlias(attr.get("Alias"));
    this.currentSchema.setNamespace(namespace);
    registeredNamespaces.add(namespace);
  }
 else   if ("using".equalsIgnoreCase(localName)) {
    pushState(State.USING);
    Namespace namespace=new Namespace(attr.get("Namespace"));
    namespace.setAlias(attr.get("Alias"));
    this.currentSchema.getReferencedNamespaces().add(namespace);
  }
 else   if ("documentation".equalsIgnoreCase(localName)) {
    pushState(State.DOCUMENTATION);
  }
 else   if ("entityType".equalsIgnoreCase(localName)) {
    pushState(State.ENTITY_TYPE);
    currentEntityType=new EntityType(attr.get("Name"));
    currentEntityType.setSchema(this.currentSchema);
    currentEntityType.setAbstractType(Boolean.parseBoolean(attr.get("Abstract")));
    String value=attr.get("BaseType");
    if (value != null) {
      currentEntityType.setBaseType(new EntityType(value));
    }
    this.currentSchema.getTypes().add(currentEntityType);
    discoverMapping(currentEntityType,null,currentMetadata,attributes);
    registeredEntityTypes.put(currentSchema.getNamespace().getName() + "." + currentEntityType.getName(),currentEntityType);
  }
 else   if ("key".equalsIgnoreCase(localName)) {
    pushState(State.ENTITY_TYPE_KEY);
  }
 else   if ("propertyRef".equalsIgnoreCase(localName)) {
    if (getState() == State.ENTITY_TYPE_KEY) {
      if (currentEntityType.getKeys() == null) {
        currentEntityType.setKeys(new ArrayList<Property>());
      }
      currentEntityType.getKeys().add(new Property(attr.get("Name")));
    }
  }
 else   if ("property".equalsIgnoreCase(localName)) {
    Property property=new Property(attr.get("Name"));
    property.setDefaultValue(attr.get("Default"));
    property.setNullable(Boolean.parseBoolean(attr.get("Nullable")));
    property.setType(new Type(attr.get("Type")));
    property.setGetterAccess(attr.get("GetterAccess"));
    property.setSetterAccess(attr.get("SetterAccess"));
    if (getState() == State.ENTITY_TYPE) {
      pushState(State.ENTITY_TYPE_PROPERTY);
      this.currentEntityType.getProperties().add(property);
    }
 else {
      pushState(State.COMPLEX_TYPE_PROPERTY);
      this.currentComplexType.getProperties().add(property);
    }
    discoverMapping(this.currentEntityType,property,currentMetadata,attributes);
  }
 else   if ("navigationProperty".equalsIgnoreCase(localName)) {
    pushState(State.NAVIGATION_PROPERTY);
    NavigationProperty property=new NavigationProperty(attr.get("Name"));
    property.setFromRole(new AssociationEnd(attr.get("FromRole")));
    property.setRelationship(new Association(attr.get("Relationship")));
    property.setToRole(new AssociationEnd(attr.get("ToRole")));
    currentEntityType.getAssociations().add(property);
  }
 else   if ("complexType".equalsIgnoreCase(localName)) {
    pushState(State.COMPLEX_TYPE);
    ComplexType complexType=new ComplexType(attr.get("Name"));
    complexType.setSchema(this.currentSchema);
    complexType.setParentComplexType(currentComplexType);
    currentComplexType=complexType;
  }
 else   if ("association".equalsIgnoreCase(localName)) {
    pushState(State.ASSOCIATION);
    currentAssociation=new Association(attr.get("Name"));
    currentSchema.getAssociations().add(currentAssociation);
    registeredAssociations.put(currentSchema.getNamespace().getName() + "." + currentAssociation.getName(),currentAssociation);
  }
 else   if ("end".equalsIgnoreCase(localName)) {
    if (getState() == State.ASSOCIATION) {
      pushState(State.ASSOCIATION_END);
      AssociationEnd end=new AssociationEnd(attr.get("Role"));
      end.setMultiplicity(attr.get("Multiplicity"));
      end.setType(new EntityType(attr.get("Type")));
      currentAssociation.getEnds().add(end);
    }
 else {
      pushState(State.ASSOCIATION_SET_END);
      AssociationSetEnd end=new AssociationSetEnd(attr.get("Role"));
      end.setType(new EntitySet(attr.get("EntitySet")));
      currentAssociationSet.getEnds().add(end);
    }
  }
 else   if ("onDelete".equalsIgnoreCase(localName)) {
    pushState(State.ON_DELETE);
  }
 else   if ("referentialConstraint".equalsIgnoreCase(localName)) {
    pushState(State.REFERENTIAL_CONSTRAINT);
  }
 else   if ("functionImport".equalsIgnoreCase(localName)) {
    pushState(State.FUNCTION_IMPORT);
  }
 else   if ("function".equalsIgnoreCase(localName)) {
    pushState(State.FUNCTION);
  }
 else   if ("entityContainer".equalsIgnoreCase(localName)) {
    pushState(State.ENTITY_CONTAINER);
    currentEntityContainer=new EntityContainer(attr.get("Name"));
    currentEntityContainer.setDefaultEntityContainer(Boolean.parseBoolean(attr.get("IsDefaultEntityContainer")));
    String value=attr.get("Extends");
    if (value != null) {
      currentEntityContainer.setExtended(new EntityContainer(value));
    }
    currentMetadata.getContainers().add(currentEntityContainer);
    registeredContainers.put(currentEntityContainer.getName(),currentEntityContainer);
  }
 else   if ("entitySet".equalsIgnoreCase(localName)) {
    pushState(State.ENTITY_SET);
    EntitySet entitySet=new EntitySet(attr.get("Name"));
    entitySet.setType(new EntityType(attr.get("EntityType")));
    currentEntityContainer.getEntities().add(entitySet);
  }
 else   if ("associationSet".equalsIgnoreCase(localName)) {
    pushState(State.ASSOCIATION_SET);
    currentAssociationSet=new AssociationSet(attr.get("Name"));
    currentAssociationSet.setAssociation(new Association(attr.get("Association")));
    currentEntityContainer.getAssociations().add(currentAssociationSet);
  }
}
