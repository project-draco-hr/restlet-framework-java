def goahead(self, end):
    rawdata = self.rawdata
    i = 0
    n = len(rawdata)
    while (i < n):
        if self.nomoretags:
            self.handle_data(rawdata[i:n])
            i = n
            break
        match = interesting.search(rawdata, i)
        if match:
            j = match.start()
        else:
            j = n
        if (i < j):
            self.handle_data(rawdata[i:j])
        i = j
        if (i == n):
            break
        if (rawdata[i] == '<'):
            if starttagopen.match(rawdata, i):
                if self.literal:
                    self.handle_data(rawdata[i])
                    i = (i + 1)
                    continue
                k = self.parse_starttag(i)
                if (k < 0):
                    break
                i = k
                continue
            if rawdata.startswith('</', i):
                k = self.parse_endtag(i)
                if (k < 0):
                    break
                i = k
                self.literal = 0
                continue
            if self.literal:
                if (n > (i + 1)):
                    self.handle_data('<')
                    i = (i + 1)
                else:
                    break
                continue
            if rawdata.startswith('<!--', i):
                k = self.parse_comment(i)
                if (k < 0):
                    break
                i = k
                continue
            if rawdata.startswith('<?', i):
                k = self.parse_pi(i)
                if (k < 0):
                    break
                i = (i + k)
                continue
            if rawdata.startswith('<!', i):
                k = self.parse_declaration(i)
                if (k < 0):
                    break
                i = k
                continue
        elif (rawdata[i] == '&'):
            if self.literal:
                self.handle_data(rawdata[i])
                i = (i + 1)
                continue
            match = charref.match(rawdata, i)
            if match:
                name = match.group(1)
                self.handle_charref(name)
                i = match.end(0)
                if (rawdata[(i - 1)] != ';'):
                    i = (i - 1)
                continue
            match = entityref.match(rawdata, i)
            if match:
                name = match.group(1)
                self.handle_entityref(name)
                i = match.end(0)
                if (rawdata[(i - 1)] != ';'):
                    i = (i - 1)
                continue
        else:
            self.error('neither < nor & ??')
        match = incomplete.match(rawdata, i)
        if (not match):
            self.handle_data(rawdata[i])
            i = (i + 1)
            continue
        j = match.end(0)
        if (j == n):
            break
        self.handle_data(rawdata[i:j])
        i = j
    if (end and (i < n)):
        self.handle_data(rawdata[i:n])
        i = n
    self.rawdata = rawdata[i:]
