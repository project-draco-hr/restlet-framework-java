def gettarinfo(self, name=None, arcname=None, fileobj=None):
    "Create a TarInfo object for either the file `name' or the file\n           object `fileobj' (using os.fstat on its file descriptor). You can\n           modify some of the TarInfo's attributes before you add it using\n           addfile(). If given, `arcname' specifies an alternative name for the\n           file in the archive.\n        "
    self._check('aw')
    if (fileobj is not None):
        name = fileobj.name
    if (arcname is None):
        arcname = name
    arcname = normpath(arcname)
    (drv, arcname) = os.path.splitdrive(arcname)
    while (arcname[0:1] == '/'):
        arcname = arcname[1:]
    tarinfo = TarInfo()
    if (fileobj is None):
        if (hasattr(os, 'lstat') and (not self.dereference)):
            statres = os.lstat(name)
        else:
            statres = os.stat(name)
    elif hasattr(os, 'fstat'):
        statres = os.fstat(fileobj.fileno())
    else:
        raise NotImplementedError('fileobj argument not supported on this platform (no os.fstat)')
    linkname = ''
    stmd = statres.st_mode
    if stat.S_ISREG(stmd):
        inode = (statres.st_ino, statres.st_dev)
        if ((not self.dereference) and (statres.st_nlink > 1) and (inode in self.inodes)):
            type = LNKTYPE
            linkname = self.inodes[inode]
        else:
            type = REGTYPE
            if inode[0]:
                self.inodes[inode] = arcname
    elif stat.S_ISDIR(stmd):
        type = DIRTYPE
        if (arcname[(-1):] != '/'):
            arcname += '/'
    elif stat.S_ISFIFO(stmd):
        type = FIFOTYPE
    elif stat.S_ISLNK(stmd):
        type = SYMTYPE
        linkname = os.readlink(name)
    elif stat.S_ISCHR(stmd):
        type = CHRTYPE
    elif stat.S_ISBLK(stmd):
        type = BLKTYPE
    else:
        return None
    tarinfo.name = arcname
    tarinfo.mode = stmd
    tarinfo.uid = statres.st_uid
    tarinfo.gid = statres.st_gid
    if stat.S_ISREG(stmd):
        tarinfo.size = statres.st_size
    else:
        tarinfo.size = 0L
    tarinfo.mtime = statres.st_mtime
    tarinfo.type = type
    tarinfo.linkname = linkname
    if pwd:
        try:
            tarinfo.uname = pwd.getpwuid(tarinfo.uid)[0]
        except KeyError:
            pass
    if grp:
        try:
            tarinfo.gname = grp.getgrgid(tarinfo.gid)[0]
        except KeyError:
            pass
    if (type in (CHRTYPE, BLKTYPE)):
        if (hasattr(os, 'major') and hasattr(os, 'minor')):
            tarinfo.devmajor = os.major(statres.st_rdev)
            tarinfo.devminor = os.minor(statres.st_rdev)
    return tarinfo
