def extractall(self, path='.', members=None):
    "Extract all members from the archive to the current working\n           directory and set owner, modification time and permissions on\n           directories afterwards. `path' specifies a different directory\n           to extract to. `members' is optional and must be a subset of the\n           list returned by getmembers().\n        "
    directories = []
    if (members is None):
        members = self
    for tarinfo in members:
        if tarinfo.isdir():
            directories.append(tarinfo)
            tarinfo = copy.copy(tarinfo)
            tarinfo.mode = 448
        self.extract(tarinfo, path)
    directories.sort((lambda a, b: cmp(a.name, b.name)))
    directories.reverse()
    for tarinfo in directories:
        dirpath = os.path.join(path, tarinfo.name)
        try:
            self.chown(tarinfo, dirpath)
            self.utime(tarinfo, dirpath)
            self.chmod(tarinfo, dirpath)
        except ExtractError as e:
            if (self.errorlevel > 1):
                raise
            else:
                self._dbg(1, ('tarfile: %s' % e))
