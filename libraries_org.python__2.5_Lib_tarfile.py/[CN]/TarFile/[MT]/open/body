@classmethod
def open(cls, name=None, mode='r', fileobj=None, bufsize=(20 * 512)):
    "Open a tar archive for reading, writing or appending. Return\n           an appropriate TarFile class.\n\n           mode:\n           'r' or 'r:*' open for reading with transparent compression\n           'r:'         open for reading exclusively uncompressed\n           'r:gz'       open for reading with gzip compression\n           'r:bz2'      open for reading with bzip2 compression\n           'a' or 'a:'  open for appending\n           'w' or 'w:'  open for writing without compression\n           'w:gz'       open for writing with gzip compression\n           'w:bz2'      open for writing with bzip2 compression\n\n           'r|*'        open a stream of tar blocks with transparent compression\n           'r|'         open an uncompressed stream of tar blocks for reading\n           'r|gz'       open a gzip compressed stream of tar blocks\n           'r|bz2'      open a bzip2 compressed stream of tar blocks\n           'w|'         open an uncompressed stream for writing\n           'w|gz'       open a gzip compressed stream for writing\n           'w|bz2'      open a bzip2 compressed stream for writing\n        "
    if ((not name) and (not fileobj)):
        raise ValueError('nothing to open')
    if (mode in ('r', 'r:*')):
        for comptype in cls.OPEN_METH:
            func = getattr(cls, cls.OPEN_METH[comptype])
            if (fileobj is not None):
                saved_pos = fileobj.tell()
            try:
                return func(name, 'r', fileobj)
            except (ReadError, CompressionError):
                if (fileobj is not None):
                    fileobj.seek(saved_pos)
                continue
        raise ReadError('file could not be opened successfully')
    elif (':' in mode):
        (filemode, comptype) = mode.split(':', 1)
        filemode = (filemode or 'r')
        comptype = (comptype or 'tar')
        if (comptype in cls.OPEN_METH):
            func = getattr(cls, cls.OPEN_METH[comptype])
        else:
            raise CompressionError(('unknown compression type %r' % comptype))
        return func(name, filemode, fileobj)
    elif ('|' in mode):
        (filemode, comptype) = mode.split('|', 1)
        filemode = (filemode or 'r')
        comptype = (comptype or 'tar')
        if (filemode not in 'rw'):
            raise ValueError("mode must be 'r' or 'w'")
        t = cls(name, filemode, _Stream(name, filemode, comptype, fileobj, bufsize))
        t._extfileobj = False
        return t
    elif (mode in 'aw'):
        return cls.taropen(name, mode, fileobj)
    raise ValueError('undiscernible mode')
