def tobuf(self, posix=False):
    'Return a tar header as a string of 512 byte blocks.\n        '
    buf = ''
    type = self.type
    prefix = ''
    if self.name.endswith('/'):
        type = DIRTYPE
    if (type in (GNUTYPE_LONGNAME, GNUTYPE_LONGLINK)):
        name = self.name
    else:
        name = normpath(self.name)
    if (type == DIRTYPE):
        name += '/'
    linkname = self.linkname
    if linkname:
        linkname = normpath(linkname)
    if posix:
        if (self.size > MAXSIZE_MEMBER):
            raise ValueError('file is too large (>= 8 GB)')
        if (len(self.linkname) > LENGTH_LINK):
            raise ValueError(('linkname is too long (>%d)' % LENGTH_LINK))
        if (len(name) > LENGTH_NAME):
            prefix = name[:(LENGTH_PREFIX + 1)]
            while (prefix and (prefix[(-1)] != '/')):
                prefix = prefix[:(-1)]
            name = name[len(prefix):]
            prefix = prefix[:(-1)]
            if ((not prefix) or (len(name) > LENGTH_NAME)):
                raise ValueError('name is too long')
    else:
        if (len(self.linkname) > LENGTH_LINK):
            buf += self._create_gnulong(self.linkname, GNUTYPE_LONGLINK)
        if (len(name) > LENGTH_NAME):
            buf += self._create_gnulong(name, GNUTYPE_LONGNAME)
    parts = [stn(name, 100), itn((self.mode & 4095), 8, posix), itn(self.uid, 8, posix), itn(self.gid, 8, posix), itn(self.size, 12, posix), itn(self.mtime, 12, posix), '        ', type, stn(self.linkname, 100), stn(MAGIC, 6), stn(VERSION, 2), stn(self.uname, 32), stn(self.gname, 32), itn(self.devmajor, 8, posix), itn(self.devminor, 8, posix), stn(prefix, 155)]
    buf += ''.join(parts).ljust(BLOCKSIZE, NUL)
    chksum = calc_chksums(buf[(- BLOCKSIZE):])[0]
    buf = ((buf[:(-364)] + ('%06o\x00' % chksum)) + buf[(-357):])
    self.buf = buf
    return buf
