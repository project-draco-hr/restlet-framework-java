{
  for (  ResourceInfo ri : resources) {
    Resource resource=new Resource();
    resource.setDescription(toString(ri.getDocumentations()));
    resource.setName(ri.getIdentifier());
    if (basePath != null) {
      if (basePath.endsWith("/")) {
        if (ri.getPath().startsWith("/")) {
          resource.setResourcePath(basePath + ri.getPath().substring(1));
        }
 else {
          resource.setResourcePath(basePath + ri.getPath());
        }
      }
 else {
        if (ri.getPath().startsWith("/")) {
          resource.setResourcePath(basePath + ri.getPath());
        }
 else {
          resource.setResourcePath(basePath + "/" + ri.getPath());
        }
      }
    }
 else {
      resource.setResourcePath(ri.getPath());
    }
    if (!ri.getChildResources().isEmpty()) {
      addResources(application,contract,ri.getChildResources(),resource.getResourcePath(),mapReps);
    }
    if (ri.getMethods().isEmpty()) {
      continue;
    }
    resource.setPathVariables(new ArrayList<PathVariable>());
    for (    ParameterInfo pi : ri.getParameters()) {
      if (ParameterStyle.TEMPLATE.equals(pi.getStyle())) {
        PathVariable pathVariable=new PathVariable();
        pathVariable.setDescription(toString(pi.getDocumentations()));
        pathVariable.setName(pi.getName());
        resource.getPathVariables().add(pathVariable);
      }
    }
    resource.setOperations(new ArrayList<Operation>());
    for (    MethodInfo mi : ri.getMethods()) {
      Operation operation=new Operation();
      operation.setDescription(toString(mi.getDocumentations()));
      operation.setName(mi.getMethod().getName());
      operation.setMethod(new org.restlet.ext.apispark.Method());
      operation.getMethod().setDescription(mi.getMethod().getDescription());
      operation.getMethod().setName(mi.getMethod().getName());
      operation.setHeaders(new ArrayList<Parameter>());
      operation.setQueryParameters(new ArrayList<Parameter>());
      if (mi.getRequest() != null && mi.getRequest().getParameters() != null) {
        for (        ParameterInfo pi : mi.getRequest().getParameters()) {
          if (ParameterStyle.HEADER.equals(pi.getStyle())) {
            Parameter parameter=new Parameter();
            parameter.setAllowMultiple(pi.isRepeating());
            parameter.setDefaultValue(pi.getDefaultValue());
            parameter.setDescription(toString(pi.getDocumentations()));
            parameter.setName(pi.getName());
            parameter.setPossibleValues(new ArrayList<String>());
            parameter.setRequired(pi.isRequired());
            operation.getHeaders().add(parameter);
          }
 else           if (ParameterStyle.QUERY.equals(pi.getStyle())) {
            Parameter parameter=new Parameter();
            parameter.setAllowMultiple(pi.isRepeating());
            parameter.setDefaultValue(pi.getDefaultValue());
            parameter.setDescription(toString(pi.getDocumentations()));
            parameter.setName(pi.getName());
            parameter.setPossibleValues(new ArrayList<String>());
            parameter.setRequired(pi.isRequired());
            operation.getHeaders().add(parameter);
          }
        }
      }
      if (mi.getRequest() != null && mi.getRequest().getRepresentations() != null && !mi.getRequest().getRepresentations().isEmpty()) {
        addRepresentations(mapReps,mi.getRequest().getRepresentations());
        Body body=new Body();
        body.setRepresentation(mi.getRequest().getRepresentations().get(0).getName());
        operation.setInRepresentation(body);
      }
      if (mi.getResponses() != null && !mi.getResponses().isEmpty()) {
        operation.setResponses(new ArrayList<Response>());
        Body body=new Body();
        if (!mi.getResponse().getRepresentations().isEmpty()) {
          body.setRepresentation(mi.getResponse().getRepresentations().get(0).getName());
        }
        operation.setOutRepresentation(body);
        for (        ResponseInfo rio : mi.getResponses()) {
          addRepresentations(mapReps,rio.getRepresentations());
          if (!rio.getStatuses().isEmpty()) {
            Status status=rio.getStatuses().get(0);
            Response response=new Response();
            response.setBody(body);
            response.setCode(status.getCode());
            response.setName(toString(rio.getDocumentations()));
            response.setDescription(toString(rio.getDocumentations()));
            response.setMessage(status.getDescription());
            operation.getResponses().add(response);
          }
        }
      }
      resource.getOperations().add(operation);
    }
    contract.getResources().add(resource);
  }
}
