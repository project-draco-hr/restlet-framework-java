{
  Engine.register();
  String ulogin=null;
  String upwd=null;
  String serviceUrl=null;
  String defSource=null;
  String compName=null;
  String descriptorId=null;
  String language=null;
  String versionId=null;
  String updateStrategy=null;
  boolean newVersion=false;
  boolean create=false;
  LOGGER.fine("Get parameters");
  for (int i=0; i < (args.length); i++) {
    if ("-h".equals(args[i])) {
      printHelp();
      System.exit(0);
    }
 else     if ("-u".equals(args[i]) || "--username".equals(args[i])) {
      ulogin=getParameter(args,++i);
    }
 else     if ("-p".equals(args[i]) || "--password".equals(args[i])) {
      upwd=getParameter(args,++i);
    }
 else     if ("-s".equals(args[i]) || "--service".equals(args[i])) {
      serviceUrl=getParameter(args,++i);
    }
 else     if ("-c".equals(args[i]) || "--component".equals(args[i])) {
      compName=getParameter(args,++i);
    }
 else     if ("-d".equals(args[i]) || "--descriptor".equals(args[i])) {
      descriptorId=getParameter(args,++i);
    }
 else     if ("-v".equals(args[i]) || "--version".equals(args[i])) {
      versionId=getParameter(args,++i);
    }
 else     if ("-U".equals(args[i]) || "--updateStrategy".equals(args[i])) {
      updateStrategy=getParameter(args,++i).toLowerCase();
    }
 else     if ("-n".equals(args[i]) || "--newVersion".equals(args[i])) {
      newVersion=true;
    }
 else     if ("-C".equals(args[i]) || "--create".equals(args[i])) {
      create=true;
    }
 else     if ("-l".equals(args[i]) || "--language".equals(args[i])) {
      language=getParameter(args,++i).toLowerCase();
    }
 else     if ("-V".equals(args[i]) || "--verbose".equals(args[i])) {
      Engine.setLogLevel(Level.FINE);
    }
 else {
      defSource=args[i];
    }
  }
  if (newVersion && create) {
    LOGGER.severe("You can't use newVersion and create at the same time. Use parameter --help for help.");
  }
 else   if (create && updateStrategy != null) {
    LOGGER.severe("You can't use create and updateStrategy at the same time. Use parameter --help for help.");
  }
 else   if (newVersion && updateStrategy != null) {
    LOGGER.severe("You can't use newVersion and updateStrategy at the same time. Use parameter --help for help.");
  }
 else   if (!newVersion && updateStrategy == null) {
    create=true;
  }
  Engine.getLogger("").getHandlers()[0].setFilter(new java.util.logging.Filter(){
    public boolean isLoggable(    LogRecord record){
      return record.getLoggerName().startsWith("org.restlet.ext.apispark");
    }
  }
);
  LOGGER.fine("Check parameters");
  if (isEmpty(serviceUrl)) {
    serviceUrl="https://apispark.com/";
  }
  if (!serviceUrl.endsWith("/")) {
    serviceUrl+="/";
  }
  if (isEmpty(ulogin) || isEmpty(upwd) || isEmpty(defSource)) {
    printHelp();
    System.exit(1);
  }
  Application application=null;
  Component component=null;
  Definition definition=null;
  javax.ws.rs.core.Application a=null;
  if (language == null) {
    Class<?> clazz=null;
    try {
      clazz=Class.forName(defSource);
      if (Application.class.isAssignableFrom(clazz)) {
        application=getApplication(defSource);
        component=getComponent(compName);
      }
 else       if (clazz != null) {
        a=JaxrsIntrospector.getApplication(defSource);
      }
    }
 catch (    ClassNotFoundException e) {
      LOGGER.log(Level.SEVERE,"Cannot locate the application class.",e);
    }
  }
  if (application != null) {
    LOGGER.info("Instantiate introspector");
    Introspector i=new Introspector(component,application);
    LOGGER.info("Generate documentation");
    definition=i.getDefinition();
  }
 else   if (a != null) {
    LOGGER.fine("Instantiate introspector");
    JaxrsIntrospector i=new JaxrsIntrospector(a);
    LOGGER.info("Generate documentation");
    definition=i.getDefinition();
  }
 else   if ("swagger".equals(language)) {
    definition=SwaggerUtils.getDefinition(defSource,ulogin,upwd);
  }
  if (definition != null) {
    sendDefinition(definition,descriptorId,versionId,ulogin,upwd,serviceUrl,updateStrategy,create,newVersion,LOGGER);
  }
 else {
    LOGGER.severe("Please provide a valid application class name or definition URL.");
  }
}
