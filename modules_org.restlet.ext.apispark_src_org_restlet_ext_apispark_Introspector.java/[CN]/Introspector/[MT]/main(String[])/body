{
  Engine.register();
  String ulogin=null;
  String upwd=null;
  String serviceUrl=null;
  String defSource=null;
  String compName=null;
  String descriptorId=null;
  String language=null;
  String versionId=null;
  String updateStrategy=null;
  List<IntrospectionHelper> introspectionHelpers=new ArrayList<IntrospectionHelper>();
  boolean newVersion=false;
  boolean create=false;
  LOGGER.fine("Get parameters");
  for (int i=0; i < (args.length); i++) {
    if ("-h".equals(args[i])) {
      printHelp();
      System.exit(0);
    }
 else     if ("-u".equals(args[i]) || "--username".equals(args[i])) {
      ulogin=getParameter(args,++i);
    }
 else     if ("-p".equals(args[i]) || "--password".equals(args[i])) {
      upwd=getParameter(args,++i);
    }
 else     if ("-s".equals(args[i]) || "--service".equals(args[i])) {
      serviceUrl=getParameter(args,++i);
    }
 else     if ("-c".equals(args[i]) || "--component".equals(args[i])) {
      compName=getParameter(args,++i);
    }
 else     if ("-d".equals(args[i]) || "--descriptor".equals(args[i])) {
      descriptorId=getParameter(args,++i);
    }
 else     if ("-v".equals(args[i]) || "--version".equals(args[i])) {
      versionId=getParameter(args,++i);
    }
 else     if ("-U".equals(args[i]) || "--updateStrategy".equals(args[i])) {
      updateStrategy=getParameter(args,++i).toLowerCase();
    }
 else     if ("-n".equals(args[i]) || "--newVersion".equals(args[i])) {
      newVersion=true;
    }
 else     if ("-C".equals(args[i]) || "--create".equals(args[i])) {
      create=true;
    }
 else     if ("-l".equals(args[i]) || "--language".equals(args[i])) {
      language=getParameter(args,++i).toLowerCase();
    }
 else     if ("-V".equals(args[i]) || "--verbose".equals(args[i])) {
      Engine.setLogLevel(Level.FINE);
    }
 else {
      defSource=args[i];
    }
  }
  ServiceLoader<IntrospectionHelper> ihLoader=ServiceLoader.load(IntrospectionHelper.class);
  for (  IntrospectionHelper helper : ihLoader) {
    introspectionHelpers.add(helper);
  }
  if (newVersion && create) {
    LOGGER.severe("You can't use newVersion and create at the same time. Use parameter --help for help.");
  }
 else   if (create && updateStrategy != null) {
    LOGGER.severe("You can't use create and updateStrategy at the same time. Use parameter --help for help.");
  }
 else   if (newVersion && updateStrategy != null) {
    LOGGER.severe("You can't use newVersion and updateStrategy at the same time. Use parameter --help for help.");
  }
 else   if (!newVersion && updateStrategy == null) {
    create=true;
  }
  Engine.getLogger("").getHandlers()[0].setFilter(new java.util.logging.Filter(){
    public boolean isLoggable(    LogRecord record){
      return record.getLoggerName().startsWith("org.restlet.ext.apispark");
    }
  }
);
  LOGGER.fine("Check parameters");
  if (StringUtils.isNullOrEmpty(serviceUrl)) {
    serviceUrl="https://apispark.com/";
  }
  if (!serviceUrl.endsWith("/")) {
    serviceUrl+="/";
  }
  if (StringUtils.isNullOrEmpty(ulogin) || StringUtils.isNullOrEmpty(upwd) || StringUtils.isNullOrEmpty(defSource)) {
    printHelp();
    System.exit(1);
  }
  Definition definition=null;
  if (language == null) {
    Class<?> clazz=null;
    try {
      clazz=Class.forName(defSource);
    }
 catch (    ClassNotFoundException e) {
      LOGGER.log(Level.SEVERE,"Cannot locate the application class.",e);
      throw new RuntimeException("Cannot locate the application class.",e);
    }
    if (JaxRsApplication.class.isAssignableFrom(clazz)) {
    }
 else     if (Application.class.isAssignableFrom(clazz)) {
      Application application=ApplicationIntrospector.getApplication(defSource);
      Component component=ComponentIntrospector.getComponent(compName);
      definition=ApplicationIntrospector.getDefinition(application,null,component,introspectionHelpers);
    }
 else     if (clazz != null) {
      javax.ws.rs.core.Application jaxrsApplication=JaxRsIntrospector.getApplication(defSource);
      definition=JaxRsIntrospector.getDefinition(jaxrsApplication,null,introspectionHelpers);
    }
 else {
      LOGGER.log(Level.SEVERE,"Class " + defSource + " is not supported");
      throw new RuntimeException("Class " + defSource + " is not supported");
    }
  }
 else {
    if ("swagger".equals(language)) {
      definition=SwaggerUtils.getDefinition(defSource,ulogin,upwd);
    }
 else {
      LOGGER.log(Level.SEVERE,"Language " + language + " is not supported");
      throw new RuntimeException("Language " + language + " is not supported");
    }
  }
  if (definition != null) {
    IntrospectionUtils.sendDefinition(definition,descriptorId,versionId,ulogin,upwd,serviceUrl,updateStrategy,create,newVersion,LOGGER);
  }
 else {
    LOGGER.severe("Please provide a valid application class name or definition URL.");
  }
}
