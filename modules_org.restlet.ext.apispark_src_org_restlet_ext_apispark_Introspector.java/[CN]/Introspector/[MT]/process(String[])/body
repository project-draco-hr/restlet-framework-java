{
  Engine.register();
  String ulogin=null;
  String upwd=null;
  String serviceUrl=null;
  String defSource=null;
  String compName=null;
  String language=null;
  String cellId=null;
  String cellVersion=null;
  String cellType=null;
  boolean createNewCell=false;
  boolean createNewVersion=false;
  boolean updateCell=false;
  String updateStrategy="update";
  boolean useSectionNamingPackageStrategy=false;
  LOGGER.fine("Get parameters");
  for (int i=0; i < (args.length); i++) {
    String arg=args[i];
    if ("-h".equals(arg) || "--help".equals(arg)) {
      printHelp();
      System.exit(0);
    }
 else     if ("-u".equals(arg) || "--username".equals(arg)) {
      ulogin=getParameter(args,++i);
    }
 else     if ("-p".equals(arg) || "--password".equals(arg)) {
      upwd=getParameter(args,++i);
    }
 else     if ("-S".equals(arg) || "--service".equals(arg)) {
      serviceUrl=getParameter(args,++i);
    }
 else     if ("-c".equals(arg) || "--create-connector".equals(arg)) {
      createNewCell=true;
      cellType="webapiconnector";
    }
 else     if ("-d".equals(arg) || "--create-descriptor".equals(arg)) {
      createNewCell=true;
      cellType="webapidescriptor";
    }
 else     if ("--component".equals(arg)) {
      compName=getParameter(args,++i);
    }
 else     if ("-i".equals(arg) || "--id".equals(arg)) {
      cellId=getParameter(args,++i);
    }
 else     if ("-v".equals(arg) || "--version".equals(arg)) {
      cellVersion=getParameter(args,++i);
    }
 else     if ("-U".equals(arg) || "--update".equals(arg)) {
      updateCell=true;
    }
 else     if ("-s".equals(arg) || "--update-strategy".equals(arg)) {
      updateStrategy=getParameter(args,++i).toLowerCase();
    }
 else     if ("-n".equals(arg) || "--new-version".equals(arg)) {
      createNewVersion=true;
    }
 else     if ("-l".equals(arg) || "--language".equals(arg)) {
      language=getParameter(args,++i).toLowerCase();
    }
 else     if ("--sections".equals(arg)) {
      useSectionNamingPackageStrategy=true;
    }
 else     if ("-V".equals(arg) || "--verbose".equals(arg)) {
      Engine.setLogLevel(Level.FINE);
    }
 else {
      defSource=arg;
    }
  }
  if (!createNewCell && !createNewVersion && !updateCell) {
    LOGGER.severe("You should specify the wanted action among -d (--create-descriptor), -c (--create-connector), " + "-U (--update) or -n (--new-version). " + "Use parameter --help for help.");
    System.exit(1);
  }
  if (createNewCell) {
    if (createNewVersion || updateCell) {
      LOGGER.severe("In create new cell mode, you can't use -U (--update) or -n (--new-version). " + "Use parameter --help for help.");
      System.exit(1);
    }
    if (cellId != null || cellVersion != null) {
      LOGGER.severe("In create new cell mode, you can't use -i (--id) or -v (--version). " + "Use parameter --help for help.");
      System.exit(1);
    }
  }
  if (createNewVersion) {
    if (createNewCell || updateCell) {
      LOGGER.severe("In create new version mode, you can't use -d (--create-descriptor), -c (--create-connector) or -n (--new-version). " + "Use parameter --help for help.");
      System.exit(1);
    }
    if (cellId == null) {
      LOGGER.severe("In create new version mode, you should specify the cell id with -i (--id). " + "Use parameter --help for help.");
      System.exit(1);
    }
    if (cellVersion != null) {
      LOGGER.severe("In create new version mode, you can't use -v (--version). " + "Use parameter --help for help.");
      System.exit(1);
    }
  }
  if (updateCell) {
    if (createNewCell || createNewVersion) {
      LOGGER.severe("In update mode, you can't use -d (--create-descriptor), -c (--create-connector) or -N (--new-version). " + "Use parameter --help for help.");
      System.exit(1);
    }
    if (cellId == null || cellVersion == null) {
      LOGGER.severe("In update mode, you should specify the cell id with -i (--id) and the cell version with -v (--version). " + "Use parameter --help for help.");
      System.exit(1);
    }
    if (!IntrospectionUtils.STRATEGIES.contains(updateStrategy)) {
      LOGGER.severe("The strategy: " + updateStrategy + " is not available. Use parameter --help for help.");
      System.exit(1);
    }
  }
  if (StringUtils.isNullOrEmpty(ulogin) || StringUtils.isNullOrEmpty(upwd)) {
    LOGGER.severe("You should specify your API spark login and password with -U (--username) and -p (--password). " + "Use parameter --help for help.");
    System.exit(1);
  }
  if (StringUtils.isNullOrEmpty(defSource)) {
    LOGGER.severe("You should specify the definition source to use (value no prefixed by any option). " + "Use parameter --help for help.");
    System.exit(1);
  }
  if (StringUtils.isNullOrEmpty(serviceUrl)) {
    serviceUrl="https://apispark.restlet.com/";
  }
  if (!serviceUrl.endsWith("/")) {
    serviceUrl+="/";
  }
  Engine.getLogger("").getHandlers()[0].setFilter(new java.util.logging.Filter(){
    public boolean isLoggable(    LogRecord record){
      return record.getLoggerName().startsWith("org.restlet.ext.apispark");
    }
  }
);
  List<IntrospectionHelper> introspectionHelpers=new ArrayList<>();
  ServiceLoader<IntrospectionHelper> ihLoader=ServiceLoader.load(IntrospectionHelper.class);
  for (  IntrospectionHelper helper : ihLoader) {
    introspectionHelpers.add(helper);
  }
  Definition definition=null;
  if (language == null) {
    Class<?> clazz=null;
    try {
      clazz=Class.forName(defSource);
    }
 catch (    ClassNotFoundException e) {
      LOGGER.log(Level.SEVERE,"Cannot locate the application class.",e);
      System.exit(1);
    }
    if (Application.class.isAssignableFrom(clazz)) {
      Application application=ApplicationIntrospector.getApplication(defSource);
      Component component=ComponentIntrospector.getComponent(compName);
      definition=ApplicationIntrospector.getDefinition(application,null,component,useSectionNamingPackageStrategy);
    }
 else     if (clazz != null) {
      javax.ws.rs.core.Application jaxrsApplication=JaxRsIntrospector.getApplication(defSource);
      definition=JaxRsIntrospector.getDefinition(jaxrsApplication,null,useSectionNamingPackageStrategy);
    }
 else {
      LOGGER.log(Level.SEVERE,"Class " + defSource + " is not supported");
      System.exit(1);
    }
  }
 else {
    if ("swagger".equals(language)) {
      definition=SwaggerUtils.getDefinition(defSource,ulogin,upwd);
    }
 else {
      LOGGER.log(Level.SEVERE,"Language " + language + " is not supported");
      System.exit(1);
    }
  }
  if (definition == null) {
    LOGGER.severe("Please provide a valid application class name or definition URL.");
    System.exit(1);
  }
  IntrospectionUtils.sendDefinition(definition,ulogin,upwd,serviceUrl,cellType,cellId,cellVersion,createNewCell,createNewVersion,updateCell,updateStrategy,LOGGER);
  LOGGER.info("Instrospection complete");
}
