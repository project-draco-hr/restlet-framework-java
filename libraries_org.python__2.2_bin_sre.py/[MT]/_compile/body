def _compile(*key):
    p = _cache.get(key)
    if (p is not None):
        return p
    (pattern, flags) = key
    if (type(pattern) is _pattern_type):
        return pattern
    if (type(pattern) not in sre_compile.STRING_TYPES):
        raise TypeError, 'first argument must be string or compiled pattern'
    try:
        p = sre_compile.compile(pattern, flags)
    except error as v:
        raise error, v
    if (len(_cache) >= _MAXCACHE):
        _cache.clear()
    _cache[key] = p
    return p
