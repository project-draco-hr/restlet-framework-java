{
  RoleChecker exampleAuthorizator=new RoleChecker(){
    /** 
 * @return true, if the role name and the username starts with the
 * same char.
 * @see RoleChecker#isUserInRole(String)
 */
    public boolean isInRole(    Principal principal,    String role){
      if (principal == null)       throw new IllegalArgumentException("No principal given");
      if (role == null)       throw new IllegalArgumentException("No role given");
      if (role.charAt(0) == principal.getName().charAt(0))       return true;
      return false;
    }
  }
;
  if (!startServer(exampleAuthorizator))   return;
  Response response=getAuth(null,"fsdf","xyz");
  assertEquals(Status.CLIENT_ERROR_UNAUTHORIZED,response.getStatus());
  response=getAuth(null,"fsdf","baj");
  assertEquals(Status.CLIENT_ERROR_UNAUTHORIZED,response.getStatus());
  response=getAuth(null,"alice","alicesSecret");
  sysOutEntityIfNotStatus(Status.CLIENT_ERROR_FORBIDDEN,response);
  assertEquals(Status.CLIENT_ERROR_FORBIDDEN,response.getStatus());
  response=getAuth(null,"bob","bobsSecret");
  assertEquals(Status.SUCCESS_OK,response.getStatus());
  ChallengeResponse cr;
  cr=new ChallengeResponse(ChallengeScheme.HTTP_BASIC,"bob","bobsSecret");
  response=post(null,new Form("abc=def").getWebRepresentation(),cr);
  sysOutEntityIfError(response);
  assertEquals(Status.SUCCESS_CREATED,response.getStatus());
  response=accessServer(Method.PUT,SEC_CONT_SERV,null,null,cr);
  assertEquals(Status.CLIENT_ERROR_METHOD_NOT_ALLOWED,response.getStatus());
}
