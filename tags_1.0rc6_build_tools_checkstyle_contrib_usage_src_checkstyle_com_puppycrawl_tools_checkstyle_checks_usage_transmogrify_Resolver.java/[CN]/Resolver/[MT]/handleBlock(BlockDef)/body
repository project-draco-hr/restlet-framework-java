{
  SymTabAST node=block.getTreeNode();
switch (node.getType()) {
case TokenTypes.LITERAL_FOR:
    handleFor(block);
  break;
case TokenTypes.LITERAL_IF:
handleIf(block);
break;
case TokenTypes.LITERAL_WHILE:
handleWhileAndSynchronized(block);
break;
case TokenTypes.LITERAL_DO:
handleDoWhile(block);
break;
case TokenTypes.LITERAL_TRY:
case TokenTypes.LITERAL_FINALLY:
SymTabAST slist=node.findFirstToken(TokenTypes.SLIST);
handleSList(slist,block);
break;
case TokenTypes.LITERAL_CATCH:
handleCatch(block);
break;
case TokenTypes.LITERAL_SWITCH:
handleSwitch(block);
break;
case TokenTypes.SLIST:
handleSList(node,block);
break;
case TokenTypes.EXPR:
resolveExpression(node,block,null,true);
break;
case TokenTypes.INSTANCE_INIT:
case TokenTypes.STATIC_INIT:
handleSList((SymTabAST)node.getFirstChild(),block);
break;
case TokenTypes.LITERAL_SYNCHRONIZED:
handleWhileAndSynchronized(block);
break;
case TokenTypes.LITERAL_ASSERT:
handleAssert(block);
break;
default :
if (mInitialized) {
final Log log=mLogFactory.getInstance(this.getClass());
log.error("Unhandled block " + block + " of type "+ node.getType());
}
}
}
