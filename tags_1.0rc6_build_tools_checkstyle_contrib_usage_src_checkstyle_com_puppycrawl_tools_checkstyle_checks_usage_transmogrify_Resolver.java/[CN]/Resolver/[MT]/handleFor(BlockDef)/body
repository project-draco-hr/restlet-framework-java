{
  SymTabAST node=block.getTreeNode();
  SymTabAST body;
  SymTabAST forEach=node.findFirstToken(TokenTypes.FOR_EACH_CLAUSE);
  if (forEach == null) {
    SymTabAST init=node.findFirstToken(TokenTypes.FOR_INIT);
    if (init.getFirstChild() != null) {
      if (init.getFirstChild().getType() == TokenTypes.ELIST) {
        resolveExpression((SymTabAST)(init.getFirstChild()),block,null,true);
      }
    }
    SymTabAST cond=node.findFirstToken(TokenTypes.FOR_CONDITION);
    if (cond.getFirstChild() != null) {
      resolveExpression((SymTabAST)(cond.getFirstChild()),block,null,true);
    }
    SymTabAST iterator=node.findFirstToken(TokenTypes.FOR_ITERATOR);
    if (iterator.getFirstChild() != null) {
      resolveExpression((SymTabAST)(iterator.getFirstChild()),block,null,true);
    }
    body=(SymTabAST)(iterator.getNextSibling());
  }
 else {
    resolveExpression((forEach.findFirstToken(TokenTypes.EXPR)),block,null,true);
    body=(SymTabAST)(forEach.getNextSibling());
  }
  if (body.getType() == TokenTypes.RPAREN) {
    body=(SymTabAST)body.getNextSibling();
  }
  if (body.getType() == TokenTypes.SLIST) {
    handleSList(body,block);
  }
 else {
    resolveExpression(body,block,null,true);
  }
}
