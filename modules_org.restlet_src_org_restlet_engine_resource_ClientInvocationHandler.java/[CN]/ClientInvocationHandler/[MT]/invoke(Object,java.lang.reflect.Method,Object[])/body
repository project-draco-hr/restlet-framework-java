{
  Object result=null;
  if (javaMethod.equals(Object.class.getMethod("toString"))) {
    result="ClientProxy for resource: " + clientResource;
  }
 else   if (javaMethod.equals(ClientProxy.class.getMethod("getClientResource"))) {
    result=clientResource;
  }
 else {
    MethodAnnotationInfo annotationInfo=getAnnotationUtils().getMethodAnnotation(getAnnotations(),javaMethod);
    if (annotationInfo != null) {
      Representation requestEntity=null;
      if ((args != null) && args.length > 0) {
        for (int i=0; i < args.length; i++) {
          Object o=args[i];
          if (o == null) {
            requestEntity=null;
          }
 else           if (Result.class.isAssignableFrom(o.getClass())) {
            final Result rCallback=(Result)o;
            Type[] genericParameterTypes=javaMethod.getGenericParameterTypes();
            Type genericParameterType=genericParameterTypes[i];
            ParameterizedType parameterizedType=(genericParameterType instanceof java.lang.reflect.ParameterizedType) ? (java.lang.reflect.ParameterizedType)genericParameterType : null;
            final Class<?> actualType=(parameterizedType.getActualTypeArguments()[0] instanceof Class<?>) ? (Class<?>)parameterizedType.getActualTypeArguments()[0] : null;
            Uniform callback=new Uniform(){
              @SuppressWarnings("unchecked") public void handle(              Request request,              Response response){
                if (response.getStatus().isError()) {
                  rCallback.onFailure(new ResourceException(response.getStatus()));
                }
 else {
                  if (actualType != null) {
                    Object result=null;
                    boolean serializationError=false;
                    try {
                      result=getClientResource().toObject(response.getEntity(),actualType);
                    }
 catch (                    Exception e) {
                      serializationError=true;
                      rCallback.onFailure(new ResourceException(e));
                    }
                    if (!serializationError) {
                      rCallback.onSuccess(result);
                    }
                  }
 else {
                    rCallback.onSuccess(null);
                  }
                }
              }
            }
;
            getClientResource().setOnResponse(callback);
          }
 else {
            requestEntity=getClientResource().toRepresentation(o);
          }
        }
      }
      Request request=getRequest(javaMethod,args);
      request.setMethod(annotationInfo.getRestletMethod());
      String query=annotationInfo.getQuery();
      if (query != null) {
        Form queryParams=new Form(annotationInfo.getQuery());
        request.getResourceRef().addQueryParameters(queryParams);
      }
      request.setEntity(requestEntity);
      if ((request.getClientInfo().getAcceptedCharacterSets().isEmpty()) && (request.getClientInfo().getAcceptedEncodings().isEmpty()) && (request.getClientInfo().getAcceptedLanguages().isEmpty())&& (request.getClientInfo().getAcceptedMediaTypes().isEmpty())) {
        List<Variant> responseVariants=annotationInfo.getResponseVariants(getClientResource().getMetadataService(),getClientResource().getConverterService());
        if (responseVariants != null) {
          request.setClientInfo(new ClientInfo(responseVariants));
        }
      }
      Response response=getClientResource().handleOutbound(request);
      if (getClientResource().getOnResponse() == null) {
        if ((response != null) && response.getStatus().isError()) {
          ThrowableAnnotationInfo tai=getAnnotationUtils().getThrowableAnnotationInfo(javaMethod,response.getStatus().getCode());
          if (tai != null) {
            Class<?> throwableClazz=tai.getJavaClass();
            Throwable t=null;
            if (tai.isSerializable() && response.isEntityAvailable()) {
              t=(Throwable)getClientResource().toObject(response.getEntity(),throwableClazz);
            }
 else {
              try {
                t=(Throwable)throwableClazz.newInstance();
              }
 catch (              Exception e) {
                Context.getCurrentLogger().log(Level.FINE,"Unable to instantiate the client-side exception using the default constructor.");
              }
              if (response.isEntityAvailable()) {
                StatusInfo si=getClientResource().toObject(response.getEntity(),StatusInfo.class);
                if (si != null) {
                  response.setStatus(new Status(si.getCode(),si.getReasonPhrase(),si.getDescription()));
                }
              }
            }
            if (t != null) {
              throw t;
            }
          }
          getClientResource().doError(response.getStatus());
        }
 else         if (!annotationInfo.getJavaOutputType().equals(void.class)) {
          result=getClientResource().toObject((response == null ? null : response.getEntity()),annotationInfo.getJavaOutputType());
        }
      }
    }
  }
  return result;
}
