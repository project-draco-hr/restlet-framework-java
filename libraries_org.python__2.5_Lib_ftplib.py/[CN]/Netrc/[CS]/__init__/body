def __init__(self, filename=None):
    if (filename is None):
        if ('HOME' in os.environ):
            filename = os.path.join(os.environ['HOME'], '.netrc')
        else:
            raise IOError, 'specify file to load or set $HOME'
    self.__hosts = {}
    self.__macros = {}
    fp = open(filename, 'r')
    in_macro = 0
    while 1:
        line = fp.readline()
        if (not line):
            break
        if (in_macro and line.strip()):
            macro_lines.append(line)
            continue
        elif in_macro:
            self.__macros[macro_name] = tuple(macro_lines)
            in_macro = 0
        words = line.split()
        host = user = passwd = acct = None
        default = 0
        i = 0
        while (i < len(words)):
            w1 = words[i]
            if ((i + 1) < len(words)):
                w2 = words[(i + 1)]
            else:
                w2 = None
            if (w1 == 'default'):
                default = 1
            elif ((w1 == 'machine') and w2):
                host = w2.lower()
                i = (i + 1)
            elif ((w1 == 'login') and w2):
                user = w2
                i = (i + 1)
            elif ((w1 == 'password') and w2):
                passwd = w2
                i = (i + 1)
            elif ((w1 == 'account') and w2):
                acct = w2
                i = (i + 1)
            elif ((w1 == 'macdef') and w2):
                macro_name = w2
                macro_lines = []
                in_macro = 1
                break
            i = (i + 1)
        if default:
            self.__defuser = (user or self.__defuser)
            self.__defpasswd = (passwd or self.__defpasswd)
            self.__defacct = (acct or self.__defacct)
        if host:
            if (host in self.__hosts):
                (ouser, opasswd, oacct) = self.__hosts[host]
                user = (user or ouser)
                passwd = (passwd or opasswd)
                acct = (acct or oacct)
            self.__hosts[host] = (user, passwd, acct)
    fp.close()
