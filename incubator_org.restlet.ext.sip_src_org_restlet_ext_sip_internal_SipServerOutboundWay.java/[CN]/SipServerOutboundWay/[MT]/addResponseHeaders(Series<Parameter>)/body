{
  SipRequest sipRequest=(SipRequest)getMessage().getRequest();
  SipResponse sipResponse=(SipResponse)getMessage();
  if (!sipResponse.getSipRecipientsInfo().isEmpty()) {
    for (    SipRecipientInfo recipient : sipResponse.getSipRecipientsInfo()) {
      headers.add(HeaderConstants.HEADER_VIA,SipRecipientInfoWriter.write(recipient));
    }
  }
  if (sipRequest.getCallId() != null) {
    headers.add(SipConstants.HEADER_CALL_ID,sipRequest.getCallId());
  }
  if (sipRequest.getCallSequence() != null) {
    headers.add(SipConstants.HEADER_CALL_SEQ,sipRequest.getCallSequence());
  }
  if (sipRequest.getFrom() != null) {
    headers.add(HeaderConstants.HEADER_FROM,AddressWriter.write(sipRequest.getFrom()));
  }
  if (sipRequest.getTo() != null) {
    headers.add(SipConstants.HEADER_TO,AddressWriter.write(sipRequest.getTo()));
  }
  if (sipResponse.getAlertInfo() != null) {
    headers.add(SipConstants.HEADER_ALERT_INFO,AddressWriter.write(sipResponse.getAlertInfo()));
  }
  if (!sipResponse.getAllowedEventTypes().isEmpty()) {
    headers.add(SipConstants.HEADER_ALLOW_EVENTS,EventTypeWriter.write(sipResponse.getAllowedEventTypes()));
  }
  if (!sipResponse.getCalleeInfo().isEmpty()) {
    headers.add(SipConstants.HEADER_CALL_INFO,AddressWriter.write(sipResponse.getCalleeInfo()));
  }
  if (!sipResponse.getContact().isEmpty()) {
    headers.add(SipConstants.HEADER_CONTACT,ContactInfoWriter.write(sipResponse.getContact()));
  }
  if (sipResponse.getErrorInfo() != null) {
    headers.add(SipConstants.HEADER_ERROR_INFO,AddressWriter.write(sipResponse.getErrorInfo()));
  }
  if (sipResponse.getEvent() != null) {
    headers.add(SipConstants.HEADER_EVENT,EventWriter.write(sipResponse.getEvent()));
  }
  if (sipResponse.getMimeVersion() != null) {
    headers.add(SipConstants.HEADER_MIME_VERSION,sipResponse.getMimeVersion());
  }
  if (sipResponse.getMinExpires() != null) {
    headers.add(SipConstants.HEADER_MIN_EXPIRES,sipResponse.getMinExpires());
  }
  if (sipResponse.getOrganization() != null) {
    headers.add(SipConstants.HEADER_ORGANIZATION,sipResponse.getOrganization());
  }
  if (!sipResponse.getRecordedRoutes().isEmpty()) {
    headers.add(SipConstants.HEADER_RECORD_ROUTE,AddressWriter.write(sipResponse.getRecordedRoutes()));
  }
  if (sipResponse.getReplyTo() != null) {
    headers.add(SipConstants.HEADER_REPLY_TO,AddressWriter.write(sipResponse.getReplyTo()));
  }
  if (sipResponse.getRetryAfter() != null) {
    headers.add(SipConstants.HEADER_RETRY_AFTER,DateWriter.write(sipResponse.getRetryAfter()));
  }
  if (sipResponse.getSipTag() != null) {
    headers.add(SipConstants.HEADER_SIP_ETAG,sipResponse.getSipTag().format());
  }
  if (!sipResponse.getSupported().isEmpty()) {
    headers.add(SipConstants.HEADER_SUPPORTED,OptionTagWriter.write(sipResponse.getSupported()));
  }
  if (!sipResponse.getUnsupported().isEmpty()) {
    headers.add(SipConstants.HEADER_UNSUPPORTED,OptionTagWriter.write(sipResponse.getUnsupported()));
  }
  super.addResponseHeaders(headers);
}
