{
  Graph result=this.links;
  if (result == null) {
    ClientInfo currentInfo=getClientInfo();
    ClientInfo newInfo=new ClientInfo();
    newInfo.getAcceptedMediaTypes().add(new Preference<MediaType>(MediaType.APPLICATION_RDF_XML));
    newInfo.getAcceptedMediaTypes().add(new Preference<MediaType>(MediaType.TEXT_RDF_N3));
    newInfo.getAcceptedMediaTypes().add(new Preference<MediaType>(MediaType.TEXT_RDF_NTRIPLES));
    newInfo.getAcceptedMediaTypes().add(new Preference<MediaType>(MediaType.APPLICATION_RDF_TURTLE));
    newInfo.getAcceptedMediaTypes().add(new Preference<MediaType>(MediaType.TEXT_XML,0.5F));
    newInfo.getAcceptedMediaTypes().add(new Preference<MediaType>(MediaType.TEXT_PLAIN,0.4F));
    newInfo.getAcceptedMediaTypes().add(new Preference<MediaType>(MediaType.APPLICATION_ALL_XML,0.3F));
    try {
      Representation rep=get();
      if (rep != null) {
        RdfRepresentation rdfRep=new RdfRepresentation(rep);
        this.links=rdfRep.getGraph();
        result=this.links;
      }
 else {
        getLogger().log(Level.WARNING,"Unable to retrieve an RDF representation of this resource: " + getReference());
      }
    }
 catch (    Throwable e) {
      getLogger().log(Level.WARNING,"Unable to retrieve an RDF representation of this resource: " + getReference(),e);
    }
    setClientInfo(currentInfo);
  }
  return result;
}
