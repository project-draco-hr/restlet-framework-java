def save_reduce(self, func, args, state=None, listitems=None, dictitems=None, obj=None):
    if (not isinstance(args, TupleType)):
        raise PicklingError('args from reduce() should be a tuple')
    if (not callable(func)):
        raise PicklingError('func from reduce should be callable')
    save = self.save
    write = self.write
    if ((self.proto >= 2) and (getattr(func, '__name__', '') == '__newobj__')):
        cls = args[0]
        if (not hasattr(cls, '__new__')):
            raise PicklingError('args[0] from __newobj__ args has no __new__')
        if ((obj is not None) and (cls is not obj.__class__)):
            raise PicklingError('args[0] from __newobj__ args has the wrong class')
        args = args[1:]
        save(cls)
        save(args)
        write(NEWOBJ)
    else:
        save(func)
        save(args)
        write(REDUCE)
    if (obj is not None):
        self.memoize(obj)
    if (listitems is not None):
        self._batch_appends(listitems)
    if (dictitems is not None):
        self._batch_setitems(dictitems)
    if (state is not None):
        save(state)
        write(BUILD)
