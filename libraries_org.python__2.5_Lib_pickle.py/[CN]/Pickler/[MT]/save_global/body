def save_global(self, obj, name=None, pack=struct.pack):
    write = self.write
    memo = self.memo
    if (name is None):
        name = obj.__name__
    module = getattr(obj, '__module__', None)
    if (module is None):
        module = whichmodule(obj, name)
    try:
        __import__(module)
        mod = sys.modules[module]
        klass = getattr(mod, name)
    except (ImportError, KeyError, AttributeError):
        raise PicklingError(("Can't pickle %r: it's not found as %s.%s" % (obj, module, name)))
    else:
        if (klass is not obj):
            raise PicklingError(("Can't pickle %r: it's not the same object as %s.%s" % (obj, module, name)))
    if (self.proto >= 2):
        code = _extension_registry.get((module, name))
        if code:
            assert (code > 0)
            if (code <= 255):
                write((EXT1 + chr(code)))
            elif (code <= 65535):
                write(('%c%c%c' % (EXT2, (code & 255), (code >> 8))))
            else:
                write((EXT4 + pack('<i', code)))
            return
    write(((((GLOBAL + module) + '\n') + name) + '\n'))
    self.memoize(obj)
