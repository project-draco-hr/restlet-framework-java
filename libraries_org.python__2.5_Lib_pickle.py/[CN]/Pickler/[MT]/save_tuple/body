def save_tuple(self, obj):
    write = self.write
    proto = self.proto
    n = len(obj)
    if (n == 0):
        if proto:
            write(EMPTY_TUPLE)
        else:
            write((MARK + TUPLE))
        return
    save = self.save
    memo = self.memo
    if ((n <= 3) and (proto >= 2)):
        for element in obj:
            save(element)
        if (id(obj) in memo):
            get = self.get(memo[id(obj)][0])
            write(((POP * n) + get))
        else:
            write(_tuplesize2code[n])
            self.memoize(obj)
        return
    write(MARK)
    for element in obj:
        save(element)
    if (id(obj) in memo):
        get = self.get(memo[id(obj)][0])
        if proto:
            write((POP_MARK + get))
        else:
            write(((POP * (n + 1)) + get))
        return
    self.write(TUPLE)
    self.memoize(obj)
