{
  Response result=null;
  ConnectedRequest request=null;
  String requestMethod=null;
  String requestUri=null;
  String version=null;
  Series<Parameter> headers=null;
  setInboundBusy(true);
  StringBuilder sb=new StringBuilder();
  int next=getInboundStream().read();
  while ((next != -1) && !HeaderUtils.isSpace(next)) {
    sb.append((char)next);
    next=getInboundStream().read();
  }
  if (next == -1) {
    throw new IOException("Unable to parse the request method. End of stream reached too early.");
  }
  requestMethod=sb.toString();
  sb.delete(0,sb.length());
  next=getInboundStream().read();
  while ((next != -1) && !HeaderUtils.isSpace(next)) {
    sb.append((char)next);
    next=getInboundStream().read();
  }
  if (next == -1) {
    throw new IOException("Unable to parse the request URI. End of stream reached too early.");
  }
  requestUri=sb.toString();
  if ((requestUri == null) || (requestUri.equals(""))) {
    requestUri="/";
  }
  sb.delete(0,sb.length());
  next=getInboundStream().read();
  while ((next != -1) && !HeaderUtils.isCarriageReturn(next)) {
    sb.append((char)next);
    next=getInboundStream().read();
  }
  if (next == -1) {
    throw new IOException("Unable to parse the protocol version. End of stream reached too early.");
  }
  next=getInboundStream().read();
  if (HeaderUtils.isLineFeed(next)) {
    version=sb.toString();
    sb.delete(0,sb.length());
    Parameter header=HeaderUtils.readHeader(getInboundStream(),sb);
    while (header != null) {
      if (headers == null) {
        headers=new Form();
      }
      headers.add(header);
      header=HeaderUtils.readHeader(getInboundStream(),sb);
    }
  }
 else {
    throw new IOException("Unable to parse the protocol version. The carriage return must be followed by a line feed.");
  }
  if (HeaderUtils.isConnectionClose(headers)) {
    setState(ConnectionState.CLOSING);
  }
  request=createRequest(getHelper().getContext(),this,requestMethod,requestUri,version,headers,createInboundEntity(headers),false,null);
  result=getHelper().createResponse(request);
  if (request != null) {
    if (request.isExpectingResponse()) {
      getInboundMessages().add(result);
    }
    getHelper().getInboundMessages().add(result);
  }
  return result;
}
