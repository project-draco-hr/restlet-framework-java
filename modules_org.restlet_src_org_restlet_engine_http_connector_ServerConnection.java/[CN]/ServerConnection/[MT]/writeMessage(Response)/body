{
  Series<Parameter> headers=new Form();
  ConnectedRequest request=(ConnectedRequest)response.getRequest();
  try {
    if ((request.getMethod() != null) && request.getMethod().equals(Method.HEAD)) {
      addEntityHeaders(response.getEntity(),headers);
      response.setEntity(null);
    }
 else     if (Method.GET.equals(request.getMethod()) && Status.SUCCESS_OK.equals(response.getStatus()) && (!response.isEntityAvailable())) {
      addEntityHeaders(response.getEntity(),headers);
      getLogger().warning("A response with a 200 (Ok) status should have an entity. Make sure that resource \"" + request.getResourceRef() + "\" returns one or sets the status to 204 (No content).");
    }
 else     if (response.getStatus().equals(Status.SUCCESS_NO_CONTENT)) {
      addEntityHeaders(response.getEntity(),headers);
      if (response.isEntityAvailable()) {
        getLogger().fine("Responses with a 204 (No content) status generally don't have an entity. Only adding entity headers for resource \"" + request.getResourceRef() + "\".");
        response.setEntity(null);
      }
    }
 else     if (response.getStatus().equals(Status.SUCCESS_RESET_CONTENT)) {
      if (response.isEntityAvailable()) {
        getLogger().warning("Responses with a 205 (Reset content) status can't have an entity. Ignoring the entity for resource \"" + request.getResourceRef() + "\".");
        response.setEntity(null);
      }
    }
 else     if (response.getStatus().equals(Status.REDIRECTION_NOT_MODIFIED)) {
      addEntityHeaders(response.getEntity(),headers);
      if (response.isEntityAvailable()) {
        getLogger().warning("Responses with a 304 (Not modified) status can't have an entity. Only adding entity headers for resource \"" + request.getResourceRef() + "\".");
        response.setEntity(null);
      }
    }
 else     if (response.getStatus().isInformational()) {
      if (response.isEntityAvailable()) {
        getLogger().warning("Responses with an informational (1xx) status can't have an entity. Ignoring the entity for resource \"" + request.getResourceRef() + "\".");
        response.setEntity(null);
      }
    }
 else {
      addEntityHeaders(response.getEntity(),headers);
      if ((response.getEntity() != null) && !response.getEntity().isAvailable()) {
        getLogger().warning("A response with an unavailable entity was returned. Ignoring the entity for resource \"" + request.getResourceRef() + "\".");
        response.setEntity(null);
      }
    }
    try {
      addTransportHeaders(headers,response.getEntity());
      addResponseHeaders(response,headers);
      Series<Parameter> additionalHeaders=(Series<Parameter>)response.getAttributes().get(HeaderConstants.ATTRIBUTE_HEADERS);
      addAdditionalHeaders(headers,additionalHeaders);
    }
 catch (    Exception e) {
      getLogger().log(Level.INFO,"Exception intercepted while adding the response headers",e);
      response.setStatus(Status.SERVER_ERROR_INTERNAL);
    }
    writeMessage(response,headers);
    if (!response.getStatus().isInformational() && (request.getEntity() != null)) {
      try {
        request.getEntity().exhaust();
      }
 catch (      IOException e) {
        getLogger().log(Level.FINE,"Unable to exhaust request entity",e);
      }
 finally {
        request.getEntity().release();
      }
    }
  }
 catch (  Exception e) {
    getLogger().log(Level.INFO,"An exception occured writing the response entity",e);
    response.setStatus(Status.SERVER_ERROR_INTERNAL,"An exception occured writing the response entity");
    response.setEntity(null);
    try {
      writeMessage(response,headers);
    }
 catch (    IOException ioe) {
      getLogger().log(Level.WARNING,"Unable to send error response",ioe);
    }
  }
 finally {
    if (response.getOnSent() != null) {
      response.getOnSent().handle(request,response);
    }
    getOutboundMessages().poll();
    setOutboundBusy(false);
  }
}
