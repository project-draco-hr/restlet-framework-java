{
  if (response != null) {
    Series<Parameter> headers=new Form();
    try {
      if ((response.getRequest().getMethod() != null) && response.getRequest().getMethod().equals(Method.HEAD)) {
        writeEntityHeaders(response,headers);
        response.setEntity(null);
      }
 else       if (Method.GET.equals(response.getRequest().getMethod()) && Status.SUCCESS_OK.equals(response.getStatus()) && (!response.isEntityAvailable())) {
        writeEntityHeaders(response,headers);
        getLogger().warning("A response with a 200 (Ok) status should have an entity. Make sure that resource \"" + response.getRequest().getResourceRef() + "\" returns one or sets the status to 204 (No content).");
      }
 else       if (response.getStatus().equals(Status.SUCCESS_NO_CONTENT)) {
        writeEntityHeaders(response,headers);
        if (response.isEntityAvailable()) {
          getLogger().fine("Responses with a 204 (No content) status generally don't have an entity. Only adding entity headers for resource \"" + response.getRequest().getResourceRef() + "\".");
          response.setEntity(null);
        }
      }
 else       if (response.getStatus().equals(Status.SUCCESS_RESET_CONTENT)) {
        if (response.isEntityAvailable()) {
          getLogger().warning("Responses with a 205 (Reset content) status can't have an entity. Ignoring the entity for resource \"" + response.getRequest().getResourceRef() + "\".");
          response.setEntity(null);
        }
      }
 else       if (response.getStatus().equals(Status.REDIRECTION_NOT_MODIFIED)) {
        writeEntityHeaders(response,headers);
        if (response.isEntityAvailable()) {
          getLogger().warning("Responses with a 304 (Not modified) status can't have an entity. Only adding entity headers for resource \"" + response.getRequest().getResourceRef() + "\".");
          response.setEntity(null);
        }
      }
 else       if (response.getStatus().isInformational()) {
        if (response.isEntityAvailable()) {
          getLogger().warning("Responses with an informational (1xx) status can't have an entity. Ignoring the entity for resource \"" + response.getRequest().getResourceRef() + "\".");
          response.setEntity(null);
        }
      }
 else {
        writeEntityHeaders(response,headers);
        if ((response.getEntity() != null) && !response.getEntity().isAvailable()) {
          getLogger().warning("A response with an unavailable entity was returned. Ignoring the entity for resource \"" + response.getRequest().getResourceRef() + "\".");
          response.setEntity(null);
        }
      }
      try {
        addResponseHeaders(response,headers);
        Series<Parameter> additionalHeaders=(Series<Parameter>)response.getAttributes().get(HeaderConstants.ATTRIBUTE_HEADERS);
        addAdditionalHeaders(headers,additionalHeaders);
        headers.add(HeaderConstants.HEADER_SERVER,response.getServerInfo().getAgent());
      }
 catch (      Exception e) {
        getLogger().log(Level.INFO,"Exception intercepted while adding the response headers",e);
        response.setStatus(Status.SERVER_ERROR_INTERNAL);
      }
      writeResponse(response,headers);
    }
 catch (    Exception e) {
      getLogger().log(Level.INFO,"An exception occured writing the response entity",e);
      response.setStatus(Status.SERVER_ERROR_INTERNAL,"An exception occured writing the response entity");
      response.setEntity(null);
      try {
        writeResponse(response,headers);
      }
 catch (      IOException ioe) {
        getLogger().log(Level.WARNING,"Unable to send error response",ioe);
      }
    }
 finally {
      if (response.getOnSent() != null) {
        response.getOnSent().handle(response.getRequest(),response);
      }
    }
  }
}
