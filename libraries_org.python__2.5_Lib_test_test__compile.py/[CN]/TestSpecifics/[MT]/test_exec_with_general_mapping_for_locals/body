def test_exec_with_general_mapping_for_locals(self):


    class M:
        'Test mapping interface versus possible calls from eval().'

        def __getitem__(self, key):
            if (key == 'a'):
                return 12
            raise KeyError

        def __setitem__(self, key, value):
            self.results = (key, value)

        def keys(self):
            return list('xyz')
    m = M()
    g = globals()
    exec 'z = a' in g, m
    self.assertEqual(m.results, ('z', 12))
    try:
        exec 'z = b' in g, m
    except NameError:
        pass
    else:
        self.fail('Did not detect a KeyError')
    exec 'z = dir()' in g, m
    self.assertEqual(m.results, ('z', list('xyz')))
    exec 'z = globals()' in g, m
    self.assertEqual(m.results, ('z', g))
    exec 'z = locals()' in g, m
    self.assertEqual(m.results, ('z', m))
    try:
        exec 'z = b' in m
    except TypeError:
        pass
    except NameError:
        pass
    else:
        self.fail('Did not validate globals as a real dict')


    class A:
        'Non-mapping'
        pass
    m = A()
    try:
        exec 'z = a' in g, m
    except TypeError:
        pass
    except AttributeError:
        pass
    else:
        self.fail('Did not validate locals as a mapping')


    class D(dict):

        def __getitem__(self, key):
            if (key == 'a'):
                return 12
            return dict.__getitem__(self, key)
    d = D()
    exec 'z = a' in g, d
    self.assertEqual(d['z'], 12)
