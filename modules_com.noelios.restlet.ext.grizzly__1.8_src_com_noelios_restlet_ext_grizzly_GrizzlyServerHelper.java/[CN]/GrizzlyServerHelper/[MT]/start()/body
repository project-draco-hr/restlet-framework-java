{
  super.start();
  if (this.controller == null) {
    this.controller=new Controller();
    TCPSelectorHandler selectorHandler=new TCPSelectorHandler();
    this.controller.getSelectorHandlers().add(selectorHandler);
    configure(this.controller);
  }
  getLogger().info("Starting the Grizzly " + getProtocols() + " server");
  final CountDownLatch latch=new CountDownLatch(1);
  final Controller controller=this.controller;
  new Thread(){
    @Override public void run(){
      try {
        controller.addStateListener(new ControllerStateListener(){
          public void onException(          Throwable arg0){
            latch.countDown();
          }
          public void onReady(){
            if (getHelped().getPort() == 0) {
              final TCPSelectorHandler tsh=(TCPSelectorHandler)controller.getSelectorHandler(Controller.Protocol.TCP);
              setEphemeralPort(tsh.getPortLowLevel());
            }
            latch.countDown();
          }
          public void onStarted(){
          }
          public void onStopped(){
          }
        }
);
        controller.start();
      }
 catch (      final IOException e) {
        getLogger().log(Level.WARNING,"Error while starting the Grizzly controller",e);
      }
    }
  }
.start();
  try {
    latch.await();
  }
 catch (  final InterruptedException ex) {
    getLogger().log(Level.WARNING,"Interrupted while waiting for starting latch. Stopping...",ex);
    stop();
  }
}
