def randrange(self, start, stop=None, step=1, int=int, default=None):
    "Choose a random item from range(start, stop[, step]).\n\n        This fixes the problem with randint() which includes the\n        endpoint; in Python this is usually not what you want.\n        Do not supply the 'int' and 'default' arguments.\n        "
    istart = int(start)
    if (istart != start):
        raise ValueError, 'non-integer arg 1 for randrange()'
    if (stop is default):
        if (istart > 0):
            return int((self.random() * istart))
        raise ValueError, 'empty range for randrange()'
    istop = int(stop)
    if (istop != stop):
        raise ValueError, 'non-integer stop for randrange()'
    if ((step == 1) and (istart < istop)):
        try:
            return (istart + int((self.random() * (istop - istart))))
        except OverflowError:
            return int((istart + _floor((self.random() * (istop - istart)))))
    if (step == 1):
        raise ValueError, 'empty range for randrange()'
    istep = int(step)
    if (istep != step):
        raise ValueError, 'non-integer step for randrange()'
    if (istep > 0):
        n = ((((istop - istart) + istep) - 1) / istep)
    elif (istep < 0):
        n = ((((istop - istart) + istep) + 1) / istep)
    else:
        raise ValueError, 'zero step for randrange()'
    if (n <= 0):
        raise ValueError, 'empty range for randrange()'
    return (istart + (istep * int((self.random() * n))))
