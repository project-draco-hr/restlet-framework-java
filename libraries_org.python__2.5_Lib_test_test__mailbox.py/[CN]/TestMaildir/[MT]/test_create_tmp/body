def test_create_tmp(self, repetitions=10):
    hostname = socket.gethostname()
    if ('/' in hostname):
        hostname = hostname.replace('/', '\\057')
    if (':' in hostname):
        hostname = hostname.replace(':', '\\072')
    pid = os.getpid()
    pattern = re.compile('(?P<time>\\d+)\\.M(?P<M>\\d{1,6})P(?P<P>\\d+)Q(?P<Q>\\d+)\\.(?P<host>[^:/]+)')
    previous_groups = None
    for x in xrange(repetitions):
        tmp_file = self._box._create_tmp()
        (head, tail) = os.path.split(tmp_file.name)
        self.assertEqual(head, os.path.abspath(os.path.join(self._path, 'tmp')), ("File in wrong location: '%s'" % head))
        match = pattern.match(tail)
        self.assert_((match != None), ("Invalid file name: '%s'" % tail))
        groups = match.groups()
        if (previous_groups != None):
            self.assert_(int((groups[0] >= previous_groups[0])), ("Non-monotonic seconds: '%s' before '%s'" % (previous_groups[0], groups[0])))
            self.assert_((int((groups[1] >= previous_groups[1])) or (groups[0] != groups[1])), ("Non-monotonic milliseconds: '%s' before '%s'" % (previous_groups[1], groups[1])))
            self.assert_((int(groups[2]) == pid), ("Process ID mismatch: '%s' should be '%s'" % (groups[2], pid)))
            self.assert_((int(groups[3]) == (int(previous_groups[3]) + 1)), ("Non-sequential counter: '%s' before '%s'" % (previous_groups[3], groups[3])))
            self.assert_((groups[4] == hostname), ("Host name mismatch: '%s' should be '%s'" % (groups[4], hostname)))
        previous_groups = groups
        tmp_file.write(_sample_message)
        tmp_file.seek(0)
        self.assert_((tmp_file.read() == _sample_message))
        tmp_file.close()
    file_count = len(os.listdir(os.path.join(self._path, 'tmp')))
    self.assert_((file_count == repetitions), ("Wrong file count: '%s' should be '%s'" % (file_count, repetitions)))
