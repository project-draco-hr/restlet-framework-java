{
  if (State.ASSOCIATION == getState()) {
    if (uri.equalsIgnoreCase(Feed.ATOM_NAMESPACE)) {
      if (localName.equals("feed")) {
        Feed feed=new Feed();
        String attr=attrs.getValue("xml:base");
        if (attr != null) {
          feed.setBaseReference(new Reference(attr));
        }
        if (association.isToMany())         this.inlineFeedHandler.startFeed(feed);
 else         this.inlineEntryHandler.startFeed(feed);
      }
 else       if (localName.equals("link")) {
        Link link=new Link();
        link.setHref(new Reference(attrs.getValue("","href")));
        link.setRel(Relation.valueOf(attrs.getValue("","rel")));
        String type=attrs.getValue("","type");
        if (type != null && type.length() > 0) {
          link.setType(new MediaType(type));
        }
        link.setHrefLang(new Language(attrs.getValue("","hreflang")));
        link.setTitle(attrs.getValue("","title"));
        String attr=attrs.getValue("","length");
        link.setLength((attr == null) ? -1L : Long.parseLong(attr));
        if (association.isToMany()) {
          inlineFeedHandler.startLink(link);
        }
 else {
          inlineEntryHandler.startLink(link);
        }
      }
 else       if (localName.equalsIgnoreCase("entry")) {
        Entry entry=new Entry();
        if (association.isToMany()) {
          inlineFeedHandler.startEntry(entry);
        }
 else {
          inlineEntryHandler.startEntry(entry);
        }
        inlineEntry=entry;
      }
 else       if (localName.equalsIgnoreCase("content")) {
        Content content=new Content();
        MediaType type=getMediaType(attrs.getValue("","type"));
        String srcAttr=attrs.getValue("","src");
        if (srcAttr != null)         content.setExternalRef(new Reference(srcAttr));
        content.setExternalType(type);
        if (association.isToMany()) {
          inlineFeedHandler.startContent(content);
        }
 else {
          inlineEntryHandler.startContent(content);
        }
      }
    }
    if (association.isToMany()) {
      inlineFeedHandler.startElement(uri,localName,qName,attrs);
    }
 else {
      inlineEntryHandler.startElement(uri,localName,qName,attrs);
    }
  }
 else   if (Service.WCF_DATASERVICES_METADATA_NAMESPACE.equals(uri) && "properties".equals(localName)) {
    pushState(State.PROPERTIES);
    propertyPath=new ArrayList<String>();
  }
 else   if (State.PROPERTIES == getState()) {
    pushState(State.PROPERTY);
    if (Boolean.parseBoolean(attrs.getValue(Service.WCF_DATASERVICES_METADATA_NAMESPACE,"null"))) {
      parsePropertyNull=true;
    }
 else {
      sb=new StringBuilder();
      propertyPath.add(localName);
    }
  }
 else   if (State.PROPERTY == getState()) {
    sb=new StringBuilder();
    propertyPath.add(localName);
  }
 else   if (State.ENTRY == getState()) {
    if (localName.equalsIgnoreCase("link") && association != null) {
      pushState(State.ASSOCIATION);
    }
 else {
      eltPath.add(localName);
      StringBuilder sb=new StringBuilder();
      for (int i=0; i < eltPath.size(); i++) {
        if (i > 0) {
          sb.append("/");
        }
        sb.append(eltPath.get(i));
      }
      String str=sb.toString();
      for (      Mapping m : metadata.getMappings()) {
        if (entityType != null && entityType.equals(m.getType()) && m.getNsUri() != null && m.getNsUri().equals(uri) && str.equals(m.getValueNodePath())) {
          if (m.isAttributeValue()) {
            String value=attrs.getValue(m.getValueAttributeName());
            if (value != null) {
              try {
                ReflectUtils.invokeSetter(entity,m.getPropertyPath(),value);
              }
 catch (              Exception e) {
                getLogger().warning("Cannot set " + m.getPropertyPath() + " property on "+ entity+ " with value "+ value);
              }
            }
          }
 else {
            this.sb=new StringBuilder();
            mapping=m;
          }
          break;
        }
      }
    }
  }
 else   if (getState() == null && "entry".equals(localName) && "http://www.w3.org/2005/Atom".equals(uri)) {
    pushState(State.ENTRY);
  }
}
