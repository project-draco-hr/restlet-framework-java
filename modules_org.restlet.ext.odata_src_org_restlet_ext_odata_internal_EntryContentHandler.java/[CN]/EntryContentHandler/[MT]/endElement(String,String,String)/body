{
  if (State.ASSOCIATION == getState()) {
    if (uri.equalsIgnoreCase(Feed.ATOM_NAMESPACE)) {
      if (localName.equals("feed")) {
        if (association.isToMany())         inlineFeedHandler.endFeed(inlineFeed);
      }
 else       if (localName.equals("link")) {
        if (association.isToMany()) {
          inlineFeedHandler.closeLink();
        }
 else {
          inlineEntryHandler.closeLink();
        }
        return;
      }
 else       if (localName.equalsIgnoreCase("entry")) {
        if (association.isToMany()) {
          inlineFeedHandler.endEntry(inlineEntry);
        }
 else {
          inlineEntryHandler.closeEntry(inlineEntry);
        }
      }
 else       if (localName.equalsIgnoreCase("content")) {
        if (association.isToMany()) {
          inlineFeedHandler.endContent(inlineContent);
        }
 else {
          inlineEntryHandler.endContent(inlineContent);
        }
      }
    }
    if (association.isToMany()) {
      inlineFeedHandler.endElement(uri,localName,qName);
    }
 else {
      inlineEntryHandler.endElement(uri,localName,qName);
    }
  }
 else   if (State.PROPERTY == getState()) {
    if (parsePropertyNull) {
      popState();
      parsePropertyNull=false;
    }
 else {
      Object obj=entity;
      if (propertyPath.size() > 1) {
        for (int i=0; i < propertyPath.size() - 1; i++) {
          try {
            Object o=ReflectUtils.invokeGetter(obj,propertyPath.get(i));
            if (o == null) {
              Field[] fields=obj.getClass().getDeclaredFields();
              for (              Field field : fields) {
                if (field.getName().equalsIgnoreCase(propertyPath.get(i))) {
                  o=field.getType().newInstance();
                  break;
                }
              }
            }
            ReflectUtils.invokeSetter(obj,propertyPath.get(i),o);
            obj=o;
          }
 catch (          Exception e) {
            obj=null;
          }
        }
      }
      Property property=metadata.getProperty(obj,localName);
      if (property != null) {
        try {
          ReflectUtils.setProperty(obj,property,sb.toString());
        }
 catch (        Exception e) {
          getLogger().warning("Cannot set " + localName + " property on "+ obj+ " with value "+ sb.toString());
        }
      }
      if (!propertyPath.isEmpty()) {
        propertyPath.remove(propertyPath.size() - 1);
      }
      if (propertyPath.isEmpty()) {
        popState();
      }
    }
  }
 else   if (State.PROPERTIES == getState()) {
    popState();
  }
 else   if (State.CONTENT == getState()) {
    popState();
  }
 else   if (mapping != null) {
    if (sb != null) {
      try {
        ReflectUtils.invokeSetter(entity,mapping.getPropertyPath(),sb.toString());
      }
 catch (      Exception e) {
        getLogger().warning("Cannot set the mapped property " + mapping.getPropertyPath() + " on "+ entity+ " with value "+ sb.toString());
      }
    }
    mapping=null;
  }
 else   if (State.ENTRY == getState()) {
    if (!eltPath.isEmpty()) {
      eltPath.remove(eltPath.size() - 1);
    }
  }
}
