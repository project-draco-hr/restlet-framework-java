{
  final ClientInfo result=super.getClientInfo();
  if (!this.clientAdded) {
    String acceptMediaType=getHttpCall().getRequestHeaders().getValues(HeaderConstants.HEADER_ACCEPT);
    String acceptCharset=getHttpCall().getRequestHeaders().getValues(HeaderConstants.HEADER_ACCEPT_CHARSET);
    String acceptEncoding=getHttpCall().getRequestHeaders().getValues(HeaderConstants.HEADER_ACCEPT_ENCODING);
    String acceptLanguage=getHttpCall().getRequestHeaders().getValues(HeaderConstants.HEADER_ACCEPT_LANGUAGE);
    String expect=getHttpCall().getRequestHeaders().getValues(HeaderConstants.HEADER_EXPECT);
    try {
      PreferenceReader.addCharacterSets(acceptCharset,result);
    }
 catch (    Exception e) {
      this.context.getLogger().log(Level.INFO,e.getMessage());
    }
    try {
      PreferenceReader.addEncodings(acceptEncoding,result);
    }
 catch (    Exception e) {
      this.context.getLogger().log(Level.INFO,e.getMessage());
    }
    try {
      PreferenceReader.addLanguages(acceptLanguage,result);
    }
 catch (    Exception e) {
      this.context.getLogger().log(Level.INFO,e.getMessage());
    }
    try {
      PreferenceReader.addMediaTypes(acceptMediaType,result);
    }
 catch (    Exception e) {
      this.context.getLogger().log(Level.INFO,e.getMessage());
    }
    try {
      ExpectationReader.addValues(expect,result);
    }
 catch (    Exception e) {
      this.context.getLogger().log(Level.INFO,e.getMessage());
    }
    result.setAgent(getHttpCall().getRequestHeaders().getValues(HeaderConstants.HEADER_USER_AGENT));
    result.setFrom(getHttpCall().getRequestHeaders().getFirstValue(HeaderConstants.HEADER_FROM));
    result.setAddress(getHttpCall().getClientAddress());
    result.setPort(getHttpCall().getClientPort());
    if (getHttpCall().getUserPrincipal() != null) {
      result.getPrincipals().add(getHttpCall().getUserPrincipal());
    }
    if (this.context != null) {
      final boolean useForwardedForHeader=Boolean.parseBoolean(this.context.getParameters().getFirstValue("useForwardedForHeader",false));
      if (useForwardedForHeader) {
        final String header=getHttpCall().getRequestHeaders().getValues(HeaderConstants.HEADER_X_FORWARDED_FOR);
        if (header != null) {
          final String[] addresses=header.split(",");
          for (int i=0; i < addresses.length; i++) {
            String address=addresses[i].trim();
            result.getForwardedAddresses().add(address);
          }
        }
      }
    }
    this.clientAdded=true;
  }
  return result;
}
