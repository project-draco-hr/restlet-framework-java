{
  Object result=null;
  if (targetClass.isAssignableFrom(representation.getClass())) {
    result=(T)representation;
  }
 else {
    if (String.class.isAssignableFrom(targetClass)) {
      result=representation.getText();
    }
 else     if (StringRepresentation.class.isAssignableFrom(targetClass)) {
      result=new StringRepresentation(representation.getText(),representation.getMediaType());
    }
 else     if (Document.class.isAssignableFrom(targetClass)) {
      result=new DomRepresentation(representation).getDocument();
    }
 else     if (DomRepresentation.class.isAssignableFrom(targetClass)) {
      result=new DomRepresentation(representation);
    }
 else     if (File.class.isAssignableFrom(targetClass)) {
      if (representation instanceof FileRepresentation) {
        result=((FileRepresentation)representation).getFile();
      }
    }
 else     if (InputStream.class.isAssignableFrom(targetClass)) {
      result=representation.getStream();
    }
 else     if (InputRepresentation.class.isAssignableFrom(targetClass)) {
      result=new InputRepresentation(representation.getStream());
    }
 else     if (Reader.class.isAssignableFrom(targetClass)) {
      result=representation.getReader();
    }
 else     if (ReaderRepresentation.class.isAssignableFrom(targetClass)) {
      result=new ReaderRepresentation(representation.getReader());
    }
 else     if (SaxRepresentation.class.isAssignableFrom(targetClass)) {
      result=new SaxRepresentation(representation);
    }
  }
  if (result instanceof Representation) {
    Representation resultRepresentation=(Representation)result;
    resultRepresentation.setCharacterSet(representation.getCharacterSet());
    resultRepresentation.setMediaType(representation.getMediaType());
    resultRepresentation.setEncodings(representation.getEncodings());
    resultRepresentation.setLanguages(representation.getLanguages());
  }
  return (T)result;
}
