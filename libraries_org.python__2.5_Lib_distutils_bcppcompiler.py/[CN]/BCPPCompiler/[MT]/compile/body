def compile(self, sources, output_dir=None, macros=None, include_dirs=None, debug=0, extra_preargs=None, extra_postargs=None, depends=None):
    (macros, objects, extra_postargs, pp_opts, build) = self._setup_compile(output_dir, macros, include_dirs, sources, depends, extra_postargs)
    compile_opts = (extra_preargs or [])
    compile_opts.append('-c')
    if debug:
        compile_opts.extend(self.compile_options_debug)
    else:
        compile_opts.extend(self.compile_options)
    for obj in objects:
        try:
            (src, ext) = build[obj]
        except KeyError:
            continue
        src = os.path.normpath(src)
        obj = os.path.normpath(obj)
        self.mkpath(os.path.dirname(obj))
        if (ext == '.res'):
            continue
        if (ext == '.rc'):
            try:
                self.spawn(['brcc32', '-fo', obj, src])
            except DistutilsExecError as msg:
                raise CompileError, msg
            continue
        if (ext in self._c_extensions):
            input_opt = ''
        elif (ext in self._cpp_extensions):
            input_opt = '-P'
        else:
            input_opt = ''
        output_opt = ('-o' + obj)
        try:
            self.spawn(((((([self.cc] + compile_opts) + pp_opts) + [input_opt, output_opt]) + extra_postargs) + [src]))
        except DistutilsExecError as msg:
            raise CompileError, msg
    return objects
