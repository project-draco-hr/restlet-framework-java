{
  if (actualUriBuilder instanceof JaxRsUriBuilder) {
    final JaxRsUriBuilder jaxRsUriBuilder=(JaxRsUriBuilder)actualUriBuilder;
    assertEquals(expectedScheme,getScheme(jaxRsUriBuilder));
    assertEquals(expectedUserInfo,getUserInfo(jaxRsUriBuilder));
    assertEquals(expectedHost,getHost(jaxRsUriBuilder));
    assertEquals(expectedPort,getPort(jaxRsUriBuilder));
    final String actPath=getPath(jaxRsUriBuilder);
    try {
      assertEquals(expectedPath,actPath);
    }
 catch (    junit.framework.ComparisonFailure cf) {
      if (expectedPath == null)       assertEquals("",actPath);
    }
    CharSequence actualQuery=getQuery(jaxRsUriBuilder);
    if (actualQuery != null) {
      actualQuery=actualQuery.toString();
    }
    assertEquals(expectedQuery,actualQuery);
  }
  if (compareResult) {
    final JaxRsUriBuilder expectedUriBuilder=(JaxRsUriBuilder)RuntimeDelegate.getInstance().createUriBuilder();
    if (expectedScheme != null) {
      expectedUriBuilder.scheme(expectedScheme);
    }
    if (expectedUserInfo != null) {
      expectedUriBuilder.userInfo(expectedUserInfo);
    }
    if (expectedHost != null) {
      expectedUriBuilder.host(expectedHost);
    }
    expectedUriBuilder.port(expectedPort);
    expectedUriBuilder.path(expectedPath);
    if (expectedQuery != null) {
      expectedUriBuilder.replaceQuery(expectedQuery);
    }
    String expectedURI=expectedUriBuilder.build().toString();
    String atualURI=actualUriBuilder.build().toString();
    assertEquals(expectedURI,atualURI);
  }
}
