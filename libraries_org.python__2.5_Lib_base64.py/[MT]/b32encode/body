def b32encode(s):
    'Encode a string using Base32.\n\n    s is the string to encode.  The encoded string is returned.\n    '
    parts = []
    (quanta, leftover) = divmod(len(s), 5)
    if leftover:
        s += ('\x00' * (5 - leftover))
        quanta += 1
    for i in range(quanta):
        (c1, c2, c3) = struct.unpack('!HHB', s[(i * 5):((i + 1) * 5)])
        c2 += ((c1 & 1) << 16)
        c3 += ((c2 & 3) << 8)
        parts.extend([_b32tab[(c1 >> 11)], _b32tab[((c1 >> 6) & 31)], _b32tab[((c1 >> 1) & 31)], _b32tab[(c2 >> 12)], _b32tab[((c2 >> 7) & 31)], _b32tab[((c2 >> 2) & 31)], _b32tab[(c3 >> 5)], _b32tab[(c3 & 31)]])
    encoded = EMPTYSTRING.join(parts)
    if (leftover == 1):
        return (encoded[:(-6)] + '======')
    elif (leftover == 2):
        return (encoded[:(-4)] + '====')
    elif (leftover == 3):
        return (encoded[:(-3)] + '===')
    elif (leftover == 4):
        return (encoded[:(-1)] + '=')
    return encoded
