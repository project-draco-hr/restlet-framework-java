def make_table(self, fromlines, tolines, fromdesc='', todesc='', context=False, numlines=5):
    'Returns HTML table of side by side comparison with change highlights\n\n        Arguments:\n        fromlines -- list of "from" lines\n        tolines -- list of "to" lines\n        fromdesc -- "from" file column header string\n        todesc -- "to" file column header string\n        context -- set to True for contextual differences (defaults to False\n            which shows full differences).\n        numlines -- number of context lines.  When context is set True,\n            controls number of lines displayed before and after the change.\n            When context is False, controls the number of lines to place\n            the "next" link anchors before the next change (so click of\n            "next" link jumps to just before the change).\n        '
    self._make_prefix()
    (fromlines, tolines) = self._tab_newline_replace(fromlines, tolines)
    if context:
        context_lines = numlines
    else:
        context_lines = None
    diffs = _mdiff(fromlines, tolines, context_lines, linejunk=self._linejunk, charjunk=self._charjunk)
    if self._wrapcolumn:
        diffs = self._line_wrapper(diffs)
    (fromlist, tolist, flaglist) = self._collect_lines(diffs)
    (fromlist, tolist, flaglist, next_href, next_id) = self._convert_flags(fromlist, tolist, flaglist, context, numlines)
    s = []
    fmt = ('            <tr><td class="diff_next"%s>%s</td>%s' + '<td class="diff_next">%s</td>%s</tr>\n')
    for i in range(len(flaglist)):
        if (flaglist[i] is None):
            if (i > 0):
                s.append('        </tbody>        \n        <tbody>\n')
        else:
            s.append((fmt % (next_id[i], next_href[i], fromlist[i], next_href[i], tolist[i])))
    if (fromdesc or todesc):
        header_row = ('<thead><tr>%s%s%s%s</tr></thead>' % ('<th class="diff_next"><br /></th>', ('<th colspan="2" class="diff_header">%s</th>' % fromdesc), '<th class="diff_next"><br /></th>', ('<th colspan="2" class="diff_header">%s</th>' % todesc)))
    else:
        header_row = ''
    table = (self._table_template % dict(data_rows=''.join(s), header_row=header_row, prefix=self._prefix[1]))
    return table.replace('\x00+', '<span class="diff_add">').replace('\x00-', '<span class="diff_sub">').replace('\x00^', '<span class="diff_chg">').replace('\x01', '</span>').replace('\t', '&nbsp;')
