def get_opcodes(self):
    'Return list of 5-tuples describing how to turn a into b.\n\n        Each tuple is of the form (tag, i1, i2, j1, j2).  The first tuple\n        has i1 == j1 == 0, and remaining tuples have i1 == the i2 from the\n        tuple preceding it, and likewise for j1 == the previous j2.\n\n        The tags are strings, with these meanings:\n\n        \'replace\':  a[i1:i2] should be replaced by b[j1:j2]\n        \'delete\':   a[i1:i2] should be deleted.\n                    Note that j1==j2 in this case.\n        \'insert\':   b[j1:j2] should be inserted at a[i1:i1].\n                    Note that i1==i2 in this case.\n        \'equal\':    a[i1:i2] == b[j1:j2]\n\n        >>> a = "qabxcd"\n        >>> b = "abycdf"\n        >>> s = SequenceMatcher(None, a, b)\n        >>> for tag, i1, i2, j1, j2 in s.get_opcodes():\n        ...    print ("%7s a[%d:%d] (%s) b[%d:%d] (%s)" %\n        ...           (tag, i1, i2, a[i1:i2], j1, j2, b[j1:j2]))\n         delete a[0:1] (q) b[0:0] ()\n          equal a[1:3] (ab) b[0:2] (ab)\n        replace a[3:4] (x) b[2:3] (y)\n          equal a[4:6] (cd) b[3:5] (cd)\n         insert a[6:6] () b[5:6] (f)\n        '
    if (self.opcodes is not None):
        return self.opcodes
    i = j = 0
    self.opcodes = answer = []
    for (ai, bj, size) in self.get_matching_blocks():
        tag = ''
        if ((i < ai) and (j < bj)):
            tag = 'replace'
        elif (i < ai):
            tag = 'delete'
        elif (j < bj):
            tag = 'insert'
        if tag:
            answer.append((tag, i, ai, j, bj))
        (i, j) = ((ai + size), (bj + size))
        if size:
            answer.append(('equal', ai, i, bj, j))
    return answer
