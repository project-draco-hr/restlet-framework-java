def context_diff(a, b, fromfile='', tofile='', fromfiledate='', tofiledate='', n=3, lineterm='\n'):
    '\n    Compare two sequences of lines; generate the delta as a context diff.\n\n    Context diffs are a compact way of showing line changes and a few\n    lines of context.  The number of context lines is set by \'n\' which\n    defaults to three.\n\n    By default, the diff control lines (those with *** or ---) are\n    created with a trailing newline.  This is helpful so that inputs\n    created from file.readlines() result in diffs that are suitable for\n    file.writelines() since both the inputs and outputs have trailing\n    newlines.\n\n    For inputs that do not have trailing newlines, set the lineterm\n    argument to "" so that the output will be uniformly newline free.\n\n    The context diff format normally has a header for filenames and\n    modification times.  Any or all of these may be specified using\n    strings for \'fromfile\', \'tofile\', \'fromfiledate\', and \'tofiledate\'.\n    The modification times are normally expressed in the format returned\n    by time.ctime().  If not specified, the strings default to blanks.\n\n    Example:\n\n    >>> print \'\'.join(context_diff(\'one\\ntwo\\nthree\\nfour\\n\'.splitlines(1),\n    ...       \'zero\\none\\ntree\\nfour\\n\'.splitlines(1), \'Original\', \'Current\',\n    ...       \'Sat Jan 26 23:30:50 1991\', \'Fri Jun 06 10:22:46 2003\')),\n    *** Original Sat Jan 26 23:30:50 1991\n    --- Current Fri Jun 06 10:22:46 2003\n    ***************\n    *** 1,4 ****\n      one\n    ! two\n    ! three\n      four\n    --- 1,4 ----\n    + zero\n      one\n    ! tree\n      four\n    '
    started = False
    prefixmap = {'insert': '+ ', 'delete': '- ', 'replace': '! ', 'equal': '  ', }
    for group in SequenceMatcher(None, a, b).get_grouped_opcodes(n):
        if (not started):
            yield ('*** %s %s%s' % (fromfile, fromfiledate, lineterm))
            yield ('--- %s %s%s' % (tofile, tofiledate, lineterm))
            started = True
        yield ('***************%s' % (lineterm,))
        if ((group[(-1)][2] - group[0][1]) >= 2):
            yield ('*** %d,%d ****%s' % ((group[0][1] + 1), group[(-1)][2], lineterm))
        else:
            yield ('*** %d ****%s' % (group[(-1)][2], lineterm))
        visiblechanges = [e for e in group if (e[0] in ('replace', 'delete'))]
        if visiblechanges:
            for (tag, i1, i2, _, _) in group:
                if (tag != 'insert'):
                    for line in a[i1:i2]:
                        yield (prefixmap[tag] + line)
        if ((group[(-1)][4] - group[0][3]) >= 2):
            yield ('--- %d,%d ----%s' % ((group[0][3] + 1), group[(-1)][4], lineterm))
        else:
            yield ('--- %d ----%s' % (group[(-1)][4], lineterm))
        visiblechanges = [e for e in group if (e[0] in ('replace', 'insert'))]
        if visiblechanges:
            for (tag, _, _, j1, j2) in group:
                if (tag != 'delete'):
                    for line in b[j1:j2]:
                        yield (prefixmap[tag] + line)
