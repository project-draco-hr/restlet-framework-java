def unified_diff(a, b, fromfile='', tofile='', fromfiledate='', tofiledate='', n=3, lineterm='\n'):
    '\n    Compare two sequences of lines; generate the delta as a unified diff.\n\n    Unified diffs are a compact way of showing line changes and a few\n    lines of context.  The number of context lines is set by \'n\' which\n    defaults to three.\n\n    By default, the diff control lines (those with ---, +++, or @@) are\n    created with a trailing newline.  This is helpful so that inputs\n    created from file.readlines() result in diffs that are suitable for\n    file.writelines() since both the inputs and outputs have trailing\n    newlines.\n\n    For inputs that do not have trailing newlines, set the lineterm\n    argument to "" so that the output will be uniformly newline free.\n\n    The unidiff format normally has a header for filenames and modification\n    times.  Any or all of these may be specified using strings for\n    \'fromfile\', \'tofile\', \'fromfiledate\', and \'tofiledate\'.  The modification\n    times are normally expressed in the format returned by time.ctime().\n\n    Example:\n\n    >>> for line in unified_diff(\'one two three four\'.split(),\n    ...             \'zero one tree four\'.split(), \'Original\', \'Current\',\n    ...             \'Sat Jan 26 23:30:50 1991\', \'Fri Jun 06 10:20:52 2003\',\n    ...             lineterm=\'\'):\n    ...     print line\n    --- Original Sat Jan 26 23:30:50 1991\n    +++ Current Fri Jun 06 10:20:52 2003\n    @@ -1,4 +1,4 @@\n    +zero\n     one\n    -two\n    -three\n    +tree\n     four\n    '
    started = False
    for group in SequenceMatcher(None, a, b).get_grouped_opcodes(n):
        if (not started):
            yield ('--- %s %s%s' % (fromfile, fromfiledate, lineterm))
            yield ('+++ %s %s%s' % (tofile, tofiledate, lineterm))
            started = True
        (i1, i2, j1, j2) = (group[0][1], group[(-1)][2], group[0][3], group[(-1)][4])
        yield ('@@ -%d,%d +%d,%d @@%s' % ((i1 + 1), (i2 - i1), (j1 + 1), (j2 - j1), lineterm))
        for (tag, i1, i2, j1, j2) in group:
            if (tag == 'equal'):
                for line in a[i1:i2]:
                    yield (' ' + line)
                continue
            if ((tag == 'replace') or (tag == 'delete')):
                for line in a[i1:i2]:
                    yield ('-' + line)
            if ((tag == 'replace') or (tag == 'insert')):
                for line in b[j1:j2]:
                    yield ('+' + line)
