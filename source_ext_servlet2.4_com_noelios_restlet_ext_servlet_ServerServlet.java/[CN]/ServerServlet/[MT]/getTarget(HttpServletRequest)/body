{
  Restlet result=this.target;
  if (result == null) {
synchronized (ServerServlet.class) {
      String targetAttributeName=findInitParameter(NAME_TARGET_ATTRIBUTE);
      if (targetAttributeName != null) {
        result=(Restlet)getServletContext().getAttribute(targetAttributeName);
        if (result == null) {
          String targetClassName=findInitParameter(NAME_TARGET_CLASS);
          if (targetClassName != null) {
            try {
              Class targetClass=Class.forName(targetClassName);
              result=(Restlet)targetClass.newInstance();
              getServletContext().setAttribute(NAME_TARGET_ATTRIBUTE,result);
              String initContextPathName=findInitParameter(NAME_TARGET_INIT_CONTEXTPATH);
              if (initContextPathName != null) {
                Component component=null;
                if (result instanceof Component) {
                  component=(Component)result;
                }
 else {
                  component=result.getOwner();
                }
                if (component != null) {
                  String scheme=request.getScheme();
                  String hostName=request.getServerName();
                  int hostPort=request.getServerPort();
                  String servletPath=request.getContextPath() + request.getServletPath();
                  String contextPath=Reference.toUri(scheme,hostName,hostPort,servletPath,null,null);
                  component.getParameters().add(initContextPathName,contextPath);
                  log("[Noelios Restlet Engine] - This context path has been provided to the target's init parameter \"" + initContextPathName + "\": "+ contextPath);
                  component.getClients().remove(Factory.DEFAULT_NAME);
                  component.addClient(Factory.DEFAULT_NAME,new ServletContextClient(component,null,getServletContext()));
                  log("[Noelios Restlet Engine] - The special ServletContextClient has been set on the target component under this name: " + Factory.DEFAULT_NAME);
                  String name;
                  for (Enumeration names=getServletContext().getInitParameterNames(); names.hasMoreElements(); ) {
                    name=(String)names.nextElement();
                    component.getParameters().add(name,getServletContext().getInitParameter(name));
                  }
                }
              }
              result.start();
            }
 catch (            ClassNotFoundException e) {
              log("[Noelios Restlet Engine] - The ServerServlet couldn't find the class. Please check that your classpath includes " + targetClassName,e);
            }
catch (            InstantiationException e) {
              log("[Noelios Restlet Engine] - The ServerServlet couldn't instantiate the class. Please check this class has an empty constructor " + targetClassName,e);
            }
catch (            IllegalAccessException e) {
              log("[Noelios Restlet Engine] - The ServerServlet couldn't instantiate the class. Please check that you have to proper access rights to " + targetClassName,e);
            }
catch (            Exception e) {
              log("[Noelios Restlet Engine] - The ServerServlet couldn't start the target Restlet.",e);
            }
          }
 else {
            log("[Noelios Restlet Engine] - The ServerServlet couldn't find the class name of the target Restlet. Please set the initialization parameter called " + NAME_TARGET_CLASS);
          }
        }
      }
 else {
        log("[Noelios Restlet Engine] - The ServerServlet couldn't find the attribute name of the target Restlet. Please set the initialization parameter called " + NAME_TARGET_ATTRIBUTE);
      }
      this.target=result;
    }
  }
  return result;
}
