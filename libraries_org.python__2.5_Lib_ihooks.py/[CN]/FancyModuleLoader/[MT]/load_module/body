def load_module(self, name, stuff):
    (file, filename, (suff, mode, type)) = stuff
    realfilename = filename
    path = None
    if (type == PKG_DIRECTORY):
        initstuff = self.find_module_in_dir('__init__', filename, 0)
        if (not initstuff):
            raise ImportError, ('No __init__ module in package %s' % name)
        (initfile, initfilename, initinfo) = initstuff
        (initsuff, initmode, inittype) = initinfo
        if (inittype not in (PY_COMPILED, PY_SOURCE)):
            if initfile:
                initfile.close()
            raise ImportError, ('Bad type (%r) for __init__ module in package %s' % (inittype, name))
        path = [filename]
        file = initfile
        realfilename = initfilename
        type = inittype
    if (type == FROZEN_MODULE):
        code = self.hooks.get_frozen_object(name)
    elif (type == PY_COMPILED):
        import marshal
        file.seek(8)
        code = marshal.load(file)
    elif (type == PY_SOURCE):
        data = file.read()
        code = compile(data, realfilename, 'exec')
    else:
        return ModuleLoader.load_module(self, name, stuff)
    m = self.hooks.add_module(name)
    if path:
        m.__path__ = path
    m.__file__ = filename
    try:
        exec code in m.__dict__
    except:
        d = self.hooks.modules_dict()
        if (name in d):
            del d[name]
        raise
    return m
