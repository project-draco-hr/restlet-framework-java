'Import hook support.\n\nConsistent use of this module will make it possible to change the\ndifferent mechanisms involved in loading modules independently.\n\nWhile the built-in module imp exports interfaces to the built-in\nmodule searching and loading algorithm, and it is possible to replace\nthe built-in function __import__ in order to change the semantics of\nthe import statement, until now it has been difficult to combine the\neffect of different __import__ hacks, like loading modules from URLs\nby rimport.py, or restricted execution by rexec.py.\n\nThis module defines three new concepts:\n\n1) A "file system hooks" class provides an interface to a filesystem.\n\nOne hooks class is defined (Hooks), which uses the interface provided\nby standard modules os and os.path.  It should be used as the base\nclass for other hooks classes.\n\n2) A "module loader" class provides an interface to search for a\nmodule in a search path and to load it.  It defines a method which\nsearches for a module in a single directory; by overriding this method\none can redefine the details of the search.  If the directory is None,\nbuilt-in and frozen modules are searched instead.\n\nTwo module loader class are defined, both implementing the search\nstrategy used by the built-in __import__ function: ModuleLoader uses\nthe imp module\'s find_module interface, while HookableModuleLoader\nuses a file system hooks class to interact with the file system.  Both\nuse the imp module\'s load_* interfaces to actually load the module.\n\n3) A "module importer" class provides an interface to import a\nmodule, as well as interfaces to reload and unload a module.  It also\nprovides interfaces to install and uninstall itself instead of the\ndefault __import__ and reload (and unload) functions.\n\nOne module importer class is defined (ModuleImporter), which uses a\nmodule loader instance passed in (by default HookableModuleLoader is\ninstantiated).\n\nThe classes defined here should be used as base classes for extended\nfunctionality along those lines.\n\nIf a module importer class supports dotted names, its import_module()\nmust return a different value depending on whether it is called on\nbehalf of a "from ... import ..." statement or not.  (This is caused\nby the way the __import__ hook is used by the Python interpreter.)  It\nwould also do wise to install a different version of reload().\n\n'
import __builtin__
import imp
import os
import sys
__all__ = ['BasicModuleLoader', 'Hooks', 'ModuleLoader', 'FancyModuleLoader', 'BasicModuleImporter', 'ModuleImporter', 'install', 'uninstall']
VERBOSE = 0
from imp import C_EXTENSION, PY_SOURCE, PY_COMPILED
from imp import C_BUILTIN, PY_FROZEN, PKG_DIRECTORY
BUILTIN_MODULE = C_BUILTIN
FROZEN_MODULE = PY_FROZEN
default_importer = None
current_importer = None
