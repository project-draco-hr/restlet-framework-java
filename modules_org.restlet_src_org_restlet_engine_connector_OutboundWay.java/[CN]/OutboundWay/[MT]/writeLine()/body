{
switch (getMessageState()) {
case START:
    if (getHelper().getLogger().isLoggable(Level.FINE)) {
      getHelper().getLogger().log(Level.FINE,"Writing message to " + getConnection().getSocketAddress());
    }
  writeStartLine();
setMessageState(MessageState.HEADERS);
break;
case HEADERS:
if (getHeaders() == null) {
setHeaders(new Form());
setHeaderIndex(0);
addHeaders(getHeaders());
}
if (getHeaderIndex() < getHeaders().size()) {
Parameter header=getHeaders().get(getHeaderIndex());
getLineBuilder().append(header.getName());
getLineBuilder().append(": ");
getLineBuilder().append(header.getValue());
getLineBuilder().append('\r');
getLineBuilder().append('\n');
setHeaderIndex(getHeaderIndex() + 1);
}
 else {
getLineBuilder().append('\r');
getLineBuilder().append('\n');
if (getActualMessage().isEntityAvailable()) {
setMessageState(MessageState.BODY);
ReadableByteChannel rbc=getActualMessage().getEntity().getChannel();
if (rbc instanceof FileChannel) {
setEntityChannelType(EntityType.TRANSFERABLE);
}
 else if (rbc instanceof BlockableChannel) {
BlockableChannel bc=(BlockableChannel)rbc;
if (bc.isBlocking()) {
  setEntityChannelType(EntityType.BLOCKING);
}
 else {
  setEntityChannelType(EntityType.NON_BLOCKING);
}
}
 else if (rbc instanceof SelectableChannel) {
SelectableChannel sc=(SelectableChannel)rbc;
if (sc.isBlocking()) {
  setEntityChannelType(EntityType.BLOCKING);
}
 else {
  setEntityChannelType(EntityType.NON_BLOCKING);
}
}
 else {
setEntityChannelType(EntityType.BLOCKING);
}
if (getActualMessage().getEntity().getAvailableSize() == Representation.UNKNOWN_SIZE) {
setEntityChannel(new ReadableChunkingChannel(rbc,getBuffer().capacity()));
}
 else {
setEntityChannel(new ReadableSizedChannel(rbc,getActualMessage().getEntity().getAvailableSize()));
}
}
 else {
setMessageState(MessageState.END);
}
}
break;
}
}
