def _optimize_unicode(charset, fixup):
    charmap = ([0] * 65536)
    negate = 0
    for (op, av) in charset:
        if (op is NEGATE):
            negate = 1
        elif (op is LITERAL):
            charmap[fixup(av)] = 1
        elif (op is RANGE):
            for i in range(fixup(av[0]), (fixup(av[1]) + 1)):
                charmap[i] = 1
        elif (op is CATEGORY):
            return charset
    if negate:
        for i in range(65536):
            charmap[i] = (not charmap[i])
    comps = {}
    mapping = ([0] * 256)
    block = 0
    data = []
    for i in range(256):
        chunk = tuple(charmap[(i * 256):((i + 1) * 256)])
        new = comps.setdefault(chunk, block)
        mapping[i] = new
        if (new == block):
            block = (block + 1)
            data = (data + _mk_bitmap(chunk))
    header = [block]
    assert (MAXCODE == 65535)
    for i in range(128):
        if (sys.byteorder == 'big'):
            header.append(((256 * mapping[(2 * i)]) + mapping[((2 * i) + 1)]))
        else:
            header.append((mapping[(2 * i)] + (256 * mapping[((2 * i) + 1)])))
    data[0:0] = header
    return [(BIGCHARSET, data)]
