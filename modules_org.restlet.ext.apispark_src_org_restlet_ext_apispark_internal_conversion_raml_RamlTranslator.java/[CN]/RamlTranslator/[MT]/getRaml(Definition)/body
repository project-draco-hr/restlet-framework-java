{
  Raml raml=new Raml();
  ObjectMapper m=new ObjectMapper();
  if (definition.getVersion() != null) {
    raml.setVersion(definition.getVersion());
  }
  Contract contract=definition.getContract();
  Map<String,Map<String,Object>> representationSamples=getSamples(contract);
  Endpoint endpoint=null;
  if (!definition.getEndpoints().isEmpty()) {
    endpoint=definition.getEndpoints().get(0);
    raml.setBaseUri(endpoint.computeUrl());
  }
 else {
    raml.setBaseUri("http://example.com/v1");
  }
  raml.setSecuritySchemes(new ArrayList<Map<String,SecurityScheme>>());
  fillSecuritySchemes(raml.getSecuritySchemes(),endpoint);
  raml.setTitle(contract.getName());
  raml.setResources(new HashMap<String,org.raml.model.Resource>());
  fillResources(raml.getResources(),m,contract,representationSamples);
  raml.setSchemas(new ArrayList<Map<String,String>>());
  Map<String,String> schemas=new HashMap<String,String>();
  raml.getSchemas().add(schemas);
  for (  Representation representation : contract.getRepresentations()) {
    if (RamlUtils.isPrimitiveType(representation.getName())) {
      continue;
    }
    try {
      RamlUtils.fillSchemas(representation,schemas,m);
    }
 catch (    JsonProcessingException e) {
      LOGGER.log(Level.WARNING,"Error when putting mime type schema for representation: " + representation.getName(),e);
    }
  }
  return raml;
}
