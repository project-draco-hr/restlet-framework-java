{
  Raml raml=new Raml();
  ObjectMapper m=new ObjectMapper();
  if (definition.getVersion() != null) {
    raml.setVersion("v" + definition.getVersion());
  }
  raml.setBaseUri(definition.getEndpoint() == null ? "http://introspected.com" : definition.getEndpoint());
  raml.setTitle(definition.getContract().getName());
  raml.setResources(new HashMap<String,org.raml.model.Resource>());
  org.raml.model.Resource ramlResource;
  List<String> paths=new ArrayList<String>();
  for (  Resource resource : definition.getContract().getResources()) {
    ramlResource=new org.raml.model.Resource();
    if (resource.getName() != null) {
      ramlResource.setDisplayName(resource.getName());
    }
 else {
      ramlResource.setDisplayName(RamlUtils.processResourceName(resource.getResourcePath()));
    }
    ramlResource.setDescription(resource.getDescription());
    ramlResource.setParentUri("");
    ramlResource.setRelativeUri(resource.getResourcePath());
    UriParameter uiParam=new UriParameter();
    ramlResource.setUriParameters(new HashMap<String,UriParameter>());
    for (    PathVariable pathVariable : resource.getPathVariables()) {
      uiParam.setDisplayName(pathVariable.getName());
      uiParam.setDescription(pathVariable.getDescription());
      uiParam.setRepeat(pathVariable.isArray());
      uiParam.setType(RamlUtils.getParamType(pathVariable.getType()));
      ramlResource.getUriParameters().put(pathVariable.getName(),uiParam);
    }
    Action action;
    ramlResource.setActions(new HashMap<ActionType,Action>());
    MimeType ramlInRepresentation;
    for (    Operation operation : resource.getOperations()) {
      action=new Action();
      action.setDescription(operation.getDescription());
      action.setResource(ramlResource);
      ramlInRepresentation=new MimeType();
      if (operation.getInRepresentation() != null) {
        ramlInRepresentation.setType(operation.getInRepresentation().getRepresentation());
        if (RamlUtils.isPrimitiveType(operation.getInRepresentation().getRepresentation())) {
          Property inRepresentationPrimitive=new Property();
          inRepresentationPrimitive.setName("");
          inRepresentationPrimitive.setType(operation.getInRepresentation().getRepresentation());
          SimpleTypeSchema inRepresentationSchema=RamlUtils.generatePrimitiveSchema(inRepresentationPrimitive);
          try {
            ramlInRepresentation.setSchema(m.writeValueAsString(inRepresentationSchema));
          }
 catch (          JsonProcessingException e) {
            e.printStackTrace();
          }
        }
 else {
          ramlInRepresentation.setSchema(operation.getInRepresentation().getRepresentation());
        }
        action.setBody(new HashMap<String,MimeType>());
        for (        String mediaType : operation.getConsumes()) {
          action.getBody().put(mediaType,ramlInRepresentation);
        }
      }
      org.raml.model.parameter.QueryParameter ramlQueryParameter;
      action.setQueryParameters(new HashMap<String,org.raml.model.parameter.QueryParameter>());
      for (      QueryParameter queryParameter : operation.getQueryParameters()) {
        ramlQueryParameter=new org.raml.model.parameter.QueryParameter();
        ramlQueryParameter.setDisplayName(queryParameter.getName());
        ramlQueryParameter.setType(RamlUtils.getParamType(queryParameter.getType()));
        ramlQueryParameter.setDescription(queryParameter.getDescription());
        ramlQueryParameter.setRequired(queryParameter.isRequired());
        ramlQueryParameter.setDefaultValue(queryParameter.getDefaultValue());
        ramlQueryParameter.setRepeat(queryParameter.isAllowMultiple());
        action.getQueryParameters().put(queryParameter.getName(),ramlQueryParameter);
      }
      MimeType ramlOutRepresentation;
      org.raml.model.Response ramlResponse=new org.raml.model.Response();
      action.setResponses(new HashMap<String,org.raml.model.Response>());
      for (      Response response : operation.getResponses()) {
        ramlResponse=new org.raml.model.Response();
        ramlResponse.setDescription(response.getDescription());
        ramlResponse.setBody(new HashMap<String,MimeType>());
        ramlOutRepresentation=new MimeType();
        if (Status.isSuccess(response.getCode()) && operation.getOutRepresentation() != null && operation.getOutRepresentation().getRepresentation() != null) {
          if (RamlUtils.isPrimitiveType(operation.getOutRepresentation().getRepresentation())) {
            Property outRepresentationPrimitive=new Property();
            outRepresentationPrimitive.setName("");
            outRepresentationPrimitive.setType(operation.getOutRepresentation().getRepresentation());
            SimpleTypeSchema outRepresentationSchema=RamlUtils.generatePrimitiveSchema(outRepresentationPrimitive);
            try {
              ramlOutRepresentation.setSchema(m.writeValueAsString(outRepresentationSchema));
            }
 catch (            JsonProcessingException e) {
              e.printStackTrace();
            }
          }
 else {
            ramlOutRepresentation.setSchema(operation.getOutRepresentation().getRepresentation());
          }
        }
        for (        String mediaType : operation.getProduces()) {
          ramlResponse.getBody().put(mediaType,ramlOutRepresentation);
        }
        action.getResponses().put("" + response.getCode(),ramlResponse);
      }
      ramlResource.getActions().put(RamlUtils.getActionType(operation.getMethod()),action);
    }
    paths.add(resource.getResourcePath());
    raml.getResources().put(ramlResource.getRelativeUri(),ramlResource);
  }
  raml.setSchemas(new ArrayList<Map<String,String>>());
  Map<String,String> schemas=new HashMap<String,String>();
  raml.getSchemas().add(schemas);
  for (  Representation representation : definition.getContract().getRepresentations()) {
    if (RamlUtils.isPrimitiveType(representation.getName())) {
      continue;
    }
    try {
      schemas.put(representation.getName(),m.writeValueAsString(RamlUtils.generateSchema(representation)));
    }
 catch (    JsonProcessingException e) {
      e.printStackTrace();
    }
  }
  return raml;
}
