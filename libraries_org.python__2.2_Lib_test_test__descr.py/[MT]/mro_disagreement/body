def mro_disagreement():
    if verbose:
        print 'Testing error messages for MRO disagreement...'

    def raises(exc, expected, callable, *args):
        try:
            callable(*args)
        except exc as msg:
            if (not str(msg).startswith(expected)):
                raise TestFailed, ('Message %r, expected %r' % (str(msg), expected))
        else:
            raise TestFailed, ('Expected %s' % exc)


    class A(object):
        pass


    class B(A):
        pass


    class C(object):
        pass
    raises(TypeError, 'duplicate base class A', type, 'X', (A, A), {})
    raises(TypeError, mro_err_msg, type, 'X', (A, B), {})
    raises(TypeError, mro_err_msg, type, 'X', (A, C, B), {})


    class GridLayout(object):
        pass


    class HorizontalGrid(GridLayout):
        pass


    class VerticalGrid(GridLayout):
        pass


    class HVGrid(HorizontalGrid, VerticalGrid):
        pass


    class VHGrid(VerticalGrid, HorizontalGrid):
        pass
    raises(TypeError, mro_err_msg, type, 'ConfusedGrid', (HVGrid, VHGrid), {})
