def subclass_cmp_right_op():
    if verbose:
        print 'Testing correct dispatch of subclass overloading for comp ops'


    class B(int):

        def __ge__(self, other):
            return 'B.__ge__'

        def __le__(self, other):
            return 'B.__le__'
    vereq((B(1) >= 1), 'B.__ge__')
    vereq((1 >= B(1)), 'B.__le__')


    class C(object):

        def __ge__(self, other):
            return 'C.__ge__'

        def __le__(self, other):
            return 'C.__le__'
    vereq((C() >= 1), 'C.__ge__')
    vereq((1 >= C()), 'C.__le__')


    class D(C):

        def __ge__(self, other):
            return 'D.__ge__'

        def __le__(self, other):
            return 'D.__le__'
    vereq((D() >= C()), 'D.__ge__')
    vereq((C() >= D()), 'D.__le__')


    class E(C):
        pass
    vereq(E.__le__, C.__le__)
    vereq((E() >= 1), 'C.__ge__')
    vereq((1 >= E()), 'C.__le__')
    vereq((E() >= C()), 'C.__ge__')
    vereq((C() >= E()), 'C.__le__')
