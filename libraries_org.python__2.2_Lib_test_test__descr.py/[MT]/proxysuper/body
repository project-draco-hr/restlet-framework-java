def proxysuper():
    if verbose:
        print 'Testing super() for a proxy object...'


    class Proxy(object):

        def __init__(self, obj):
            self.__obj = obj

        def __getattribute__(self, name):
            if name.startswith('_Proxy__'):
                return object.__getattribute__(self, name)
            else:
                return getattr(self.__obj, name)


    class B(object):

        def f(self):
            return 'B.f'


    class C(B):

        def f(self):
            return (super(C, self).f() + '->C.f')
    obj = C()
    p = Proxy(obj)
    vereq(C.__dict__['f'](p), 'B.f->C.f')
