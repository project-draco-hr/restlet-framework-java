{
  if (this.regexPattern == null) {
    StringBuilder patternBuffer=new StringBuilder();
    StringBuilder varBuffer=null;
    char next;
    boolean inVariable=false;
    for (int i=0; i < getPattern().length(); i++) {
      next=getPattern().charAt(i);
      if (inVariable) {
        if (isUnreserved(next)) {
          varBuffer.append(next);
        }
 else         if (next == '}') {
          if (varBuffer.length() == 0) {
            getLogger().warning("Empty pattern variables are not allowed : " + this.regexPattern);
          }
 else {
            String varName=varBuffer.toString();
            int varIndex=getRegexVariables().indexOf(varName);
            if (varIndex != -1) {
              patternBuffer.append("\\" + varIndex);
            }
 else {
              getRegexVariables().add(varName);
              Variable var=getVariables().get(varName);
              if (var == null)               var=getDefaultVariable();
              patternBuffer.append(getVariableRegex(var));
            }
            varBuffer=new StringBuilder();
          }
        }
 else {
          getLogger().warning("An invalid character was detected inside a pattern variable : " + this.regexPattern);
        }
      }
 else {
        if (next == '{') {
          inVariable=true;
          varBuffer=new StringBuilder();
        }
 else         if (next == '}') {
          getLogger().warning("An invalid character was detected inside a pattern variable : " + this.regexPattern);
        }
 else {
          patternBuffer.append(next);
        }
      }
    }
    this.regexPattern=Pattern.compile(patternBuffer.toString());
  }
  return this.regexPattern;
}
