{
  if (jaxRsProviderClass == null)   throw new IllegalArgumentException("The JAX-RS provider class must not be null");
  if (!jaxRsProviderClass.isAnnotationPresent(javax.ws.rs.ext.Provider.class)) {
    String message="Officially a JAX-RS provider class must be annotated with @javax.ws.rs.ext.Provider";
    getLogger().config(message);
  }
  Provider<?> provider;
  try {
    provider=new Provider<Object>(jaxRsProviderClass,objectFactory,tlContext,this.entityProviders,contextResolvers,extensionBackwardMapping,getLogger());
  }
 catch (  InstantiateException e) {
    String msg="Ignore provider " + jaxRsProviderClass.getName() + "Could not instantiate the Provider, class "+ jaxRsProviderClass.getName();
    getLogger().log(Level.WARNING,msg,e);
    return false;
  }
catch (  MissingAnnotationException e) {
    String msg="Ignore provider " + jaxRsProviderClass.getName() + "Could not instantiate the Provider, class "+ jaxRsProviderClass.getName()+ ", because "+ e.getMessage();
    getLogger().log(Level.WARNING,msg);
    return false;
  }
catch (  InvocationTargetException ite) {
    String msg="Ignore provider " + jaxRsProviderClass.getName() + ", because an exception occured while instantiating";
    getLogger().log(Level.WARNING,msg,ite);
    return false;
  }
catch (  IllegalArgumentException iae) {
    String msg="Ignore provider " + jaxRsProviderClass.getName() + ", because it could not be instantiated";
    getLogger().log(Level.WARNING,msg,iae);
    return false;
  }
catch (  MissingConstructorException mce) {
    String msg="Ignore provider " + jaxRsProviderClass.getName() + ", because no valid constructor was found";
    getLogger().warning(msg);
    return false;
  }
  this.entityProviders.add(provider,defaultProvider);
  if (provider.isContextResolver())   this.contextResolvers.add(provider.getContextResolver());
  if (provider.isExceptionMapper())   this.excMappers.add(provider);
  this.allProviders.add(provider);
  return true;
}
