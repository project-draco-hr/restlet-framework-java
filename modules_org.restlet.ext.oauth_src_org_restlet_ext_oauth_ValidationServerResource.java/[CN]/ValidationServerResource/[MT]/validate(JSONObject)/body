{
  Token t=validateToken(call);
  if (t == null) {
    return createError(OAuthError.invalid_token);
  }
  String uri=call.get("uri").toString();
  JSONArray scopes=null;
  if (call.has("scope")) {
    scopes=call.getJSONArray("scope");
  }
  String owner=null;
  if (call.has("owner")) {
    owner=call.getString("owner");
  }
  getLogger().fine("Received uri = " + uri);
  getLogger().fine("Received scope = " + scopes);
  getLogger().fine("Received owner = " + owner);
  AuthenticatedUser user=t.getUser();
  if (user == null) {
    return createError(OAuthError.invalid_request);
  }
  if ((scopes != null) && (scopes.length() > 0)) {
    for (int i=0; i < scopes.length(); i++) {
      if (scopes.isNull(i)) {
        continue;
      }
      String scope=scopes.getString(i);
      boolean granted=user.isGrantedRole(Scopes.toRole(scope),owner);
      getLogger().fine("Granted permission : " + scope + " = "+ granted);
      if (!granted) {
        return createError(OAuthError.insufficient_scope);
      }
    }
  }
  if ((owner != null) && (owner.length() > 0) && !AUTONOMOUS_USER.equals(user.getId())&& !owner.equals(user.getId())) {
    return createError(OAuthError.invalid_request);
  }
  JSONObject resp=new JSONObject();
  resp.put("tokenOwner",user.getId());
  resp.put("authenticated",true);
  getResponse().setCacheDirectives(noStore);
  getResponse().setCacheDirectives(noCache);
  return new JsonStringRepresentation(resp);
}
