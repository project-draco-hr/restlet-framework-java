{
  ParameterList requestHeaders=httpCall.getRequestHeaders();
  if (response.getServer().getName() != null) {
    String host;
    if (response.getServer().getPort() != null) {
      host=response.getServer().getName() + ':' + response.getServer().getPort();
    }
 else {
      host=response.getServer().getName();
    }
    requestHeaders.add(HttpConstants.HEADER_HOST,host);
  }
  if (request.getClient().getAgent() != null) {
    requestHeaders.add(HttpConstants.HEADER_USER_AGENT,request.getClient().getAgent());
  }
 else {
    requestHeaders.add(HttpConstants.HEADER_USER_AGENT,Factory.VERSION_HEADER);
  }
  Conditions condition=request.getConditions();
  if (condition.getMatch() != null) {
    StringBuilder value=new StringBuilder();
    for (int i=0; i < condition.getMatch().size(); i++) {
      if (i > 0)       value.append(", ");
      value.append(condition.getMatch().get(i).getName());
    }
    httpCall.getRequestHeaders().add(HttpConstants.HEADER_IF_MATCH,value.toString());
  }
  if (condition.getModifiedSince() != null) {
    String imsDate=DateUtils.format(condition.getModifiedSince(),DateUtils.FORMAT_RFC_1123[0]);
    requestHeaders.add(HttpConstants.HEADER_IF_MODIFIED_SINCE,imsDate);
  }
  if (condition.getNoneMatch() != null) {
    StringBuilder value=new StringBuilder();
    for (int i=0; i < condition.getNoneMatch().size(); i++) {
      if (i > 0)       value.append(", ");
      value.append(condition.getNoneMatch().get(i).getName());
    }
    requestHeaders.add(HttpConstants.HEADER_IF_NONE_MATCH,value.toString());
  }
  if (condition.getUnmodifiedSince() != null) {
    String iusDate=DateUtils.format(condition.getUnmodifiedSince(),DateUtils.FORMAT_RFC_1123[0]);
    requestHeaders.add(HttpConstants.HEADER_IF_UNMODIFIED_SINCE,iusDate);
  }
  if (request.getCookies().size() > 0) {
    String cookies=CookieUtils.format(request.getCookies());
    requestHeaders.add(HttpConstants.HEADER_COOKIE,cookies);
  }
  if (request.getReferrerRef() != null) {
    requestHeaders.add(HttpConstants.HEADER_REFERRER,request.getReferrerRef().toString());
  }
  ClientInfo client=request.getClient();
  if (client.getAcceptedMediaTypes().size() > 0) {
    try {
      requestHeaders.add(HttpConstants.HEADER_ACCEPT,PreferenceUtils.format(client.getAcceptedMediaTypes()));
    }
 catch (    IOException ioe) {
      logger.log(Level.WARNING,"Unable to format the HTTP Accept header",ioe);
    }
  }
 else {
    requestHeaders.add(HttpConstants.HEADER_ACCEPT,MediaType.ALL.getName());
  }
  if (client.getAcceptedCharacterSets().size() > 0) {
    try {
      requestHeaders.add(HttpConstants.HEADER_ACCEPT_CHARSET,PreferenceUtils.format(client.getAcceptedCharacterSets()));
    }
 catch (    IOException ioe) {
      logger.log(Level.WARNING,"Unable to format the HTTP Accept header",ioe);
    }
  }
  if (client.getAcceptedEncodings().size() > 0) {
    try {
      requestHeaders.add(HttpConstants.HEADER_ACCEPT_ENCODING,PreferenceUtils.format(client.getAcceptedEncodings()));
    }
 catch (    IOException ioe) {
      logger.log(Level.WARNING,"Unable to format the HTTP Accept header",ioe);
    }
  }
  if (client.getAcceptedLanguages().size() > 0) {
    try {
      requestHeaders.add(HttpConstants.HEADER_ACCEPT_LANGUAGE,PreferenceUtils.format(client.getAcceptedLanguages()));
    }
 catch (    IOException ioe) {
      logger.log(Level.WARNING,"Unable to format the HTTP Accept header",ioe);
    }
  }
  ChallengeResponse challengeResponse=request.getChallengeResponse();
  if (challengeResponse != null) {
    requestHeaders.add(HttpConstants.HEADER_AUTHORIZATION,SecurityUtils.format(challengeResponse));
  }
  if (request.getInput() != null) {
    if (request.getInput().getMediaType() != null) {
      requestHeaders.add(HttpConstants.HEADER_CONTENT_TYPE,request.getInput().getMediaType().toString());
    }
    if (request.getInput().getEncoding() != null) {
      requestHeaders.add(HttpConstants.HEADER_CONTENT_ENCODING,request.getInput().getEncoding().toString());
    }
    if (request.getInput().getLanguage() != null) {
      requestHeaders.add(HttpConstants.HEADER_CONTENT_LANGUAGE,request.getInput().getLanguage().toString());
    }
  }
  ParameterList additionalHeaders=(ParameterList)request.getAttributes().get(HttpConstants.ATTRIBUTE_HEADERS);
  if (additionalHeaders != null) {
    for (    Parameter param : additionalHeaders) {
      if (param.getName().equalsIgnoreCase(HttpConstants.HEADER_ACCEPT) || param.getName().equalsIgnoreCase(HttpConstants.HEADER_ACCEPT_CHARSET) || param.getName().equalsIgnoreCase(HttpConstants.HEADER_ACCEPT_ENCODING)|| param.getName().equalsIgnoreCase(HttpConstants.HEADER_ACCEPT_LANGUAGE)|| param.getName().equalsIgnoreCase(HttpConstants.HEADER_ACCEPT_RANGES)|| param.getName().equalsIgnoreCase(HttpConstants.HEADER_AGE)|| param.getName().equalsIgnoreCase(HttpConstants.HEADER_ALLOW)|| param.getName().equalsIgnoreCase(HttpConstants.HEADER_AUTHORIZATION)|| param.getName().equalsIgnoreCase(HttpConstants.HEADER_CACHE_CONTROL)|| param.getName().equalsIgnoreCase(HttpConstants.HEADER_CONNECTION)|| param.getName().equalsIgnoreCase(HttpConstants.HEADER_CONTENT_ENCODING)|| param.getName().equalsIgnoreCase(HttpConstants.HEADER_CONTENT_LANGUAGE)|| param.getName().equalsIgnoreCase(HttpConstants.HEADER_CONTENT_LENGTH)|| param.getName().equalsIgnoreCase(HttpConstants.HEADER_CONTENT_LOCATION)|| param.getName().equalsIgnoreCase(HttpConstants.HEADER_CONTENT_MD5)|| param.getName().equalsIgnoreCase(HttpConstants.HEADER_CONTENT_RANGE)|| param.getName().equalsIgnoreCase(HttpConstants.HEADER_CONTENT_TYPE)|| param.getName().equalsIgnoreCase(HttpConstants.HEADER_COOKIE)|| param.getName().equalsIgnoreCase(HttpConstants.HEADER_DATE)|| param.getName().equalsIgnoreCase(HttpConstants.HEADER_ETAG)|| param.getName().equalsIgnoreCase(HttpConstants.HEADER_EXPECT)|| param.getName().equalsIgnoreCase(HttpConstants.HEADER_EXPIRES)|| param.getName().equalsIgnoreCase(HttpConstants.HEADER_FROM)|| param.getName().equalsIgnoreCase(HttpConstants.HEADER_HOST)|| param.getName().equalsIgnoreCase(HttpConstants.HEADER_IF_MATCH)|| param.getName().equalsIgnoreCase(HttpConstants.HEADER_IF_MODIFIED_SINCE)|| param.getName().equalsIgnoreCase(HttpConstants.HEADER_IF_NONE_MATCH)|| param.getName().equalsIgnoreCase(HttpConstants.HEADER_IF_RANGE)|| param.getName().equalsIgnoreCase(HttpConstants.HEADER_IF_UNMODIFIED_SINCE)|| param.getName().equalsIgnoreCase(HttpConstants.HEADER_LAST_MODIFIED)|| param.getName().equalsIgnoreCase(HttpConstants.HEADER_LOCATION)|| param.getName().equalsIgnoreCase(HttpConstants.HEADER_MAX_FORWARDS)|| param.getName().equalsIgnoreCase(HttpConstants.HEADER_PRAGMA)|| param.getName().equalsIgnoreCase(HttpConstants.HEADER_PROXY_AUTHENTICATE)|| param.getName().equalsIgnoreCase(HttpConstants.HEADER_PROXY_AUTHORIZATION)|| param.getName().equalsIgnoreCase(HttpConstants.HEADER_RANGE)|| param.getName().equalsIgnoreCase(HttpConstants.HEADER_REFERRER)|| param.getName().equalsIgnoreCase(HttpConstants.HEADER_RETRY_AFTER)|| param.getName().equalsIgnoreCase(HttpConstants.HEADER_SERVER)|| param.getName().equalsIgnoreCase(HttpConstants.HEADER_SET_COOKIE)|| param.getName().equalsIgnoreCase(HttpConstants.HEADER_SET_COOKIE2)|| param.getName().equalsIgnoreCase(HttpConstants.HEADER_TRAILER)|| param.getName().equalsIgnoreCase(HttpConstants.HEADER_TRANSFER_ENCODING)|| param.getName().equalsIgnoreCase(HttpConstants.HEADER_TRANSFER_EXTENSION)|| param.getName().equalsIgnoreCase(HttpConstants.HEADER_UPGRADE)|| param.getName().equalsIgnoreCase(HttpConstants.HEADER_USER_AGENT)|| param.getName().equalsIgnoreCase(HttpConstants.HEADER_VARY)|| param.getName().equalsIgnoreCase(HttpConstants.HEADER_VIA)|| param.getName().equalsIgnoreCase(HttpConstants.HEADER_WARNING)|| param.getName().equalsIgnoreCase(HttpConstants.HEADER_WWW_AUTHENTICATE)) {
        logger.warning("Addition of the standard header \"" + param.getName() + "\" is not allowed.");
      }
 else {
        requestHeaders.add(param);
      }
    }
  }
}
