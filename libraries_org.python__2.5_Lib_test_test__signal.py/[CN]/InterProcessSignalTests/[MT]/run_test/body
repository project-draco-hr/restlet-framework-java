def run_test(self):
    signal.signal(signal.SIGHUP, self.handlerA)
    signal.signal(signal.SIGUSR1, self.handlerB)
    signal.signal(signal.SIGUSR2, signal.SIG_IGN)
    signal.signal(signal.SIGALRM, signal.default_int_handler)
    self.a_called = False
    self.b_called = False
    pid = os.getpid()
    if test_support.verbose:
        print "test runner's pid is", pid
    child = ignoring_eintr(subprocess.Popen, ['kill', '-HUP', str(pid)])
    if child:
        self.wait(child)
        if (not self.a_called):
            time.sleep(1)
    self.assertTrue(self.a_called)
    self.assertFalse(self.b_called)
    self.a_called = False
    del child
    try:
        child = subprocess.Popen(['kill', '-USR1', str(pid)])
        self.wait(child)
        time.sleep(1)
        self.fail('HandlerBCalled exception not thrown')
    except HandlerBCalled:
        self.assertTrue(self.b_called)
        self.assertFalse(self.a_called)
        if test_support.verbose:
            print 'HandlerBCalled exception caught'
    child = ignoring_eintr(subprocess.Popen, ['kill', '-USR2', str(pid)])
    if child:
        self.wait(child)
    try:
        signal.alarm(1)
        signal.pause()
        time.sleep(1)
    except KeyboardInterrupt:
        if test_support.verbose:
            print 'KeyboardInterrupt (the alarm() went off)'
    except:
        self.fail(('Some other exception woke us from pause: %s' % traceback.format_exc()))
    else:
        self.fail("pause returned of its own accord, and the signal didn't arrive after another second.")
