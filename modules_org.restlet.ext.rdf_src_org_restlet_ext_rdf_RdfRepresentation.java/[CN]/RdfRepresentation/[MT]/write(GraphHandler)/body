{
  try {
    if (graph != null) {
      discoverNamespaces(graph,graphHandler);
      graphHandler.startGraph();
      for (      Link link : graph) {
        if (link.hasReferenceSource()) {
          if (link.hasReferenceTarget()) {
            graphHandler.link(link.getSourceAsReference(),link.getTypeRef(),link.getTargetAsReference());
          }
 else           if (link.hasLiteralTarget()) {
            graphHandler.link(link.getSourceAsReference(),link.getTypeRef(),link.getTargetAsLiteral());
          }
 else           if (link.hasLinkTarget()) {
            Context.getCurrentLogger().warning("Cannot write the representation of a statement due to the fact that the object is neither a Reference nor a literal.");
          }
 else {
            Context.getCurrentLogger().warning("Cannot write the representation of a statement due to the fact that the object is neither a Reference nor a literal.");
          }
        }
 else         if (link.hasGraphSource()) {
          if (link.hasReferenceTarget()) {
            graphHandler.link(link.getSourceAsGraph(),link.getTypeRef(),link.getTargetAsReference());
          }
 else           if (link.hasLiteralTarget()) {
            graphHandler.link(link.getSourceAsGraph(),link.getTypeRef(),link.getTargetAsLiteral());
          }
 else           if (link.hasLinkTarget()) {
            Context.getCurrentLogger().warning("Cannot write the representation of a statement due to the fact that the object is neither a Reference nor a literal.");
          }
 else {
            Context.getCurrentLogger().warning("Cannot write the representation of a statement due to the fact that the object is neither a Reference nor a literal.");
          }
        }
      }
      graphHandler.endGraph();
    }
  }
 catch (  Exception e) {
    Context.getCurrentLogger().log(Level.WARNING,"Cannot write the RDF graph due to an unexpected exception",e);
  }
}
