{
  State state=getCurrentState();
  if (state != State.LITERAL && this.builder.length() > 0) {
    this.builder=new StringBuilder();
  }
  if (state == State.NONE) {
    if (checkRdfQName("RDF",name)) {
      String base=attributes.getValue("xml:base");
      if (base != null) {
        this.base=base;
      }
    }
 else {
      pushSubject(parseNode(uri,localName,name,attributes));
      pushState(State.SUBJECT);
    }
  }
 else   if (state == State.SUBJECT) {
    List<String[]> arcs=new ArrayList<String[]>();
    pushState(State.PREDICATE);
    this.currentPredicate=getReference(uri,localName,name);
    for (int i=0; i < attributes.getLength(); i++) {
      String qName=attributes.getQName(i);
      if (checkRdfQName("resource",qName)) {
        this.graphHandler.link(getCurrentSubject(),this.currentPredicate,getReference(attributes.getValue(i),null,null));
        break;
      }
 else       if (checkRdfQName("datatype",qName)) {
        popState();
        pushState(State.LITERAL);
        this.currentDataType=attributes.getValue(i);
      }
 else       if (checkRdfQName("parseType",qName)) {
        String value=attributes.getValue(i);
        if ("Literal".equals(value)) {
          popState();
          pushState(State.LITERAL);
          this.currentDataType=RdfConstants.RDF_SYNTAX + "XMLLiteral";
          nodeDepth=0;
        }
 else         if ("Resource".equals(value)) {
          Reference ref=LinkReference.createBlank(ContentReader.newBlankNodeId());
          this.graphHandler.link(getCurrentSubject(),this.currentPredicate,ref);
          popState();
          pushSubject(ref);
          break;
        }
 else {
        }
      }
 else       if (checkRdfQName("nodeID",qName)) {
        this.graphHandler.link(getCurrentSubject(),this.currentPredicate,LinkReference.createBlank(attributes.getValue(i)));
      }
 else {
        if (!qName.startsWith("xmlns")) {
          String[] arc={qName,attributes.getValue(i)};
          arcs.add(arc);
        }
      }
    }
    if (!arcs.isEmpty()) {
      Reference blankNode=LinkReference.createBlank(ContentReader.newBlankNodeId());
      this.graphHandler.link(getCurrentSubject(),this.currentPredicate,blankNode);
      for (      String[] arc : arcs) {
        this.graphHandler.link(blankNode,getReference(null,null,arc[0]),new Literal(arc[1]));
      }
    }
    this.currentLanguage=attributes.getValue("xml:lang");
  }
 else   if (state == State.PREDICATE) {
    Reference object=parseNode(uri,localName,name,attributes);
    this.currentObject=object;
    link();
    pushSubject(object);
  }
 else   if (state == State.OBJECT) {
  }
 else   if (state == State.LITERAL) {
    nodeDepth++;
    this.builder.append("<");
    if (uri != null && !"".equals(uri)) {
      this.builder.append(uri).append(":");
    }
    this.builder.append(localName).append(">");
  }
}
