{
  Component component=null;
  final String configPath=getServletContext().getRealPath("/WEB-INF/restlet.xml");
  final File configFile=new File(configPath);
  if ((configPath != null) && configFile.exists()) {
    component=new Component(LocalReference.createFileReference(configPath));
  }
 else {
    final String componentClassName=getInitParameter(COMPONENT_KEY,null);
    if (componentClassName != null) {
      try {
        final Class<?> targetClass=getClass(componentClassName);
        component=(Component)targetClass.newInstance();
      }
 catch (      final ClassNotFoundException e) {
        log("[Noelios Restlet Engine] - The ServerServlet couldn't find the target class. Please check that your classpath includes " + componentClassName,e);
      }
catch (      final InstantiationException e) {
        log("[Noelios Restlet Engine] - The ServerServlet couldn't instantiate the target class. Please check this class has an empty constructor " + componentClassName,e);
      }
catch (      final IllegalAccessException e) {
        log("[Noelios Restlet Engine] - The ServerServlet couldn't instantiate the target class. Please check that you have to proper access rights to " + componentClassName,e);
      }
    }
    if (component == null) {
      component=new Component();
      component.getStatusService().setEnabled(false);
      final String clientProtocolsString=getInitParameter(CLIENTS_KEY,null);
      if (clientProtocolsString != null) {
        final String[] clientProtocols=clientProtocolsString.split(" ");
        for (        final String clientProtocol : clientProtocols) {
          component.getClients().add(Protocol.valueOf(clientProtocol));
        }
      }
    }
  }
  component.getClients().add(createWarClient(component.getContext(),getServletConfig()));
  final ComponentContext componentContext=(ComponentContext)component.getContext();
  String initParam;
  final javax.servlet.ServletConfig servletConfig=getServletConfig();
  for (final Enumeration<String> enum1=servletConfig.getInitParameterNames(); enum1.hasMoreElements(); ) {
    initParam=enum1.nextElement();
    componentContext.getParameters().add(initParam,servletConfig.getInitParameter(initParam));
  }
  for (final Enumeration<String> enum1=getServletContext().getInitParameterNames(); enum1.hasMoreElements(); ) {
    initParam=enum1.nextElement();
    componentContext.getParameters().add(initParam,getServletContext().getInitParameter(initParam));
  }
  return component;
}
