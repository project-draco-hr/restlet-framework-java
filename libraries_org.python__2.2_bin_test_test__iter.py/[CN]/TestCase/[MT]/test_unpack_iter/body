def test_unpack_iter(self):
    (a, b) = (1, 2)
    self.assertEqual((a, b), (1, 2))
    (a, b, c) = IteratingSequenceClass(3)
    self.assertEqual((a, b, c), (0, 1, 2))
    try:
        (a, b) = IteratingSequenceClass(3)
    except ValueError:
        pass
    else:
        self.fail('should have raised ValueError')
    try:
        (a, b, c) = IteratingSequenceClass(2)
    except ValueError:
        pass
    else:
        self.fail('should have raised ValueError')
    try:
        (a, b, c) = len
    except TypeError:
        pass
    else:
        self.fail('should have raised TypeError')
    (a, b, c) = {1: 42, 2: 42, 3: 42, }.itervalues()
    self.assertEqual((a, b, c), (42, 42, 42))
    f = open(TESTFN, 'w')
    lines = ('a\n', 'bb\n', 'ccc\n')
    try:
        for line in lines:
            f.write(line)
    finally:
        f.close()
    f = open(TESTFN, 'r')
    try:
        (a, b, c) = f
        self.assertEqual((a, b, c), lines)
    finally:
        f.close()
        try:
            unlink(TESTFN)
        except OSError:
            pass
    ((a, b), (c,)) = (IteratingSequenceClass(2), {42: 24, })
    self.assertEqual((a, b, c), (0, 1, 42))


    class C(object):
        count = 0

        def __new__(cls):
            cls.count += 1
            return object.__new__(cls)

        def __del__(self):
            cls = self.__class__
            assert (cls.count > 0)
            cls.count -= 1
