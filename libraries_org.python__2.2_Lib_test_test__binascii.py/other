'Test the binascii C module.'
from test_support import verify, verbose
import binascii
print binascii.__doc__
print binascii.Error
print binascii.Incomplete
funcs = []
for suffix in ('base64', 'hqx', 'uu'):
    prefixes = ['a2b_', 'b2a_']
    if (suffix == 'hqx'):
        prefixes.extend(['crc_', 'rlecode_', 'rledecode_'])
    for prefix in prefixes:
        name = (prefix + suffix)
        funcs.append(getattr(binascii, name))
for func in funcs:
    print ('%-15s: %s' % (func.__name__, func.__doc__))
testdata = 'The quick brown fox jumps over the lazy dog.\r\n'
for i in range(256):
    testdata = (testdata + chr(i))
testdata = (testdata + '\r\nHello world.\n')
print 'base64 test'
MAX_BASE64 = 57
lines = []
for i in range(0, len(testdata), MAX_BASE64):
    b = testdata[i:(i + MAX_BASE64)]
    a = binascii.b2a_base64(b)
    lines.append(a)
    print a,
res = ''
for line in lines:
    b = binascii.a2b_base64(line)
    res = (res + b)
verify((res == testdata))
fillers = ''
valid = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+/'
for i in range(256):
    c = chr(i)
    if (c not in valid):
        fillers = (fillers + c)
res = ''
for line in map(addnoise, lines):
    b = binascii.a2b_base64(line)
    res = (res + b)
verify((res == testdata))
verify((binascii.a2b_base64(fillers) == ''))
print 'uu test'
MAX_UU = 45
lines = []
for i in range(0, len(testdata), MAX_UU):
    b = testdata[i:(i + MAX_UU)]
    a = binascii.b2a_uu(b)
    lines.append(a)
    print a,
res = ''
for line in lines:
    b = binascii.a2b_uu(line)
    res = (res + b)
verify((res == testdata))
crc = binascii.crc32('Test the CRC-32 of')
crc = binascii.crc32(' this string.', crc)
if (crc != 1571220330):
    print 'binascii.crc32() failed.'
s = '{s\x05\x00\x00\x00worldi\x02\x00\x00\x00s\x05\x00\x00\x00helloi\x01\x00\x00\x000'
t = binascii.b2a_hex(s)
u = binascii.a2b_hex(t)
if (s != u):
    print 'binascii hexlification failed'
try:
    binascii.a2b_hex(t[:(-1)])
except TypeError:
    pass
else:
    print 'expected TypeError not raised'
try:
    binascii.a2b_hex((t[:(-1)] + 'q'))
except TypeError:
    pass
else:
    print 'expected TypeError not raised'
verify((binascii.hexlify(u'a') == '61'), 'hexlify failed for Unicode')
