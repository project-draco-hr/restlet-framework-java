"Spawn a command with pipes to its stdin, stdout, and optionally stderr.\n\nThe normal os.popen(cmd, mode) call spawns a shell command and provides a\nfile interface to just the input or output of the process depending on\nwhether mode is 'r' or 'w'.  This module provides the functions popen2(cmd)\nand popen3(cmd) which return two or three pipes to the spawned command.\n"
import os
import subprocess
import sys
__all__ = ['popen2', 'popen3', 'popen4']
MAXFD = subprocess.MAXFD
_active = subprocess._active
_cleanup = subprocess._cleanup
if ((sys.platform[:3] == 'win') or (sys.platform == 'os2emx')):
    del Popen3, Popen4

    def popen2(cmd, bufsize=(-1), mode='t'):
        "Execute the shell command 'cmd' in a sub-process. On UNIX, 'cmd' may\n        be a sequence, in which case arguments will be passed directly to the\n        program without shell intervention (as with os.spawnv()). If 'cmd' is a\n        string it will be passed to the shell (as with os.system()). If\n        'bufsize' is specified, it sets the buffer size for the I/O pipes. The\n        file objects (child_stdout, child_stdin) are returned."
        (w, r) = os.popen2(cmd, mode, bufsize)
        return (r, w)

    def popen3(cmd, bufsize=(-1), mode='t'):
        "Execute the shell command 'cmd' in a sub-process. On UNIX, 'cmd' may\n        be a sequence, in which case arguments will be passed directly to the\n        program without shell intervention (as with os.spawnv()). If 'cmd' is a\n        string it will be passed to the shell (as with os.system()). If\n        'bufsize' is specified, it sets the buffer size for the I/O pipes. The\n        file objects (child_stdout, child_stdin, child_stderr) are returned."
        (w, r, e) = os.popen3(cmd, mode, bufsize)
        return (r, w, e)

    def popen4(cmd, bufsize=(-1), mode='t'):
        "Execute the shell command 'cmd' in a sub-process. On UNIX, 'cmd' may\n        be a sequence, in which case arguments will be passed directly to the\n        program without shell intervention (as with os.spawnv()). If 'cmd' is a\n        string it will be passed to the shell (as with os.system()). If\n        'bufsize' is specified, it sets the buffer size for the I/O pipes. The\n        file objects (child_stdout_stderr, child_stdin) are returned."
        (w, r) = os.popen4(cmd, mode, bufsize)
        return (r, w)
else:

    def popen2(cmd, bufsize=(-1), mode='t'):
        "Execute the shell command 'cmd' in a sub-process. On UNIX, 'cmd' may\n        be a sequence, in which case arguments will be passed directly to the\n        program without shell intervention (as with os.spawnv()). If 'cmd' is a\n        string it will be passed to the shell (as with os.system()). If\n        'bufsize' is specified, it sets the buffer size for the I/O pipes. The\n        file objects (child_stdout, child_stdin) are returned."
        inst = Popen3(cmd, False, bufsize)
        return (inst.fromchild, inst.tochild)

    def popen3(cmd, bufsize=(-1), mode='t'):
        "Execute the shell command 'cmd' in a sub-process. On UNIX, 'cmd' may\n        be a sequence, in which case arguments will be passed directly to the\n        program without shell intervention (as with os.spawnv()). If 'cmd' is a\n        string it will be passed to the shell (as with os.system()). If\n        'bufsize' is specified, it sets the buffer size for the I/O pipes. The\n        file objects (child_stdout, child_stdin, child_stderr) are returned."
        inst = Popen3(cmd, True, bufsize)
        return (inst.fromchild, inst.tochild, inst.childerr)

    def popen4(cmd, bufsize=(-1), mode='t'):
        "Execute the shell command 'cmd' in a sub-process. On UNIX, 'cmd' may\n        be a sequence, in which case arguments will be passed directly to the\n        program without shell intervention (as with os.spawnv()). If 'cmd' is a\n        string it will be passed to the shell (as with os.system()). If\n        'bufsize' is specified, it sets the buffer size for the I/O pipes. The\n        file objects (child_stdout_stderr, child_stdin) are returned."
        inst = Popen4(cmd, bufsize)
        return (inst.fromchild, inst.tochild)
    __all__.extend(['Popen3', 'Popen4'])
if (__name__ == '__main__'):
    _test()
