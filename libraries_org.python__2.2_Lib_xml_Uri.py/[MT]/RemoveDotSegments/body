def RemoveDotSegments(path):
    "\n    Supports Absolutize() by implementing the remove_dot_segments function\n    described in RFC 3986 sec. 5.2.  It collapses most of the '.' and '..'\n    segments out of a path without eliminating empty segments. It is intended\n    to be used during the path merging process and may not give expected\n    results when used independently. Use NormalizePathSegments() or\n    NormalizePathSegmentsInUri() if more general normalization is desired.\n\n    semi-private because it is not for general use. I've implemented it\n    using two segment stacks, as alluded to in the spec, rather than the\n    explicit string-walking algorithm that would be too inefficient. (mbrown)\n    "
    if ((path == '.') or (path == '..')):
        return path[0:0]
    while path:
        if (path[:2] == './'):
            path = path[2:]
        elif (path[:3] == '../'):
            path = path[3:]
        else:
            break
    leading_slash = 0
    if (path[:1] == '/'):
        path = path[1:]
        leading_slash = 1
    if (path[(-2):] == '/.'):
        path = path[:(-1)]
    segments = path.split('/')
    keepers = []
    segments.reverse()
    while segments:
        seg = segments.pop()
        if (seg == '..'):
            if keepers:
                keepers.pop()
            elif (not leading_slash):
                keepers.append(seg)
            if (not segments):
                keepers.append('')
        elif (seg != '.'):
            keepers.append(seg)
    return ((leading_slash * '/') + '/'.join(keepers))
