{
  javax.net.ssl.SSLContext result=null;
  javax.net.ssl.KeyManagerFactory kmf=null;
  if ((this.keyStorePath != null) || (this.keyStoreProvider != null) || (this.keyStoreType != null)) {
    KeyStore keyStore=(this.keyStoreProvider != null) ? KeyStore.getInstance((this.keyStoreType != null) ? this.keyStoreType : KeyStore.getDefaultType(),this.keyStoreProvider) : KeyStore.getInstance((this.keyStoreType != null) ? this.keyStoreType : KeyStore.getDefaultType());
    FileInputStream keyStoreInputStream=null;
    try {
      keyStoreInputStream=((this.keyStorePath != null) && (!"NONE".equals(this.keyStorePath))) ? new FileInputStream(this.keyStorePath) : null;
      keyStore.load(keyStoreInputStream,this.keyStorePassword);
    }
  finally {
      if (keyStoreInputStream != null) {
        keyStoreInputStream.close();
      }
    }
    kmf=javax.net.ssl.KeyManagerFactory.getInstance(this.keyManagerAlgorithm);
    kmf.init(keyStore,this.keyStoreKeyPassword);
  }
  javax.net.ssl.TrustManagerFactory tmf=null;
  if ((this.trustStorePath != null) || (this.trustStoreProvider != null) || (this.trustStoreType != null)) {
    KeyStore trustStore=(this.trustStoreProvider != null) ? KeyStore.getInstance((this.trustStoreType != null) ? this.trustStoreType : KeyStore.getDefaultType(),this.trustStoreProvider) : KeyStore.getInstance((this.trustStoreType != null) ? this.trustStoreType : KeyStore.getDefaultType());
    FileInputStream trustStoreInputStream=null;
    try {
      trustStoreInputStream=((this.trustStorePath != null) && (!"NONE".equals(this.trustStorePath))) ? new FileInputStream(this.trustStorePath) : null;
      trustStore.load(trustStoreInputStream,this.trustStorePassword);
    }
  finally {
      if (trustStoreInputStream != null) {
        trustStoreInputStream.close();
      }
    }
    tmf=javax.net.ssl.TrustManagerFactory.getInstance(this.trustManagerAlgorithm);
    tmf.init(trustStore);
  }
  javax.net.ssl.SSLContext sslContext=javax.net.ssl.SSLContext.getInstance(this.protocol);
  SecureRandom sr=null;
  if (this.secureRandomAlgorithm != null) {
    sr=SecureRandom.getInstance(this.secureRandomAlgorithm);
  }
  sslContext.init(kmf != null ? kmf.getKeyManagers() : null,tmf != null ? tmf.getTrustManagers() : null,sr);
  result=createWrapper(sslContext);
  return result;
}
