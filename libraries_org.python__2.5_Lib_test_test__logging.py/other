'Test harness for the logging module. Run all tests.\n\nCopyright (C) 2001-2002 Vinay Sajip. All Rights Reserved.\n'
import select
import os, sys, string, struct, types, cPickle, cStringIO
import socket, tempfile, threading, time
import logging, logging.handlers, logging.config
from test.test_support import run_with_locale
BANNER = '-- %-10s %-6s ---------------------------------------------------\n'
FINISH_UP = "Finish up, it's closing time. Messages should bear numbers 0 through 24."
TIMEOUT = 10
from SocketServer import ThreadingTCPServer, StreamRequestHandler
socketDataProcessed = threading.Event()
msgcount = 0
SILENT = 10
TACITURN = 9
TERSE = 8
EFFUSIVE = 7
SOCIABLE = 6
VERBOSE = 5
TALKATIVE = 4
GARRULOUS = 3
CHATTERBOX = 2
BORING = 1
LEVEL_RANGE = range(BORING, (SILENT + 1))
my_logging_levels = {SILENT: 'Silent', TACITURN: 'Taciturn', TERSE: 'Terse', EFFUSIVE: 'Effusive', SOCIABLE: 'Sociable', VERBOSE: 'Verbose', TALKATIVE: 'Talkative', GARRULOUS: 'Garrulous', CHATTERBOX: 'Chatterbox', BORING: 'Boring', }
SHOULD1 = "This should only be seen at the '%s' logging level (or lower)"
MSG = '-- logging %d at INFO, messages should be seen every 10 events --'
FILTER = 'a.b'
config0 = '\n[loggers]\nkeys=root\n\n[handlers]\nkeys=hand1\n\n[formatters]\nkeys=form1\n\n[logger_root]\nlevel=NOTSET\nhandlers=hand1\n\n[handler_hand1]\nclass=StreamHandler\nlevel=NOTSET\nformatter=form1\nargs=(sys.stdout,)\n\n[formatter_form1]\nformat=%(levelname)s:%(name)s:%(message)s\ndatefmt=\n'
config1 = '\n[loggers]\nkeys=root,parser\n\n[handlers]\nkeys=hand1\n\n[formatters]\nkeys=form1\n\n[logger_root]\nlevel=NOTSET\nhandlers=hand1\n\n[logger_parser]\nlevel=DEBUG\nhandlers=hand1\npropagate=1\nqualname=compiler.parser\n\n[handler_hand1]\nclass=StreamHandler\nlevel=NOTSET\nformatter=form1\nargs=(sys.stdout,)\n\n[formatter_form1]\nformat=%(levelname)s:%(name)s:%(message)s\ndatefmt=\n'
config2 = string.replace(config1, 'sys.stdout', 'sys.stbout')
config3 = string.replace(config1, 'formatter=form1', 'formatter=misspelled_name')
test5_config = '\n[loggers]\nkeys=root\n\n[handlers]\nkeys=hand1\n\n[formatters]\nkeys=form1\n\n[logger_root]\nlevel=NOTSET\nhandlers=hand1\n\n[handler_hand1]\nclass=StreamHandler\nlevel=NOTSET\nformatter=form1\nargs=(sys.stdout,)\n\n[formatter_form1]\nclass=test.test_logging.FriendlyFormatter\nformat=%(levelname)s:%(name)s:%(message)s\ndatefmt=\n'
if (__name__ == '__main__'):
    sys.stdout.write('test_logging\n')
    test_main()
