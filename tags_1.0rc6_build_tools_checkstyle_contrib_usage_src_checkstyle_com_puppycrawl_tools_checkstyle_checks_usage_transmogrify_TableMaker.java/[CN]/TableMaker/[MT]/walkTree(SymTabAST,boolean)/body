{
  if (tree != null) {
    tree.setScope(symbolTable.getCurrentScope());
switch (tree.getType()) {
case 0:
      processFile(tree);
    if (tree.getFirstChild().getType() != TokenTypes.PACKAGE_DEF) {
      processImplicitPackage(tree.getFile());
    }
  walkSiblings((SymTabAST)tree.getFirstChild(),false);
symbolTable.popScope();
clearImports();
break;
case TokenTypes.LITERAL_NEW:
SymTabAST symtabTree=tree;
walkTree(symtabTree.findFirstToken(TokenTypes.ELIST),makeAnonymousScopes);
SymTabAST objblock=symtabTree.findFirstToken(TokenTypes.OBJBLOCK);
if (objblock != null) {
SymTabAST classExtended=symtabTree.findFirstToken(TokenTypes.IDENT);
processAnonymousInnerClass(objblock,classExtended);
}
break;
case TokenTypes.SLIST:
if (makeAnonymousScopes) {
processBlock(tree,true);
}
 else {
walkSiblings((SymTabAST)tree.getFirstChild(),true);
}
break;
case TokenTypes.CTOR_DEF:
processConstructorDef(tree);
break;
case TokenTypes.METHOD_DEF:
processMethodDef(tree);
break;
case TokenTypes.LITERAL_FINALLY:
processFinally(tree);
break;
case TokenTypes.LITERAL_TRY:
processTry(tree);
break;
case TokenTypes.VARIABLE_DEF:
processVariableDef(tree);
break;
case TokenTypes.PACKAGE_DEF:
processPackage(tree);
break;
case TokenTypes.LABELED_STAT:
processLabel(tree);
break;
case TokenTypes.IMPORT:
processImport(tree);
break;
case TokenTypes.CLASS_DEF:
case TokenTypes.INTERFACE_DEF:
processClass(tree);
break;
case TokenTypes.LITERAL_FOR:
processFor(tree);
break;
case TokenTypes.LITERAL_IF:
processIf(tree);
break;
case TokenTypes.LITERAL_ASSERT:
processAssert(tree);
break;
case TokenTypes.LITERAL_CATCH:
case TokenTypes.LITERAL_WHILE:
case TokenTypes.LITERAL_SWITCH:
case TokenTypes.LITERAL_DO:
case TokenTypes.LITERAL_SYNCHRONIZED:
case TokenTypes.STATIC_INIT:
case TokenTypes.INSTANCE_INIT:
processBlock(tree,false);
break;
default :
walkSiblings((SymTabAST)tree.getFirstChild(),false);
}
}
}
