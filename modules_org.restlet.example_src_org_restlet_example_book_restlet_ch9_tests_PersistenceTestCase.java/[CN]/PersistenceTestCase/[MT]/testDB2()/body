{
  Contact contactProto=new Contact();
  Predicate<Mail> mailByContactNamePredicate=new Predicate<Mail>(){
    static final long serialVersionUID=1l;
    @Override public boolean match(    Mail mail){
      boolean found=false;
      for (      Contact contact : mail.getRecipients()) {
        if ("contact-5".equals(contact.getName())) {
          found=true;
          break;
        }
      }
      return found;
    }
  }
;
  Predicate<Mailbox> mailboxByContactNamePredicate=new Predicate<Mailbox>(){
    static final long serialVersionUID=1l;
    @Override public boolean match(    Mailbox mailbox){
      boolean found=false;
      for (      Contact contact : mailbox.getContacts()) {
        if ("contact-5".equals(contact.getName())) {
          found=true;
          break;
        }
      }
      return found;
    }
  }
;
  ObjectSet<Contact> contactList;
  ObjectSet<Mail> mailList;
  ObjectSet<Mailbox> mailboxList;
  contactProto.setName("contact-4");
  contactList=objectContainer.queryByExample(contactProto);
  assertEquals(contactList.size(),1);
  mailList=objectContainer.query(mailByContactNamePredicate);
  assertEquals(mailList.size(),1);
  Contact contact=contactList.get(0);
  contact.setName("contact-5");
  objectContainer.store(contact);
  objectContainer.commit();
  mailList=objectContainer.query(mailByContactNamePredicate);
  assertEquals(mailList.size(),2);
  mailboxList=objectContainer.query(mailboxByContactNamePredicate);
  assertEquals(mailboxList.size(),1);
  contactProto.setName("contact-5");
  contactList=objectContainer.queryByExample(contactProto);
  for (  Contact contact2 : contactList) {
    for (    Mailbox mailbox : mailboxList) {
      boolean found=false;
      for (int i=0; i < mailbox.getContacts().size() && !found; i++) {
        Contact contact3=mailbox.getContacts().get(i);
        if (contact2.getId().equals(contact3.getId())) {
          mailbox.getContacts().remove(i);
          found=true;
        }
      }
      objectContainer.store(mailbox);
    }
    for (    Mail mail : mailList) {
      List<Contact> list=new ArrayList<Contact>();
      for (int i=0; i < mail.getRecipients().size(); i++) {
        Contact contact3=mail.getRecipients().get(i);
        if (!contact2.getId().equals(contact3.getId())) {
          list.add(contact3);
        }
      }
      mail.setRecipients(list);
      objectContainer.store(mail);
    }
    objectContainer.delete(contact2);
  }
  objectContainer.commit();
  contactList=objectContainer.queryByExample(contactProto);
  assertTrue(contactList.isEmpty());
  mailboxList=objectContainer.query(mailboxByContactNamePredicate);
  assertTrue(mailboxList.isEmpty());
  mailList=objectContainer.query(mailByContactNamePredicate);
  assertTrue(mailList.isEmpty());
}
