import __builtin__
import sys
import os
import re
import copy
import types
import unittest
from StringIO import StringIO
from pprint import pprint
from test import test_support
from optparse import make_option, Option, IndentedHelpFormatter, TitledHelpFormatter, OptionParser, OptionContainer, OptionGroup, SUPPRESS_HELP, SUPPRESS_USAGE, OptionError, OptionConflictError, BadOptionError, OptionValueError, Values
from optparse import _match_abbrev
from optparse import _parse_num
try:
    (True, False)
except NameError:
    (True, False) = (1, 0)
retype = type(re.compile(''))
_time_units = {'s': 1, 'm': 60, 'h': (60 * 60), 'd': ((60 * 60) * 24), }
_expected_help_basic = 'Usage: bar.py [options]\n\nOptions:\n  -a APPLE           throw APPLEs at basket\n  -b NUM, --boo=NUM  shout "boo!" NUM times (in order to frighten away all the\n                     evil spirits that cause trouble and mayhem)\n  --foo=FOO          store FOO in the foo list for later fooing\n  -h, --help         show this help message and exit\n'
_expected_help_long_opts_first = 'Usage: bar.py [options]\n\nOptions:\n  -a APPLE           throw APPLEs at basket\n  --boo=NUM, -b NUM  shout "boo!" NUM times (in order to frighten away all the\n                     evil spirits that cause trouble and mayhem)\n  --foo=FOO          store FOO in the foo list for later fooing\n  --help, -h         show this help message and exit\n'
_expected_help_title_formatter = 'Usage\n=====\n  bar.py [options]\n\nOptions\n=======\n-a APPLE           throw APPLEs at basket\n--boo=NUM, -b NUM  shout "boo!" NUM times (in order to frighten away all the\n                   evil spirits that cause trouble and mayhem)\n--foo=FOO          store FOO in the foo list for later fooing\n--help, -h         show this help message and exit\n'
_expected_help_short_lines = 'Usage: bar.py [options]\n\nOptions:\n  -a APPLE           throw APPLEs at basket\n  -b NUM, --boo=NUM  shout "boo!" NUM times (in order to\n                     frighten away all the evil spirits\n                     that cause trouble and mayhem)\n  --foo=FOO          store FOO in the foo list for later\n                     fooing\n  -h, --help         show this help message and exit\n'
if (__name__ == '__main__'):
    test_main()
