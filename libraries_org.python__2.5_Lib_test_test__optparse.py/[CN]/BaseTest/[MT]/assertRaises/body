def assertRaises(self, func, args, kwargs, expected_exception, expected_message):
    '\n        Assert that the expected exception is raised when calling a\n        function, and that the right error message is included with\n        that exception.\n\n        Arguments:\n          func -- the function to call\n          args -- positional arguments to `func`\n          kwargs -- keyword arguments to `func`\n          expected_exception -- exception that should be raised\n          expected_message -- expected exception message (or pattern\n            if a compiled regex object)\n\n        Returns the exception raised for further testing.\n        '
    if (args is None):
        args = ()
    if (kwargs is None):
        kwargs = {}
    try:
        func(*args, **kwargs)
    except expected_exception as err:
        actual_message = str(err)
        if isinstance(expected_message, retype):
            self.assert_(expected_message.search(actual_message), ("expected exception message pattern:\n/%s/\nactual exception message:\n'''%s'''\n" % (expected_message.pattern, actual_message)))
        else:
            self.assertEqual(actual_message, expected_message, ("expected exception message:\n'''%s'''\nactual exception message:\n'''%s'''\n" % (expected_message, actual_message)))
        return err
    else:
        self.fail(('expected exception %(expected_exception)s not raised\ncalled %(func)r\nwith args %(args)r\nand kwargs %(kwargs)r\n' % locals()))
