def read_token(self):
    'Read a token from the input stream (no pushback or inclusions)'
    while 1:
        nextchar = self.instream.read(1)
        if (nextchar == '\n'):
            self.lineno = (self.lineno + 1)
        if (self.debug >= 3):
            print 'shlex: in state', repr(self.state), 'I see character:', repr(nextchar)
        if (self.state is None):
            self.token = ''
            break
        elif (self.state == ' '):
            if (not nextchar):
                self.state = None
                break
            elif (nextchar in self.whitespace):
                if (self.debug >= 2):
                    print 'shlex: I see whitespace in whitespace state'
                if self.token:
                    break
                else:
                    continue
            elif (nextchar in self.commenters):
                self.instream.readline()
                self.lineno = (self.lineno + 1)
            elif (nextchar in self.wordchars):
                self.token = nextchar
                self.state = 'a'
            elif (nextchar in self.quotes):
                self.token = nextchar
                self.state = nextchar
            else:
                self.token = nextchar
                if self.token:
                    break
                else:
                    continue
        elif (self.state in self.quotes):
            self.token = (self.token + nextchar)
            if (nextchar == self.state):
                self.state = ' '
                break
            elif (not nextchar):
                if (self.debug >= 2):
                    print 'shlex: I see EOF in quotes state'
                raise ValueError, 'No closing quotation'
        elif (self.state == 'a'):
            if (not nextchar):
                self.state = None
                break
            elif (nextchar in self.whitespace):
                if (self.debug >= 2):
                    print 'shlex: I see whitespace in word state'
                self.state = ' '
                if self.token:
                    break
                else:
                    continue
            elif (nextchar in self.commenters):
                self.instream.readline()
                self.lineno = (self.lineno + 1)
            elif ((nextchar in self.wordchars) or (nextchar in self.quotes)):
                self.token = (self.token + nextchar)
            else:
                self.pushback = ([nextchar] + self.pushback)
                if (self.debug >= 2):
                    print 'shlex: I see punctuation in word state'
                self.state = ' '
                if self.token:
                    break
                else:
                    continue
    result = self.token
    self.token = ''
    if (self.debug > 1):
        if result:
            print ('shlex: raw token=' + `result`)
        else:
            print 'shlex: raw token=EOF'
    return result
