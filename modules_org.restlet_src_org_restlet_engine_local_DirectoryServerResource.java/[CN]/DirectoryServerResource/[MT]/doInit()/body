{
  try {
    this.directory=(Directory)getRequestAttributes().get("org.restlet.directory");
    this.relativePart=getReference().getRemainingPart(false,false);
    setNegotiated(this.directory.isNegotiatingContent());
    if ((getApplication() != null) && getApplication().getTunnelService().isExtensionsTunnel()) {
      this.originalRef=getOriginalRef();
      if (this.originalRef != null) {
        this.originalRef.setBaseRef(getReference().getBaseRef());
        this.relativePart=this.originalRef.getRemainingPart();
      }
    }
    if (this.relativePart.startsWith("/")) {
      this.relativePart=this.relativePart.substring(1);
    }
    this.targetUri=new Reference(directory.getRootRef().toString() + this.relativePart).normalize().toString(false,false);
    if (!this.targetUri.startsWith(directory.getRootRef().toString())) {
      this.targetUri=directory.getRootRef().toString();
    }
    if (getClientDispatcher() == null) {
      getLogger().warning("No client dispatcher is available on the context. Can't get the target URI: " + this.targetUri);
    }
 else {
      Response contextResponse=getRepresentation(this.targetUri);
      if (contextResponse.getEntity() != null) {
        if (MediaType.TEXT_URI_LIST.equals(contextResponse.getEntity().getMediaType())) {
          this.directoryTarget=true;
          this.fileTarget=false;
          this.directoryContent=new ReferenceList(contextResponse.getEntity());
          if (!getReference().getPath().endsWith("/")) {
            this.directoryRedirection=true;
          }
          if (!this.targetUri.endsWith("/")) {
            this.targetUri+="/";
            this.relativePart+="/";
          }
          if ((getDirectory().getIndexName() != null) && (getDirectory().getIndexName().length() > 0)) {
            this.directoryUri=this.targetUri;
            this.baseName=getDirectory().getIndexName();
            this.targetUri=this.directoryUri + this.baseName;
            this.indexTarget=true;
          }
 else {
            this.directoryUri=this.targetUri;
            this.baseName=null;
          }
        }
 else {
          this.directoryTarget=false;
          this.fileTarget=true;
          this.fileContent=contextResponse.getEntity();
        }
      }
 else {
        this.directoryTarget=false;
        this.fileTarget=false;
        if (this.targetUri.endsWith("/")) {
          if ((getDirectory().getIndexName() != null) && (getDirectory().getIndexName().length() > 0)) {
            this.directoryUri=this.targetUri;
            this.directoryTarget=true;
            contextResponse=getRepresentation(this.directoryUri + getDirectory().getIndexName());
            if (contextResponse.getEntity() != null) {
              this.baseName=getDirectory().getIndexName();
              this.targetUri=this.directoryUri + this.baseName;
              this.directoryContent=new ReferenceList();
              this.directoryContent.add(new Reference(this.targetUri));
              this.indexTarget=true;
            }
          }
        }
 else {
          if ((getDirectory().getIndexName() != null) && (getDirectory().getIndexName().length() > 0)) {
            contextResponse=getRepresentation(this.targetUri + "/" + getDirectory().getIndexName());
            if (contextResponse.getEntity() != null) {
              this.directoryUri=this.targetUri + "/";
              this.baseName=getDirectory().getIndexName();
              this.targetUri=this.directoryUri + this.baseName;
              this.directoryTarget=true;
              this.directoryRedirection=true;
              this.directoryContent=new ReferenceList();
              this.directoryContent.add(new Reference(this.targetUri));
              this.indexTarget=true;
            }
          }
        }
      }
      if (isNegotiated() && !this.directoryTarget && !this.fileTarget&& (this.originalRef != null)) {
        this.relativePart=getReference().getRemainingPart();
        this.targetUri=new Reference(directory.getRootRef().toString() + this.relativePart).normalize().toString(false,false);
        if (!this.targetUri.startsWith(directory.getRootRef().toString())) {
          this.targetUri=directory.getRootRef().toString();
        }
      }
      if (!fileTarget || (fileContent == null) || !getRequest().getMethod().isSafe()) {
        if (!this.directoryTarget) {
          int lastSlashIndex=this.targetUri.lastIndexOf('/');
          if (lastSlashIndex == -1) {
            this.directoryUri="";
            this.baseName=this.targetUri;
          }
 else {
            this.directoryUri=this.targetUri.substring(0,lastSlashIndex + 1);
            this.baseName=this.targetUri.substring(lastSlashIndex + 1);
          }
          contextResponse=getRepresentation(this.directoryUri);
          if ((contextResponse.getEntity() != null) && MediaType.TEXT_URI_LIST.equals(contextResponse.getEntity().getMediaType())) {
            this.directoryContent=new ReferenceList(contextResponse.getEntity());
          }
        }
        if (this.baseName != null) {
          this.baseVariant=new Variant();
          Entity.updateMetadata(this.baseName,this.baseVariant,true,getMetadataService());
          this.protoVariant=new Variant();
          Entity.updateMetadata(this.baseName,this.protoVariant,false,getMetadataService());
          this.baseName=Entity.getBaseName(this.baseName,getMetadataService());
        }
        List<Variant> variants=getVariants(Method.GET);
        if ((variants == null) || (variants.isEmpty())) {
          setExisting(false);
        }
      }
      if (isExisting() && !this.directory.isDeeplyAccessible()) {
        int index=this.relativePart.indexOf("/");
        if (index != -1) {
          index=this.relativePart.indexOf("/",index);
          setExisting((index == -1));
        }
      }
    }
    getLogger().info("Converted target URI: " + this.targetUri);
    getLogger().fine("Converted base name : " + this.baseName);
  }
 catch (  IOException ioe) {
    throw new ResourceException(ioe);
  }
}
