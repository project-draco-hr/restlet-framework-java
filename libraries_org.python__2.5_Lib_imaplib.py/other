'IMAP4 client.\n\nBased on RFC 2060.\n\nPublic class:           IMAP4\nPublic variable:        Debug\nPublic functions:       Internaldate2tuple\n                        Int2AP\n                        ParseFlags\n                        Time2Internaldate\n'
__version__ = '2.58'
import binascii, os, random, re, socket, sys, time
__all__ = ['IMAP4', 'IMAP4_SSL', 'IMAP4_stream', 'Internaldate2tuple', 'Int2AP', 'ParseFlags', 'Time2Internaldate']
CRLF = '\r\n'
Debug = 0
IMAP4_PORT = 143
IMAP4_SSL_PORT = 993
AllowedVersions = ('IMAP4REV1', 'IMAP4')
Commands = {'APPEND': ('AUTH', 'SELECTED'), 'AUTHENTICATE': ('NONAUTH',), 'CAPABILITY': ('NONAUTH', 'AUTH', 'SELECTED', 'LOGOUT'), 'CHECK': ('SELECTED',), 'CLOSE': ('SELECTED',), 'COPY': ('SELECTED',), 'CREATE': ('AUTH', 'SELECTED'), 'DELETE': ('AUTH', 'SELECTED'), 'DELETEACL': ('AUTH', 'SELECTED'), 'EXAMINE': ('AUTH', 'SELECTED'), 'EXPUNGE': ('SELECTED',), 'FETCH': ('SELECTED',), 'GETACL': ('AUTH', 'SELECTED'), 'GETANNOTATION': ('AUTH', 'SELECTED'), 'GETQUOTA': ('AUTH', 'SELECTED'), 'GETQUOTAROOT': ('AUTH', 'SELECTED'), 'MYRIGHTS': ('AUTH', 'SELECTED'), 'LIST': ('AUTH', 'SELECTED'), 'LOGIN': ('NONAUTH',), 'LOGOUT': ('NONAUTH', 'AUTH', 'SELECTED', 'LOGOUT'), 'LSUB': ('AUTH', 'SELECTED'), 'NAMESPACE': ('AUTH', 'SELECTED'), 'NOOP': ('NONAUTH', 'AUTH', 'SELECTED', 'LOGOUT'), 'PARTIAL': ('SELECTED',), 'PROXYAUTH': ('AUTH',), 'RENAME': ('AUTH', 'SELECTED'), 'SEARCH': ('SELECTED',), 'SELECT': ('AUTH', 'SELECTED'), 'SETACL': ('AUTH', 'SELECTED'), 'SETANNOTATION': ('AUTH', 'SELECTED'), 'SETQUOTA': ('AUTH', 'SELECTED'), 'SORT': ('SELECTED',), 'STATUS': ('AUTH', 'SELECTED'), 'STORE': ('SELECTED',), 'SUBSCRIBE': ('AUTH', 'SELECTED'), 'THREAD': ('SELECTED',), 'UID': ('SELECTED',), 'UNSUBSCRIBE': ('AUTH', 'SELECTED'), }
Continuation = re.compile('\\+( (?P<data>.*))?')
Flags = re.compile('.*FLAGS \\((?P<flags>[^\\)]*)\\)')
InternalDate = re.compile('.*INTERNALDATE "(?P<day>[ 0123][0-9])-(?P<mon>[A-Z][a-z][a-z])-(?P<year>[0-9][0-9][0-9][0-9]) (?P<hour>[0-9][0-9]):(?P<min>[0-9][0-9]):(?P<sec>[0-9][0-9]) (?P<zonen>[-+])(?P<zoneh>[0-9][0-9])(?P<zonem>[0-9][0-9])"')
Literal = re.compile('.*{(?P<size>\\d+)}$')
MapCRLF = re.compile('\\r\\n|\\r|\\n')
Response_code = re.compile('\\[(?P<type>[A-Z-]+)( (?P<data>[^\\]]*))?\\]')
Untagged_response = re.compile('\\* (?P<type>[A-Z-]+)( (?P<data>.*))?')
Untagged_status = re.compile('\\* (?P<data>\\d+) (?P<type>[A-Z-]+)( (?P<data2>.*))?')
Mon2num = {'Jan': 1, 'Feb': 2, 'Mar': 3, 'Apr': 4, 'May': 5, 'Jun': 6, 'Jul': 7, 'Aug': 8, 'Sep': 9, 'Oct': 10, 'Nov': 11, 'Dec': 12, }
if (__name__ == '__main__'):
    import getopt, getpass
    try:
        (optlist, args) = getopt.getopt(sys.argv[1:], 'd:s:')
    except getopt.error as val:
        (optlist, args) = ((), ())
    stream_command = None
    for (opt, val) in optlist:
        if (opt == '-d'):
            Debug = int(val)
        elif (opt == '-s'):
            stream_command = val
            if (not args):
                args = (stream_command,)
    if (not args):
        args = ('',)
    host = args[0]
    USER = getpass.getuser()
    PASSWD = getpass.getpass(('IMAP password for %s on %s: ' % (USER, (host or 'localhost'))))
    test_mesg = ('From: %(user)s@localhost%(lf)sSubject: IMAP4 test%(lf)s%(lf)sdata...%(lf)s' % {'user': USER, 'lf': '\n', })
    test_seq1 = (('login', (USER, PASSWD)), ('create', ('/tmp/xxx 1',)), ('rename', ('/tmp/xxx 1', '/tmp/yyy')), ('CREATE', ('/tmp/yyz 2',)), ('append', ('/tmp/yyz 2', None, None, test_mesg)), ('list', ('/tmp', 'yy*')), ('select', ('/tmp/yyz 2',)), ('search', (None, 'SUBJECT', 'test')), ('fetch', ('1', '(FLAGS INTERNALDATE RFC822)')), ('store', ('1', 'FLAGS', '(\\Deleted)')), ('namespace', ()), ('expunge', ()), ('recent', ()), ('close', ()))
    test_seq2 = (('select', ()), ('response', ('UIDVALIDITY',)), ('uid', ('SEARCH', 'ALL')), ('response', ('EXISTS',)), ('append', (None, None, None, test_mesg)), ('recent', ()), ('logout', ()))

    def run(cmd, args):
        M._mesg(('%s %s' % (cmd, args)))
        (typ, dat) = getattr(M, cmd)(*args)
        M._mesg(('%s => %s %s' % (cmd, typ, dat)))
        if (typ == 'NO'):
            raise dat[0]
        return dat
    try:
        if stream_command:
            M = IMAP4_stream(stream_command)
        else:
            M = IMAP4(host)
        if (M.state == 'AUTH'):
            test_seq1 = test_seq1[1:]
        M._mesg(('PROTOCOL_VERSION = %s' % M.PROTOCOL_VERSION))
        M._mesg(('CAPABILITIES = %r' % (M.capabilities,)))
        for (cmd, args) in test_seq1:
            run(cmd, args)
        for ml in run('list', ('/tmp/', 'yy%')):
            mo = re.match('.*"([^"]+)"$', ml)
            if mo:
                path = mo.group(1)
            else:
                path = ml.split()[(-1)]
            run('delete', (path,))
        for (cmd, args) in test_seq2:
            dat = run(cmd, args)
            if ((cmd, args) != ('uid', ('SEARCH', 'ALL'))):
                continue
            uid = dat[(-1)].split()
            if (not uid):
                continue
            run('uid', ('FETCH', ('%s' % uid[(-1)]), '(FLAGS INTERNALDATE RFC822.SIZE RFC822.HEADER RFC822.TEXT)'))
        print '\nAll tests OK.'
    except:
        print '\nTests failed.'
        if (not Debug):
            print ('\nIf you would like to see debugging output,\ntry: %s -d5\n' % sys.argv[0])
        raise
