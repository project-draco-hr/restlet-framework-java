def xinclude():
    '\n    Basic inclusion example (XInclude C.1)\n\n    >>> from xml.etree import ElementTree as ET\n    >>> from xml.etree import ElementInclude\n\n    >>> document = xinclude_loader("C1.xml")\n    >>> ElementInclude.include(document, xinclude_loader)\n    >>> print serialize(ET, document) # C1\n    <document>\n      <p>120 Mz is adequate for an average home user.</p>\n      <disclaimer>\n      <p>The opinions represented herein represent those of the individual\n      and should not be interpreted as official policy endorsed by this\n      organization.</p>\n    </disclaimer>\n    </document>\n\n    Textual inclusion example (XInclude C.2)\n\n    >>> document = xinclude_loader("C2.xml")\n    >>> ElementInclude.include(document, xinclude_loader)\n    >>> print serialize(ET, document) # C2\n    <document>\n      <p>This document has been accessed\n      324387 times.</p>\n    </document>\n\n    Textual inclusion of XML example (XInclude C.3)\n\n    >>> document = xinclude_loader("C3.xml")\n    >>> ElementInclude.include(document, xinclude_loader)\n    >>> print serialize(ET, document) # C3\n    <document>\n      <p>The following is the source of the "data.xml" resource:</p>\n      <example>&lt;?xml version=\'1.0\'?&gt;\n    &lt;data&gt;\n      &lt;item&gt;&lt;![CDATA[Brooks &amp; Shields]]&gt;&lt;/item&gt;\n    &lt;/data&gt;\n    </example>\n    </document>\n\n    Fallback example (XInclude C.5)\n    Note! Fallback support is not yet implemented\n\n    >>> document = xinclude_loader("C5.xml")\n    >>> ElementInclude.include(document, xinclude_loader)\n    Traceback (most recent call last):\n    IOError: resource not found\n    >>> # print serialize(ET, document) # C5\n\n    '
