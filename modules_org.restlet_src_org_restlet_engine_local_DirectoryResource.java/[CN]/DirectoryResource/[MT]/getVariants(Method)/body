{
  List<Variant> result=super.getVariants(method);
  if ((Method.GET.equals(method) || Method.HEAD.equals(method)) && ((result == null) || result.isEmpty())) {
    getLogger().info("Getting variants for : " + getTargetUri());
    if ((this.directoryContent != null) && (getReference() != null) && (getReference().getBaseRef() != null)) {
      SortedSet<Representation> resultSet=new TreeSet<Representation>(getRepresentationsComparator());
      String baseRef=getReference().getBaseRef().toString(false,false);
      if (!baseRef.endsWith("/")) {
        baseRef+="/";
      }
      int lastIndex=this.relativePart.lastIndexOf("/");
      if (lastIndex != -1) {
        baseRef+=this.relativePart.substring(0,lastIndex);
      }
      int rootLength=getDirectoryUri().length();
      if (this.baseName != null) {
        String filePath;
        for (        Reference ref : getVariantsReferences()) {
          Response contextResponse=getRepresentation(ref.toString());
          if (contextResponse.getStatus().isSuccess() && (contextResponse.getEntity() != null)) {
            filePath=ref.toString(false,false).substring(rootLength);
            Representation rep=contextResponse.getEntity();
            if (filePath.startsWith("/")) {
              rep.setIdentifier(baseRef + filePath);
            }
 else {
              rep.setIdentifier(baseRef + "/" + filePath);
            }
            resultSet.add(rep);
          }
        }
      }
      if (!resultSet.isEmpty()) {
        if (result == null) {
          result=new ArrayList<Variant>();
        }
        result.addAll(resultSet);
      }
      if (resultSet.isEmpty()) {
        if (this.directoryTarget && getDirectory().isListingAllowed()) {
          ReferenceList userList=new ReferenceList(this.directoryContent.size());
          userList.setIdentifier(baseRef);
          SortedSet<Reference> sortedSet=new TreeSet<Reference>(getDirectory().getComparator());
          sortedSet.addAll(this.directoryContent);
          for (          Reference ref : sortedSet) {
            String filePart=ref.toString(false,false).substring(rootLength);
            StringBuilder filePath=new StringBuilder();
            if ((!baseRef.endsWith("/")) && (!filePart.startsWith("/"))) {
              filePath.append('/');
            }
            filePath.append(filePart);
            userList.add(baseRef + filePath);
          }
          List<Variant> list=getDirectory().getIndexVariants(userList);
          for (          Variant variant : list) {
            if (result == null) {
              result=new ArrayList<Variant>();
            }
            result.add(getDirectory().getIndexRepresentation(variant,userList));
          }
        }
      }
    }
 else     if (this.fileTarget && (this.fileContent != null)) {
      if (getOriginalRef() != null) {
        this.fileContent.setIdentifier(getRequest().getOriginalRef());
      }
 else {
        this.fileContent.setIdentifier(getReference());
      }
      if (result == null) {
        result=new ArrayList<Variant>();
      }
      result.add(this.fileContent);
    }
    super.getVariants().put(Method.GET,result);
  }
  return result;
}
