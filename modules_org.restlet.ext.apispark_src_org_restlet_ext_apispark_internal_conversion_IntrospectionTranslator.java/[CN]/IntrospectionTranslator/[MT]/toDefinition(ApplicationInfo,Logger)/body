{
  Definition result=null;
  if (application != null) {
    result=new Definition();
    result.setVersion(application.getVersion());
    Reference ref=application.getResources().getBaseRef();
    if (ref != null) {
      result.getEndpoints().add(new Endpoint(ref.getHostDomain(),ref.getHostPort(),ref.getSchemeProtocol().getSchemeName(),ref.getPath(),null));
    }
 else {
      result.getEndpoints().add(new Endpoint("example.com",80,Protocol.HTTP.getSchemeName(),"/v1",ChallengeScheme.HTTP_BASIC.getTechnicalName()));
    }
    Contract contract=new Contract();
    result.setContract(contract);
    contract.setDescription(toString(application.getDescription()));
    contract.setName(application.getName());
    if (contract.getName() == null || contract.getName().isEmpty()) {
      contract.setName(application.getClass().getName());
      logger.log(Level.WARNING,"Please provide a name to your application, used " + contract.getName() + " by default.");
    }
    logger.fine("Contract " + contract.getName() + " added.");
    Map<String,RepresentationInfo> mapReps=new HashMap<String,RepresentationInfo>();
    addResources(application,contract,application.getResources().getResources(),result.getEndpoints().get(0).computeUrl(),mapReps,logger);
    java.util.List<String> protocols=new ArrayList<String>();
    for (    ConnectorHelper<Server> helper : Engine.getInstance().getRegisteredServers()) {
      for (      Protocol protocol : helper.getProtocols()) {
        if (!protocols.contains(protocol.getName())) {
          logger.fine("Protocol " + protocol.getName() + " added.");
          protocols.add(protocol.getName());
        }
      }
    }
    for (    RepresentationInfo ri : application.getRepresentations()) {
      if (!mapReps.containsKey(ri.getIdentifier())) {
        mapReps.put(ri.getIdentifier(),ri);
      }
    }
    List<RepresentationInfo> toBeAdded=new ArrayList<RepresentationInfo>();
    for (    RepresentationInfo ri : mapReps.values()) {
      if (ri.isRaw()) {
        continue;
      }
      if (ri.isCollection() && !mapReps.containsKey(ri.getType().getName())) {
        RepresentationInfo r=new RepresentationInfo(ri.getMediaType());
        r.setType(ri.getType());
        toBeAdded.add(r);
      }
      Class<?> parentType=ri.getType().getSuperclass();
      if (parentType != null && ReflectUtils.isJdkClass(parentType)) {
        parentType=null;
      }
      if (parentType != null && !mapReps.containsKey(parentType.getName())) {
        RepresentationInfo r=new RepresentationInfo(ri.getMediaType());
        r.setType(parentType);
        toBeAdded.add(r);
      }
      for (      PropertyInfo pi : ri.getProperties()) {
        if (pi.getType() != null && !mapReps.containsKey(pi.getType().getName()) && !toBeAdded.contains(pi.getType())) {
          RepresentationInfo r=new RepresentationInfo(ri.getMediaType());
          r.setType(pi.getType());
          toBeAdded.add(r);
        }
      }
    }
    while (!toBeAdded.isEmpty()) {
      RepresentationInfo[] tab=new RepresentationInfo[toBeAdded.size()];
      toBeAdded.toArray(tab);
      toBeAdded.clear();
      for (int i=0; i < tab.length; i++) {
        RepresentationInfo current=tab[i];
        if (!current.isRaw() && !ReflectUtils.isJdkClass(current.getType())) {
          if (!mapReps.containsKey(current.getName())) {
            RepresentationInfo ri=RepresentationInfo.introspect(current.getType(),null,current.getMediaType());
            mapReps.put(ri.getIdentifier(),ri);
            Class<?> parentType=ri.getType().getSuperclass();
            if (parentType != null && ReflectUtils.isJdkClass(parentType)) {
              parentType=null;
            }
            if (parentType != null && !mapReps.containsKey(parentType.getName())) {
              RepresentationInfo r=new RepresentationInfo(ri.getMediaType());
              r.setType(parentType);
              toBeAdded.add(r);
            }
            for (            PropertyInfo prop : ri.getProperties()) {
              if (prop.getType() != null && !mapReps.containsKey(prop.getType().getName()) && !toBeAdded.contains(prop.getType())) {
                RepresentationInfo r=new RepresentationInfo(ri.getMediaType());
                r.setType(prop.getType());
                toBeAdded.add(r);
              }
            }
          }
        }
      }
    }
    Section section=new Section();
    if (contract.getSections().isEmpty()) {
      section=new Section();
      section.setName("All resources");
      contract.getSections().add(section);
    }
 else {
      section=contract.getSections().get(0);
    }
    for (    RepresentationInfo ri : mapReps.values()) {
      if (ri.isCollection()) {
        continue;
      }
      logger.fine("Representation " + ri.getName() + " added.");
      Representation representation=new Representation();
      representation.setDescription(toString(ri.getDescription()));
      representation.setName(ri.getName());
      representation.setProperties(new ArrayList<Property>());
      for (      PropertyInfo pi : ri.getProperties()) {
        logger.fine("Property " + pi.getName() + " added.");
        Property p=new Property();
        p.setDefaultValue(pi.getDefaultValue());
        p.setDescription(pi.getDescription());
        p.setMax(pi.getMax());
        p.setMaxOccurs(pi.getMaxOccurs());
        p.setMin(pi.getMin());
        p.setMinOccurs(pi.getMinOccurs());
        p.setName(pi.getName());
        p.setEnumeration(pi.getEnumeration());
        if (pi.getType() != null) {
          String type=pi.getType().getSimpleName();
          if (isPrimitiveType(type)) {
            p.setType(convertPrimitiveTypes(pi.getType().getSimpleName()));
          }
 else {
            p.setType(type);
          }
        }
        p.setUniqueItems(pi.isUniqueItems());
        representation.getProperties().add(p);
      }
      representation.setRaw(ri.isRaw() || ReflectUtils.isJdkClass(ri.getType()));
      representation.getSections().add(section.getName());
      contract.getRepresentations().add(representation);
    }
  }
  IntrospectionUtils.sortDefinition(result);
  return result;
}
