{
  final ClientInfo result=super.getClientInfo();
  if (!this.clientAdded) {
    if (getHeaders() != null) {
      final String acceptCharset=getHeaders().getValues(HeaderConstants.HEADER_ACCEPT_CHARSET);
      final String acceptEncoding=getHeaders().getValues(HeaderConstants.HEADER_ACCEPT_ENCODING);
      final String acceptLanguage=getHeaders().getValues(HeaderConstants.HEADER_ACCEPT_LANGUAGE);
      final String acceptMediaType=getHeaders().getValues(HeaderConstants.HEADER_ACCEPT);
      try {
        PreferenceReader.readCharacterSets(acceptCharset,result);
      }
 catch (      Exception e) {
        this.context.getLogger().log(Level.INFO,e.getMessage());
      }
      try {
        PreferenceReader.readEncodings(acceptEncoding,result);
      }
 catch (      Exception e) {
        this.context.getLogger().log(Level.INFO,e.getMessage());
      }
      try {
        PreferenceReader.readLanguages(acceptLanguage,result);
      }
 catch (      Exception e) {
        this.context.getLogger().log(Level.INFO,e.getMessage());
      }
      try {
        PreferenceReader.readMediaTypes(acceptMediaType,result);
      }
 catch (      Exception e) {
        this.context.getLogger().log(Level.INFO,e.getMessage());
      }
      result.setAgent(getHeaders().getValues(HeaderConstants.HEADER_USER_AGENT));
      result.setFrom(getHeaders().getValues(HeaderConstants.HEADER_FROM));
      result.setAddress(getConnection().getAddress());
      result.setPort(getConnection().getPort());
      if (userPrincipal != null) {
        result.getPrincipals().add(userPrincipal);
      }
      if (this.context != null) {
        final boolean useForwardedForHeader=Boolean.parseBoolean(this.context.getParameters().getFirstValue("useForwardedForHeader",false));
        if (useForwardedForHeader) {
          final String header=getHeaders().getValues(HeaderConstants.HEADER_X_FORWARDED_FOR);
          if (header != null) {
            final String[] addresses=header.split(",");
            for (int i=0; i < addresses.length; i++) {
              String address=addresses[i].trim();
              result.getForwardedAddresses().add(address);
            }
          }
        }
      }
    }
    this.clientAdded=true;
  }
  return result;
}
