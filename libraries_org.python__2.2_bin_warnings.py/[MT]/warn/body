def warn(message, category=None, stacklevel=1):
    'Issue a warning, or maybe ignore it or raise an exception.'
    if (category is None):
        category = UserWarning
    assert issubclass(category, Warning)
    try:
        caller = sys._getframe(stacklevel)
    except ValueError:
        globals = sys.__dict__
        lineno = 1
    else:
        globals = caller.f_globals
        lineno = caller.f_lineno
    if globals.has_key('__name__'):
        module = globals['__name__']
    else:
        module = '<string>'
    filename = globals.get('__file__')
    if filename:
        fnl = filename.lower()
        if (fnl.endswith('.pyc') or fnl.endswith('.pyo')):
            filename = filename[:(-1)]
    else:
        if (module == '__main__'):
            filename = sys.argv[0]
        if (not filename):
            filename = module
    registry = globals.setdefault('__warningregistry__', {})
    warn_explicit(message, category, filename, lineno, module, registry)
