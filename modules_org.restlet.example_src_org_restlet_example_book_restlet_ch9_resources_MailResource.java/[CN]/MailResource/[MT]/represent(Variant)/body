{
  Map<String,Object> dataModel=new TreeMap<String,Object>();
  dataModel.put("currentUser",getCurrentUser());
  dataModel.put("mailbox",mailbox);
  if (mail.getRecipients() != null) {
    StringBuilder builder=new StringBuilder();
    for (Iterator<Contact> iterator=mail.getRecipients().iterator(); iterator.hasNext(); ) {
      Contact contact=iterator.next();
      builder.append(contact.getName());
      if (iterator.hasNext()) {
        builder.append(", ");
      }
    }
    dataModel.put("recipients",builder.toString());
  }
  if (mail.getTags() != null) {
    StringBuilder builder=new StringBuilder();
    for (Iterator<String> iterator=mail.getTags().iterator(); iterator.hasNext(); ) {
      String tag=iterator.next();
      builder.append(tag);
      if (iterator.hasNext()) {
        builder.append(" ");
      }
    }
    dataModel.put("tags",builder.toString());
  }
  dataModel.put("mail",mail);
  List<String> statuses=new ArrayList<String>();
  statuses.add(Mail.STATUS_SENDING);
  statuses.add(Mail.STATUS_DRAFT);
  statuses.add(Mail.STATUS_SENT);
  statuses.add(Mail.STATUS_RECEIVING);
  statuses.add(Mail.STATUS_RECEIVED);
  dataModel.put("statuses",statuses);
  dataModel.put("resourceRef",getRequest().getResourceRef());
  dataModel.put("rootRef",getRequest().getRootRef());
  TemplateRepresentation representation=new TemplateRepresentation("mail.html",getFmcConfiguration(),dataModel,variant.getMediaType());
  return representation;
}
