def _parse(self, file, fp):
    lexer = shlex.shlex(fp)
    lexer.wordchars += '!"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~'
    while 1:
        toplevel = tt = lexer.get_token()
        if (not tt):
            break
        elif (tt == 'machine'):
            entryname = lexer.get_token()
        elif (tt == 'default'):
            entryname = 'default'
        elif (tt == 'macdef'):
            entryname = lexer.get_token()
            self.macros[entryname] = []
            lexer.whitespace = ' \t'
            while 1:
                line = lexer.instream.readline()
                if ((not line) or (line == '\n')):
                    lexer.whitespace = ' \t\r\n'
                    break
                self.macros[entryname].append(line)
            continue
        else:
            raise NetrcParseError(('bad toplevel token %r' % tt), file, lexer.lineno)
        login = ''
        account = password = None
        self.hosts[entryname] = {}
        while 1:
            tt = lexer.get_token()
            if ((tt == '') or (tt == 'machine') or (tt == 'default') or (tt == 'macdef')):
                if password:
                    self.hosts[entryname] = (login, account, password)
                    lexer.push_token(tt)
                    break
                else:
                    raise NetrcParseError(('malformed %s entry %s terminated by %s' % (toplevel, entryname, repr(tt))), file, lexer.lineno)
            elif ((tt == 'login') or (tt == 'user')):
                login = lexer.get_token()
            elif (tt == 'account'):
                account = lexer.get_token()
            elif (tt == 'password'):
                password = lexer.get_token()
            else:
                raise NetrcParseError(('bad follower token %r' % tt), file, lexer.lineno)
