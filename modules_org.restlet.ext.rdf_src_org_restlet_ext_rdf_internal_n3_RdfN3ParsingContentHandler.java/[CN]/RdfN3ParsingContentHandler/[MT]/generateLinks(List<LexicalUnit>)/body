{
  Object currentSubject=null;
  Reference currentPredicate=null;
  Object currentObject=null;
  int nbTokens=0;
  boolean swapSubjectObject=false;
  for (int i=0; i < lexicalUnits.size(); i++) {
    LexicalUnit lexicalUnit=lexicalUnits.get(i);
    nbTokens++;
switch (nbTokens) {
case 1:
      if (",".equals(lexicalUnit.getValue())) {
        nbTokens++;
      }
 else       if (!";".equals(lexicalUnit.getValue())) {
        currentSubject=lexicalUnit.resolve();
      }
    break;
case 2:
  if ("is".equalsIgnoreCase(lexicalUnit.getValue())) {
    nbTokens--;
    swapSubjectObject=true;
  }
 else   if ("has".equalsIgnoreCase(lexicalUnit.getValue())) {
    nbTokens--;
  }
 else   if ("=".equalsIgnoreCase(lexicalUnit.getValue())) {
    currentPredicate=RdfRepresentation.PREDICATE_SAME;
  }
 else   if ("=>".equalsIgnoreCase(lexicalUnit.getValue())) {
    currentPredicate=RdfRepresentation.PREDICATE_IMPLIES;
  }
 else   if ("<=".equalsIgnoreCase(lexicalUnit.getValue())) {
    swapSubjectObject=true;
    currentPredicate=RdfRepresentation.PREDICATE_IMPLIES;
  }
 else   if ("a".equalsIgnoreCase(lexicalUnit.getValue())) {
    currentPredicate=RdfRepresentation.PREDICATE_TYPE;
  }
 else   if ("!".equalsIgnoreCase(lexicalUnit.getValue())) {
    currentObject=new BlankNodeToken(RdfN3ParsingContentHandler.newBlankNodeId()).resolve();
    currentPredicate=getPredicate(lexicalUnits.get(++i));
    this.link(currentSubject,currentPredicate,currentObject);
    currentSubject=currentObject;
    nbTokens=1;
  }
 else   if ("^".equalsIgnoreCase(lexicalUnit.getValue())) {
    currentObject=currentSubject;
    currentPredicate=getPredicate(lexicalUnits.get(++i));
    currentSubject=new BlankNodeToken(RdfN3ParsingContentHandler.newBlankNodeId()).resolve();
    this.link(currentSubject,currentPredicate,currentObject);
    nbTokens=1;
  }
 else {
    currentPredicate=getPredicate(lexicalUnit);
  }
break;
case 3:
if ("of".equalsIgnoreCase(lexicalUnit.getValue())) {
nbTokens--;
}
 else {
if (swapSubjectObject) {
  currentObject=currentSubject;
  currentSubject=lexicalUnit.resolve();
}
 else {
  currentObject=lexicalUnit.resolve();
}
this.link(currentSubject,currentPredicate,currentObject);
nbTokens=0;
swapSubjectObject=false;
}
break;
default :
break;
}
}
}
