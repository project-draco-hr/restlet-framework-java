{
  List<LexicalUnit> lexicalUnits=new ArrayList<LexicalUnit>();
  do {
    consumeWhiteSpaces();
switch (getChar()) {
case '(':
      lexicalUnits.add(new ListToken(this,context));
    break;
case '<':
  if (step() == '=') {
    lexicalUnits.add(new Token("<="));
    step();
    discard();
  }
 else {
    stepBack();
    lexicalUnits.add(new UriToken(this,context));
  }
break;
case '_':
lexicalUnits.add(new BlankNodeToken(parseToken()));
break;
case '"':
lexicalUnits.add(new StringToken(this,context));
break;
case '[':
lexicalUnits.add(new BlankNodeToken(this,context));
break;
case '!':
lexicalUnits.add(new Token("!"));
step();
discard();
break;
case '^':
lexicalUnits.add(new Token("^"));
step();
discard();
break;
case '=':
if (step() == '>') {
lexicalUnits.add(new Token("=>"));
step();
discard();
}
 else {
lexicalUnits.add(new Token("="));
discard();
}
break;
case '@':
step();
discard();
lexicalUnits.add(new Token(this,context));
discard();
break;
case ';':
step();
discard();
lexicalUnits.add(new Token(";"));
break;
case ',':
step();
discard();
lexicalUnits.add(new Token(","));
break;
case '{':
lexicalUnits.add(new FormulaToken(this,context));
break;
case '.':
break;
case RdfN3ParsingContentHandler.EOF:
break;
default :
lexicalUnits.add(new Token(this,context));
break;
}
}
 while (getChar() != RdfN3ParsingContentHandler.EOF && getChar() != '.' && getChar() != '}');
generateLinks(lexicalUnits);
}
