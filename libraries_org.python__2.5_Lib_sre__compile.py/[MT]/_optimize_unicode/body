def _optimize_unicode(charset, fixup):
    return charset
    try:
        import array
    except ImportError:
        return charset
    charmap = ([0] * 65536)
    negate = 0
    try:
        for (op, av) in charset:
            if (op is NEGATE):
                negate = 1
            elif (op is LITERAL):
                charmap[fixup(av)] = 1
            elif (op is RANGE):
                for i in xrange(fixup(av[0]), (fixup(av[1]) + 1)):
                    charmap[i] = 1
            elif (op is CATEGORY):
                return charset
    except IndexError:
        return charset
    if negate:
        if (sys.maxunicode != 65535):
            return charset
        for i in xrange(65536):
            charmap[i] = (not charmap[i])
    comps = {}
    mapping = ([0] * 256)
    block = 0
    data = []
    for i in xrange(256):
        chunk = tuple(charmap[(i * 256):((i + 1) * 256)])
        new = comps.setdefault(chunk, block)
        mapping[i] = new
        if (new == block):
            block = (block + 1)
            data = (data + _mk_bitmap(chunk))
    header = [block]
    if (_sre.CODESIZE == 2):
        code = 'H'
    else:
        code = 'i'
    mapping = array.array('b', mapping).tostring()
    mapping = array.array(code, mapping)
    assert (mapping.itemsize == _sre.CODESIZE)
    header = (header + mapping.tolist())
    data[0:0] = header
    return [(BIGCHARSET, data)]
