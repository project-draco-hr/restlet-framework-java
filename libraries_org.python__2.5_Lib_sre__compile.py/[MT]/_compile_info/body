def _compile_info(code, pattern, flags):
    (lo, hi) = pattern.getwidth()
    if (lo == 0):
        return
    prefix = []
    prefixappend = prefix.append
    prefix_skip = 0
    charset = []
    charsetappend = charset.append
    if (not (flags & SRE_FLAG_IGNORECASE)):
        for (op, av) in pattern.data:
            if (op is LITERAL):
                if (len(prefix) == prefix_skip):
                    prefix_skip = (prefix_skip + 1)
                prefixappend(av)
            elif ((op is SUBPATTERN) and (len(av[1]) == 1)):
                (op, av) = av[1][0]
                if (op is LITERAL):
                    prefixappend(av)
                else:
                    break
            else:
                break
        if ((not prefix) and pattern.data):
            (op, av) = pattern.data[0]
            if ((op is SUBPATTERN) and av[1]):
                (op, av) = av[1][0]
                if (op is LITERAL):
                    charsetappend((op, av))
                elif (op is BRANCH):
                    c = []
                    cappend = c.append
                    for p in av[1]:
                        if (not p):
                            break
                        (op, av) = p[0]
                        if (op is LITERAL):
                            cappend((op, av))
                        else:
                            break
                    else:
                        charset = c
            elif (op is BRANCH):
                c = []
                cappend = c.append
                for p in av[1]:
                    if (not p):
                        break
                    (op, av) = p[0]
                    if (op is LITERAL):
                        cappend((op, av))
                    else:
                        break
                else:
                    charset = c
            elif (op is IN):
                charset = av
    emit = code.append
    emit(OPCODES[INFO])
    skip = len(code)
    emit(0)
    mask = 0
    if prefix:
        mask = SRE_INFO_PREFIX
        if (len(prefix) == prefix_skip == len(pattern.data)):
            mask = (mask + SRE_INFO_LITERAL)
    elif charset:
        mask = (mask + SRE_INFO_CHARSET)
    emit(mask)
    if (lo < MAXCODE):
        emit(lo)
    else:
        emit(MAXCODE)
        prefix = prefix[:MAXCODE]
    if (hi < MAXCODE):
        emit(hi)
    else:
        emit(0)
    if prefix:
        emit(len(prefix))
        emit(prefix_skip)
        code.extend(prefix)
        table = ([(-1)] + ([0] * len(prefix)))
        for i in xrange(len(prefix)):
            table[(i + 1)] = (table[i] + 1)
            while ((table[(i + 1)] > 0) and (prefix[i] != prefix[(table[(i + 1)] - 1)])):
                table[(i + 1)] = (table[(table[(i + 1)] - 1)] + 1)
        code.extend(table[1:])
    elif charset:
        _compile_charset(charset, flags, code)
    code[skip] = (len(code) - skip)
