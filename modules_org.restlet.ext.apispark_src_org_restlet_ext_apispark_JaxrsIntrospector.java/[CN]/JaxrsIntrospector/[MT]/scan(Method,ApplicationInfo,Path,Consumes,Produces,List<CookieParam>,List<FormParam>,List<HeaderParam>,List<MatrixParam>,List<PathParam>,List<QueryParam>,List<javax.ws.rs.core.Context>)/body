{
  MethodInfo mi=new MethodInfo();
  for (  FormParam formparam : formparamList) {
    addRepresentation(mi,formparam);
  }
  Path path=method.getAnnotation(Path.class);
  String fullPath=getPath(cPath,path);
  ResourceInfo resource=null;
  for (  ResourceInfo ri : info.getResources().getResources()) {
    if (fullPath.equals(ri.getPath())) {
      resource=ri;
      break;
    }
  }
  if (resource == null) {
    resource=new ResourceInfo();
    resource.setIdentifier(fullPath);
    resource.setPath(fullPath);
    info.getResources().getResources().add(resource);
  }
  resource.getMethods().add(mi);
  PathParam pathparam=method.getAnnotation(PathParam.class);
  if (pathparam != null) {
    pathparamList.add(pathparam);
    ParameterInfo pi=new ParameterInfo(pathparam.value(),ParameterStyle.TEMPLATE,"Path parameter: " + pathparam.value());
    pi.setRequired(true);
    resource.getParameters().add(pi);
  }
 else {
    Template template=new Template(fullPath);
    for (    String var : template.getVariableNames()) {
      boolean found=false;
      for (      ParameterInfo pi : resource.getParameters()) {
        if (pi.getStyle().equals(ParameterStyle.TEMPLATE) && var.equals(pi.getName())) {
          found=true;
          break;
        }
      }
      if (!found) {
        ParameterInfo pi=new ParameterInfo(var,ParameterStyle.TEMPLATE,"Path parameter: " + var);
        pi.setRequired(true);
        resource.getParameters().add(pi);
      }
    }
  }
  CookieParam cookieparam=method.getAnnotation(CookieParam.class);
  if (cookieparam != null) {
    ParameterInfo pi=new ParameterInfo(cookieparam.value(),ParameterStyle.COOKIE,"Cookie parameter: " + cookieparam.value());
    mi.getParameters().add(pi);
  }
  Encoded encoded=method.getAnnotation(Encoded.class);
  FormParam formparam=method.getAnnotation(FormParam.class);
  addRepresentation(mi,formparam);
  HeaderParam headerparam=method.getAnnotation(HeaderParam.class);
  if (headerparam != null) {
    ParameterInfo pi=new ParameterInfo(headerparam.value(),ParameterStyle.HEADER,"Header parameter: " + cookieparam.value());
    mi.getParameters().add(pi);
  }
  MatrixParam matrixparam=method.getAnnotation(MatrixParam.class);
  if (matrixparam != null) {
    ParameterInfo pi=new ParameterInfo(matrixparam.value(),ParameterStyle.MATRIX,"Matrix parameter: " + cookieparam.value());
    mi.getParameters().add(pi);
  }
  QueryParam queryparam=method.getAnnotation(QueryParam.class);
  if (queryparam != null) {
    ParameterInfo pi=new ParameterInfo(queryparam.value(),ParameterStyle.QUERY,"Query parameter: " + cookieparam.value());
    mi.getParameters().add(pi);
  }
  DefaultValue defaultvalue=method.getAnnotation(DefaultValue.class);
  if (defaultvalue != null) {
    System.out.println("defaultvalue " + defaultvalue.value());
  }
  DELETE delete=method.getAnnotation(DELETE.class);
  GET get=method.getAnnotation(GET.class);
  HEAD head=method.getAnnotation(HEAD.class);
  OPTIONS options=method.getAnnotation(OPTIONS.class);
  POST post=method.getAnnotation(POST.class);
  PUT put=method.getAnnotation(PUT.class);
  HttpMethod httpmethod=method.getAnnotation(HttpMethod.class);
  if (delete != null) {
    mi.setMethod(org.restlet.data.Method.DELETE);
  }
 else   if (get != null) {
    mi.setMethod(org.restlet.data.Method.GET);
  }
 else   if (head != null) {
    mi.setMethod(org.restlet.data.Method.HEAD);
  }
 else   if (httpmethod != null) {
    mi.setMethod(org.restlet.data.Method.valueOf(httpmethod.value()));
  }
 else   if (options != null) {
    mi.setMethod(org.restlet.data.Method.OPTIONS);
  }
 else   if (post != null) {
    mi.setMethod(org.restlet.data.Method.POST);
  }
 else   if (put != null) {
    mi.setMethod(org.restlet.data.Method.PUT);
  }
  Produces produces=method.getAnnotation(Produces.class);
  if (produces == null) {
    produces=cProduces;
  }
  Class<?> outputClass=method.getReturnType();
  if (produces != null && outputClass != null && !Void.class.equals(outputClass)) {
    for (    String produce : produces.value()) {
      Variant variant=new Variant(MediaType.valueOf(produce));
      RepresentationInfo representationInfo=null;
      if (javax.ws.rs.core.Response.class.isAssignableFrom(outputClass)) {
        representationInfo=new RepresentationInfo(variant);
        representationInfo.setType(org.restlet.representation.Representation.class);
        representationInfo.setIdentifier(representationInfo.getType().getCanonicalName());
        representationInfo.setName(representationInfo.getType().getSimpleName());
        representationInfo.setRaw(true);
      }
 else {
        representationInfo=RepresentationInfo.describe(mi,outputClass,method.getGenericReturnType(),variant);
      }
      mi.getResponse().getRepresentations().add(representationInfo);
    }
  }
  Consumes consumes=method.getAnnotation(Consumes.class);
  if (consumes == null) {
    consumes=cConsumes;
  }
  Annotation[][] parameterAnnotations=method.getParameterAnnotations();
  Class<?>[] parameterTypes=method.getParameterTypes();
  int i=0;
  for (  Annotation[] annotations : parameterAnnotations) {
    Class<?> parameterType=parameterTypes[i];
    scan(annotations,parameterType,method.getGenericParameterTypes()[i],info,resource,mi,consumes);
    i++;
  }
}
