'Module symbol-table generator'
from compiler import ast
from compiler.consts import SC_LOCAL, SC_GLOBAL, SC_FREE, SC_CELL, SC_UNKNOWN
from compiler.misc import mangle
import types
import sys
MANGLE_LEN = 256
if (__name__ == '__main__'):
    import sys
    from compiler import parseFile, walk
    import symtable

    def get_names(syms):
        return [s for s in [s.get_name() for s in syms.get_symbols()] if (not (s.startswith('_[') or s.startswith('.')))]
    for file in sys.argv[1:]:
        print file
        f = open(file)
        buf = f.read()
        f.close()
        syms = symtable.symtable(buf, file, 'exec')
        mod_names = get_names(syms)
        tree = parseFile(file)
        s = SymbolVisitor()
        walk(tree, s)
        names2 = s.scopes[tree].get_names()
        if (not list_eq(mod_names, names2)):
            print 
            print 'oops', file
            print sorted(mod_names)
            print sorted(names2)
            sys.exit((-1))
        d = {}
        d.update(s.scopes)
        del d[tree]
        scopes = d.values()
        del d
        for s in syms.get_symbols():
            if s.is_namespace():
                l = [sc for sc in scopes if (sc.name == s.get_name())]
                if (len(l) > 1):
                    print 'skipping', s.get_name()
                elif (not list_eq(get_names(s.get_namespace()), l[0].get_names())):
                    print s.get_name()
                    print sorted(get_names(s.get_namespace()))
                    print sorted(l[0].get_names())
                    sys.exit((-1))
