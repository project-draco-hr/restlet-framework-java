def visitClass(self, node, parent):
    parent.add_def(node.name)
    for n in node.bases:
        self.visit(n, parent)
    scope = ClassScope(node.name, self.module)
    if (parent.nested or isinstance(parent, FunctionScope)):
        scope.nested = 1
    if (node.doc is not None):
        scope.add_def('__doc__')
    scope.add_def('__module__')
    self.scopes[node] = scope
    prev = self.klass
    self.klass = node.name
    self.visit(node.code, scope)
    self.klass = prev
    self.handle_free_vars(scope, parent)
