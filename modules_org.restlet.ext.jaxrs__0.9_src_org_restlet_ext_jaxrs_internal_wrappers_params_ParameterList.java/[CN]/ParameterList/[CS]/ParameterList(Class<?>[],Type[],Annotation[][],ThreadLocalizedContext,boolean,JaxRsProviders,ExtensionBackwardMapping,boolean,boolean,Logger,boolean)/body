{
  this.paramCount=parameterTypes.length;
  this.parameters=new ParamGetter[this.paramCount];
  boolean entityAlreadyRead=false;
  int entityPosition=-1;
  for (int i=0; i < this.paramCount; i++) {
    final Class<?> parameterType=parameterTypes[i];
    final Type genParamType=genParamTypes[i];
    final Annotation[] paramAnnos=paramAnnoss[i];
    final Context conntextAnno=getAnno(paramAnnos,Context.class);
    if (conntextAnno != null) {
      if (parameterType.equals(UriInfo.class)) {
        this.parameters[i]=new UriInfoGetter(tlContext,allMustBeAvailable);
      }
 else {
        this.parameters[i]=new ContextHolder(ContextInjector.getInjectObject(parameterType,tlContext,jaxRsProviders,extensionBackwardMapping));
      }
      continue;
    }
    if (paramsAllowed) {
      final boolean leaveThisEncoded=getLeaveEncoded(paramAnnos);
      final DefaultValue defValue=getAnno(paramAnnos,DefaultValue.class);
      final CookieParam cookieParam=getAnno(paramAnnos,CookieParam.class);
      final HeaderParam headerParam=getAnno(paramAnnos,HeaderParam.class);
      final MatrixParam matrixParam=getAnno(paramAnnos,MatrixParam.class);
      final PathParam pathParam=getAnno(paramAnnos,PathParam.class);
      final QueryParam queryParam=getAnno(paramAnnos,QueryParam.class);
      final FormParam formParam=getAnno(paramAnnos,FormParam.class);
      if (pathParam != null) {
        this.parameters[i]=new PathParamGetter(pathParam,defValue,parameterType,genParamType,tlContext,leaveAllEncoded || leaveThisEncoded);
        continue;
      }
 else       if (cookieParam != null) {
        this.parameters[i]=new CookieParamGetter(cookieParam,defValue,parameterType,genParamType,tlContext,leaveThisEncoded);
        continue;
      }
 else       if (headerParam != null) {
        this.parameters[i]=new HeaderParamGetter(headerParam,defValue,parameterType,genParamType,tlContext,leaveThisEncoded);
        continue;
      }
 else       if (matrixParam != null) {
        this.parameters[i]=new MatrixParamGetter(matrixParam,defValue,parameterType,genParamType,tlContext,leaveAllEncoded || leaveThisEncoded);
        continue;
      }
 else       if (queryParam != null) {
        this.parameters[i]=new QueryParamGetter(queryParam,defValue,parameterType,genParamType,tlContext,leaveAllEncoded || leaveThisEncoded);
        continue;
      }
 else       if (formParam != null) {
        this.parameters[i]=new FormParamGetter(formParam,defValue,parameterType,genParamType,tlContext,leaveAllEncoded || leaveThisEncoded);
        continue;
      }
    }
    if (!entityAllowed) {
      throw new MissingAnnotationException("All parameters requires one of the following annotations: " + VALID_ANNOTATIONS);
    }
    if (entityAlreadyRead) {
      throw new MissingAnnotationException("The entity is already read.  The " + i + ". parameter requires one of "+ "the following annotations: "+ VALID_ANNOTATIONS);
    }
    if (Representation.class.isAssignableFrom(parameterType)) {
      this.parameters[i]=ReprEntityGetter.create(parameterType,genParamType,logger);
    }
    if (this.parameters[i] == null) {
      this.parameters[i]=new EntityGetter(parameterType,genParamType,tlContext,jaxRsProviders,paramAnnos);
    }
    entityPosition=i;
    entityAlreadyRead=true;
  }
  this.entityPosition=entityPosition;
}
