{
  try {
    if (call.getStatus() != null) {
      setResponseStatus(call.getStatus().getHttpCode());
      setResponseReasonPhrase(call.getStatus().getDescription());
switch (call.getStatus().getHttpCode()) {
case STATUS_SUCCESS_CREATED:
case STATUS_REDIRECTION_MULTIPLE_CHOICES:
case STATUS_REDIRECTION_MOVED_PERMANENTLY:
case STATUS_REDIRECTION_FOUND:
case STATUS_REDIRECTION_SEE_OTHER:
case STATUS_REDIRECTION_TEMPORARY_REDIRECT:
        if ((call.getOutput() != null) && (call.getOutput().getMetadata().getMediaType().equals(MediaTypes.TEXT_URI))) {
          setResponseHeader(HEADER_LOCATION,call.getOutput().toString());
          call.setOutput(null);
        }
      break;
case STATUS_CLIENT_ERROR_UNAUTHORIZED:
    if ((call.getSecurity() != null) && (call.getSecurity().getChallengeRequest() != null)) {
      ChallengeRequest challenge=call.getSecurity().getChallengeRequest();
      setResponseHeader(HEADER_WWW_AUTHENTICATE,challenge.getScheme().getTechnicalName() + " realm=\"" + challenge.getRealm()+ '"');
    }
  break;
}
}
for (Iterator iter=call.getCookieSettings().iterator(); iter.hasNext(); ) {
setResponseCookie((CookieSetting)iter.next());
}
if (call.getOutput() != null) {
RepresentationMetadata meta=call.getOutput().getMetadata();
if (meta.getMediaType() != null) {
StringBuilder contentType=new StringBuilder(meta.getMediaType().getName());
if (meta.getCharacterSet() != null) {
  contentType.append("; charset=").append(meta.getCharacterSet().getName());
}
setResponseHeader(HEADER_CONTENT_TYPE,contentType.toString());
}
if (meta.getExpirationDate() != null) {
setResponseDateHeader(HEADER_EXPIRES,meta.getExpirationDate().getTime());
}
if (meta.getModificationDate() != null) {
setResponseDateHeader(HEADER_LAST_MODIFIED,meta.getModificationDate().getTime());
}
if (meta.getTag() != null) {
setResponseHeader(HEADER_ETAG,meta.getTag().getName());
}
if (call.getOutput().getSize() != -1) {
setResponseHeader(HEADER_CONTENT_LENGTH,Long.toString(call.getOutput().getSize()));
}
call.getOutput().write(getResponseStream());
}
}
 catch (IOException ioe) {
logger.log(Level.WARNING,"IO exception intercepted",ioe);
setResponseStatus(500);
}
}
