{
  super(helper,method,requestUri);
  if (requestUri.startsWith("http")) {
    URL url=new URL(requestUri);
    this.connection=(HttpURLConnection)url.openConnection();
    int majorVersionNumber=SystemUtils.getJavaMajorVersion();
    int minorVersionNumber=SystemUtils.getJavaMinorVersion();
    if ((majorVersionNumber > 1) || ((majorVersionNumber == 1) && (minorVersionNumber >= 5))) {
      this.connection.setConnectTimeout(getHelper().getSocketConnectTimeoutMs());
      this.connection.setReadTimeout(getHelper().getReadTimeout());
    }
    this.connection.setAllowUserInteraction(getHelper().isAllowUserInteraction());
    this.connection.setDoOutput(hasEntity);
    this.connection.setInstanceFollowRedirects(getHelper().isFollowRedirects());
    this.connection.setUseCaches(getHelper().isUseCaches());
    this.responseHeadersAdded=false;
    if (this.connection instanceof javax.net.ssl.HttpsURLConnection) {
      setConfidential(true);
      javax.net.ssl.HttpsURLConnection https=(javax.net.ssl.HttpsURLConnection)this.connection;
      org.restlet.ext.ssl.internal.SslContextFactory sslContextFactory=SslUtils.getSslContextFactory(getHelper());
      if (sslContextFactory != null) {
        try {
          javax.net.ssl.SSLContext sslContext=sslContextFactory.createSslContext();
          https.setSSLSocketFactory(sslContext.getSocketFactory());
        }
 catch (        Exception e) {
          throw new RuntimeException("Unable to create SSLContext.",e);
        }
      }
      javax.net.ssl.HostnameVerifier verifier=helper.getHostnameVerifier();
      if (verifier != null) {
        https.setHostnameVerifier(verifier);
      }
    }
  }
 else {
    throw new IllegalArgumentException("Only HTTP or HTTPS resource URIs are allowed here");
  }
}
