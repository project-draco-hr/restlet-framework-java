def getDOMImplementation(name=None, features=()):
    'getDOMImplementation(name = None, features = ()) -> DOM implementation.\n\n    Return a suitable DOM implementation. The name is either\n    well-known, the module name of a DOM implementation, or None. If\n    it is not None, imports the corresponding module and returns\n    DOMImplementation object if the import succeeds.\n\n    If name is not given, consider the available implementations to\n    find one with the required feature set. If no implementation can\n    be found, raise an ImportError. The features list must be a sequence\n    of (feature, version) pairs which are passed to hasFeature.'
    import os
    creator = None
    mod = well_known_implementations.get(name)
    if mod:
        mod = __import__(mod, {}, {}, ['getDOMImplementation'])
        return mod.getDOMImplementation()
    elif name:
        return registered[name]()
    elif os.environ.has_key('PYTHON_DOM'):
        return getDOMImplementation(name=os.environ['PYTHON_DOM'])
    if isinstance(features, StringTypes):
        features = _parse_feature_string(features)
    for creator in registered.values():
        dom = creator()
        if _good_enough(dom, features):
            return dom
    for creator in well_known_implementations.keys():
        try:
            dom = getDOMImplementation(name=creator)
        except StandardError:
            continue
        if _good_enough(dom, features):
            return dom
    raise ImportError, 'no suitable DOM implementation found'
