def add_defaults(self):
    "Add all the default files to self.filelist:\n          - README or README.txt\n          - setup.py\n          - test/test*.py\n          - all pure Python modules mentioned in setup script\n          - all C sources listed as part of extensions or C libraries\n            in the setup script (doesn't catch C headers!)\n        Warns if (README or README.txt) or setup.py are missing; everything\n        else is optional.\n        "
    standards = [('README', 'README.txt'), self.distribution.script_name]
    for fn in standards:
        if (type(fn) is TupleType):
            alts = fn
            got_it = 0
            for fn in alts:
                if os.path.exists(fn):
                    got_it = 1
                    self.filelist.append(fn)
                    break
            if (not got_it):
                self.warn(('standard file not found: should have one of ' + string.join(alts, ', ')))
        elif os.path.exists(fn):
            self.filelist.append(fn)
        else:
            self.warn(("standard file '%s' not found" % fn))
    optional = ['test/test*.py', 'setup.cfg']
    for pattern in optional:
        files = filter(os.path.isfile, glob(pattern))
        if files:
            self.filelist.extend(files)
    if self.distribution.has_pure_modules():
        build_py = self.get_finalized_command('build_py')
        self.filelist.extend(build_py.get_source_files())
    if self.distribution.has_ext_modules():
        build_ext = self.get_finalized_command('build_ext')
        self.filelist.extend(build_ext.get_source_files())
    if self.distribution.has_c_libraries():
        build_clib = self.get_finalized_command('build_clib')
        self.filelist.extend(build_clib.get_source_files())
    if self.distribution.has_scripts():
        build_scripts = self.get_finalized_command('build_scripts')
        self.filelist.extend(build_scripts.get_source_files())
