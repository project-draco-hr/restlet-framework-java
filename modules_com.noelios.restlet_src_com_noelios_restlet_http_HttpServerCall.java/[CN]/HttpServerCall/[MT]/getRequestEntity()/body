{
  Representation result=null;
  long contentLength=getContentLength();
  InputStream requestStream=getRequestEntityStream(contentLength);
  ReadableByteChannel requestChannel=getRequestEntityChannel(contentLength);
  if (requestStream != null) {
    result=new InputRepresentation(requestStream,null,contentLength);
  }
 else   if (requestChannel != null) {
    result=new ReadableRepresentation(requestChannel,null,contentLength);
  }
  result.setSize(contentLength);
  for (  Parameter header : getRequestHeaders()) {
    if (header.getName().equalsIgnoreCase(HttpConstants.HEADER_CONTENT_ENCODING)) {
      HeaderReader hr=new HeaderReader(header.getValue());
      String value=hr.readValue();
      while (value != null) {
        Encoding encoding=Encoding.valueOf(value);
        if (!encoding.equals(Encoding.IDENTITY)) {
          result.getEncodings().add(encoding);
        }
        value=hr.readValue();
      }
    }
 else     if (header.getName().equalsIgnoreCase(HttpConstants.HEADER_CONTENT_LANGUAGE)) {
      HeaderReader hr=new HeaderReader(header.getValue());
      String value=hr.readValue();
      while (value != null) {
        result.getLanguages().add(Language.valueOf(value));
        value=hr.readValue();
      }
    }
 else     if (header.getName().equalsIgnoreCase(HttpConstants.HEADER_CONTENT_TYPE)) {
      ContentType contentType=new ContentType(header.getValue());
      result.setMediaType(contentType.getMediaType());
      result.setCharacterSet(contentType.getCharacterSet());
    }
  }
  return result;
}
