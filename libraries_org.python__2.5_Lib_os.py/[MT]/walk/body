def walk(top, topdown=True, onerror=None):
    'Directory tree generator.\n\n    For each directory in the directory tree rooted at top (including top\n    itself, but excluding \'.\' and \'..\'), yields a 3-tuple\n\n        dirpath, dirnames, filenames\n\n    dirpath is a string, the path to the directory.  dirnames is a list of\n    the names of the subdirectories in dirpath (excluding \'.\' and \'..\').\n    filenames is a list of the names of the non-directory files in dirpath.\n    Note that the names in the lists are just names, with no path components.\n    To get a full path (which begins with top) to a file or directory in\n    dirpath, do os.path.join(dirpath, name).\n\n    If optional arg \'topdown\' is true or not specified, the triple for a\n    directory is generated before the triples for any of its subdirectories\n    (directories are generated top down).  If topdown is false, the triple\n    for a directory is generated after the triples for all of its\n    subdirectories (directories are generated bottom up).\n\n    When topdown is true, the caller can modify the dirnames list in-place\n    (e.g., via del or slice assignment), and walk will only recurse into the\n    subdirectories whose names remain in dirnames; this can be used to prune\n    the search, or to impose a specific order of visiting.  Modifying\n    dirnames when topdown is false is ineffective, since the directories in\n    dirnames have already been generated by the time dirnames itself is\n    generated.\n\n    By default errors from the os.listdir() call are ignored.  If\n    optional arg \'onerror\' is specified, it should be a function; it\n    will be called with one argument, an os.error instance.  It can\n    report the error to continue with the walk, or raise the exception\n    to abort the walk.  Note that the filename is available as the\n    filename attribute of the exception object.\n\n    Caution:  if you pass a relative pathname for top, don\'t change the\n    current working directory between resumptions of walk.  walk never\n    changes the current directory, and assumes that the client doesn\'t\n    either.\n\n    Example:\n\n    from os.path import join, getsize\n    for root, dirs, files in walk(\'python/Lib/email\'):\n        print root, "consumes",\n        print sum([getsize(join(root, name)) for name in files]),\n        print "bytes in", len(files), "non-directory files"\n        if \'CVS\' in dirs:\n            dirs.remove(\'CVS\')  # don\'t visit CVS directories\n    '
    from os.path import join, isdir, islink
    try:
        names = listdir(top)
    except error as err:
        if (onerror is not None):
            onerror(err)
        return
    (dirs, nondirs) = ([], [])
    for name in names:
        if isdir(join(top, name)):
            dirs.append(name)
        else:
            nondirs.append(name)
    if topdown:
        yield (top, dirs, nondirs)
    for name in dirs:
        path = join(top, name)
        if (not islink(path)):
            for x in walk(path, topdown, onerror):
                yield x
    if (not topdown):
        yield (top, dirs, nondirs)
