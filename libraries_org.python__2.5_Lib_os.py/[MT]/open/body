def open(filename, flag, mode=511):
    'open(filename, flag [, mode=0777]) -> fd\n\n    Open a file (for low level IO).\n    '
    reading = (flag & O_RDONLY)
    writing = (flag & O_WRONLY)
    updating = (flag & O_RDWR)
    creating = (flag & O_CREAT)
    truncating = (flag & O_TRUNC)
    exclusive = (flag & O_EXCL)
    sync = (flag & O_SYNC)
    appending = (flag & O_APPEND)
    if (updating and writing):
        raise OSError(errno.EINVAL, strerror(errno.EINVAL), filename)
    if ((not creating) and (not path.exists(filename))):
        raise OSError(errno.ENOENT, strerror(errno.ENOENT), filename)
    if (not writing):
        if updating:
            writing = True
        else:
            reading = True
    if (truncating and (not writing)):
        FileIO(filename, 'w').close()
    if (exclusive and creating):
        try:
            if (not File(sys.getPath(filename)).createNewFile()):
                raise OSError(errno.EEXIST, strerror(errno.EEXIST), filename)
        except java.io.IOException as ioe:
            raise OSError(ioe)
    mode = ('%s%s%s%s' % (((reading and 'r') or ''), ((((not appending) and writing) and 'w') or ''), (((appending and (writing or updating)) and 'a') or ''), ((updating and '+') or '')))
    if (sync and (writing or updating)):
        from java.io import FileNotFoundException, RandomAccessFile
        try:
            fchannel = RandomAccessFile(sys.getPath(filename), 'rws').getChannel()
        except FileNotFoundException as fnfe:
            if path.isdir(filename):
                raise OSError(errno.EISDIR, strerror(errno.EISDIR))
            raise OSError(errno.ENOENT, strerror(errno.ENOENT), filename)
        return FileIO(fchannel, mode)
    return FileIO(filename, mode)
