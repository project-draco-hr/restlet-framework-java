def _reduce(self):
    for base in self.__class__.__mro__:
        if (hasattr(base, '__flags__') and (not (base.__flags__ & _HEAPTYPE))):
            break
    else:
        base = object
    if (base is object):
        state = None
    else:
        if (base is self.__class__):
            raise TypeError, ("can't pickle %s objects" % base.__name__)
        state = base(self)
    args = (self.__class__, base, state)
    try:
        getstate = self.__getstate__
    except AttributeError:
        try:
            dict = self.__dict__
        except AttributeError:
            dict = None
    else:
        dict = getstate()
    if dict:
        return (_reconstructor, args, dict)
    else:
        return (_reconstructor, args)
