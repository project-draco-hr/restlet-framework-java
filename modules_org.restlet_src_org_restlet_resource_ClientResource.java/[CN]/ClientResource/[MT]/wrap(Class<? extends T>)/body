{
  T result=null;
  final List<org.restlet.engine.resource.AnnotationInfo> annotations=org.restlet.engine.resource.AnnotationUtils.getAnnotations(resourceInterface);
  final ClientResource clientResource=this;
  java.lang.reflect.InvocationHandler h=new java.lang.reflect.InvocationHandler(){
    @SuppressWarnings("rawtypes") public Object invoke(    Object proxy,    java.lang.reflect.Method javaMethod,    Object[] args) throws Throwable {
      Object result=null;
      if (javaMethod.equals(Object.class.getMethod("toString"))) {
        result="ClientProxy for resource: " + clientResource;
      }
 else       if (javaMethod.equals(ClientProxy.class.getMethod("getClientResource"))) {
        result=clientResource;
      }
 else {
        org.restlet.engine.resource.AnnotationInfo annotation=org.restlet.engine.resource.AnnotationUtils.getAnnotation(annotations,javaMethod);
        if (annotation != null) {
          Representation requestEntity=null;
          boolean isSynchronous=true;
          if ((args != null) && args.length > 0) {
            for (int i=0; i < args.length; i++) {
              Object o=args[i];
              if (o == null) {
                requestEntity=null;
              }
 else               if (Result.class.isAssignableFrom(o.getClass())) {
                isSynchronous=false;
                final Result rCallback=(Result)o;
                java.lang.reflect.Type[] genericParameterTypes=javaMethod.getGenericParameterTypes();
                java.lang.reflect.Type genericParameterType=genericParameterTypes[i];
                java.lang.reflect.ParameterizedType parameterizedType=(genericParameterType instanceof java.lang.reflect.ParameterizedType) ? (java.lang.reflect.ParameterizedType)genericParameterType : null;
                final Class<?> actualType=(parameterizedType.getActualTypeArguments()[0] instanceof Class<?>) ? (Class<?>)parameterizedType.getActualTypeArguments()[0] : null;
                Uniform callback=new Uniform(){
                  public void handle(                  Request request,                  Response response){
                    if (response.getStatus().isError()) {
                      rCallback.onFailure(new ResourceException(response.getStatus()));
                    }
 else {
                      if (actualType != null) {
                        rCallback.onSuccess(toObject(response.getEntity(),actualType.getClass()));
                      }
 else {
                        rCallback.onSuccess(null);
                      }
                    }
                  }
                }
;
                setOnResponse(callback);
              }
 else {
                requestEntity=toRepresentation(args[i],null);
              }
            }
          }
          Request request=createRequest(getRequest());
          request.setMethod(annotation.getRestletMethod());
          request.setEntity(requestEntity);
          List<org.restlet.representation.Variant> responseVariants=annotation.getResponseVariants(getMetadataService(),getConverterService());
          if (responseVariants != null) {
            request.setClientInfo(new ClientInfo(responseVariants));
          }
          Response response=handle(request);
          if (isSynchronous) {
            if (response.getStatus().isError()) {
              throw new ResourceException(response.getStatus());
            }
            if (!annotation.getJavaOutputType().equals(void.class)) {
              result=toObject((response == null ? null : response.getEntity()),annotation.getJavaOutputType());
            }
          }
        }
      }
      return result;
    }
  }
;
  result=(T)java.lang.reflect.Proxy.newProxyInstance(org.restlet.engine.Engine.getInstance().getClassLoader(),new Class<?>[]{ClientProxy.class,resourceInterface},h);
  return result;
}
