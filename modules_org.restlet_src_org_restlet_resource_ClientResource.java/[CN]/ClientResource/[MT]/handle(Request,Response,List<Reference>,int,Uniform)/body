{
  if (next != null) {
    if (isRequestEntityBuffering() && (request.getEntity() != null) && request.getEntity().isTransient()&& request.getEntity().isAvailable()) {
      request.setEntity(new org.restlet.engine.io.BufferingRepresentation(request.getEntity()));
    }
    next.handle(request,response);
    if (isFollowingRedirects() && response.getStatus().isRedirection() && (response.getLocationRef() != null)) {
      boolean doRedirection=false;
      if (request.getMethod().isSafe()) {
        doRedirection=true;
      }
 else {
        if (Status.REDIRECTION_SEE_OTHER.equals(response.getStatus())) {
          request.setMethod(Method.GET);
          request.setEntity(null);
          doRedirection=true;
        }
 else         if (Status.REDIRECTION_USE_PROXY.equals(response.getStatus())) {
          doRedirection=true;
        }
      }
      if (doRedirection) {
        Reference newTargetRef=response.getLocationRef();
        if ((references != null) && references.contains(newTargetRef)) {
          getLogger().warning("Infinite redirection loop detected with URI: " + newTargetRef);
        }
 else         if (request.getEntity() != null && !request.isEntityAvailable()) {
          getLogger().warning("Unable to follow the redirection because the request entity isn't available anymore.");
        }
 else {
          if (references == null) {
            references=new ArrayList<Reference>();
          }
          if (references.size() >= getMaxRedirects()) {
            getLogger().warning("Unable to follow the redirection because the request the maximum number of redirections for a single call has been reached.");
          }
 else {
            references.add(request.getResourceRef());
            request.setResourceRef(newTargetRef);
            handle(request,response,references,0,next);
          }
        }
      }
    }
 else     if (isRetryOnError() && response.getStatus().isRecoverableError() && request.getMethod().isIdempotent()&& (retryAttempt < getRetryAttempts())&& ((request.getEntity() == null) || request.getEntity().isAvailable())) {
      getLogger().log(Level.INFO,"A recoverable error was detected (" + response.getStatus().getCode() + "), attempting again in "+ getRetryDelay()+ " ms.");
      if (getRetryDelay() > 0) {
        try {
          Thread.sleep(getRetryDelay());
        }
 catch (        InterruptedException e) {
          getLogger().log(Level.FINE,"Retry delay sleep was interrupted",e);
        }
      }
      handle(request,response,references,++retryAttempt,next);
    }
    if (isResponseEntityBuffering() && (response.getEntity() != null) && response.getEntity().isTransient()&& response.getEntity().isAvailable()) {
      response.setEntity(new org.restlet.engine.io.BufferingRepresentation(response.getEntity()));
    }
  }
 else {
    getLogger().log(Level.WARNING,"Request ignored as no next Restlet is available");
  }
}
