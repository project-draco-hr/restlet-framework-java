def read_token(self):
    quoted = False
    escapedstate = ' '
    while True:
        nextchar = self.instream.read(1)
        if (nextchar == '\n'):
            self.lineno = (self.lineno + 1)
        if (self.debug >= 3):
            print 'shlex: in state', repr(self.state), 'I see character:', repr(nextchar)
        if (self.state is None):
            self.token = ''
            break
        elif (self.state == ' '):
            if (not nextchar):
                self.state = None
                break
            elif (nextchar in self.whitespace):
                if (self.debug >= 2):
                    print 'shlex: I see whitespace in whitespace state'
                if (self.token or (self.posix and quoted)):
                    break
                else:
                    continue
            elif (nextchar in self.commenters):
                self.instream.readline()
                self.lineno = (self.lineno + 1)
            elif (self.posix and (nextchar in self.escape)):
                escapedstate = 'a'
                self.state = nextchar
            elif (nextchar in self.wordchars):
                self.token = nextchar
                self.state = 'a'
            elif (nextchar in self.quotes):
                if (not self.posix):
                    self.token = nextchar
                self.state = nextchar
            elif self.whitespace_split:
                self.token = nextchar
                self.state = 'a'
            else:
                self.token = nextchar
                if (self.token or (self.posix and quoted)):
                    break
                else:
                    continue
        elif (self.state in self.quotes):
            quoted = True
            if (not nextchar):
                if (self.debug >= 2):
                    print 'shlex: I see EOF in quotes state'
                raise ValueError, 'No closing quotation'
            if (nextchar == self.state):
                if (not self.posix):
                    self.token = (self.token + nextchar)
                    self.state = ' '
                    break
                else:
                    self.state = 'a'
            elif (self.posix and (nextchar in self.escape) and (self.state in self.escapedquotes)):
                escapedstate = self.state
                self.state = nextchar
            else:
                self.token = (self.token + nextchar)
        elif (self.state in self.escape):
            if (not nextchar):
                if (self.debug >= 2):
                    print 'shlex: I see EOF in escape state'
                raise ValueError, 'No escaped character'
            if ((escapedstate in self.quotes) and (nextchar != self.state) and (nextchar != escapedstate)):
                self.token = (self.token + self.state)
            self.token = (self.token + nextchar)
            self.state = escapedstate
        elif (self.state == 'a'):
            if (not nextchar):
                self.state = None
                break
            elif (nextchar in self.whitespace):
                if (self.debug >= 2):
                    print 'shlex: I see whitespace in word state'
                self.state = ' '
                if (self.token or (self.posix and quoted)):
                    break
                else:
                    continue
            elif (nextchar in self.commenters):
                self.instream.readline()
                self.lineno = (self.lineno + 1)
                if self.posix:
                    self.state = ' '
                    if (self.token or (self.posix and quoted)):
                        break
                    else:
                        continue
            elif (self.posix and (nextchar in self.quotes)):
                self.state = nextchar
            elif (self.posix and (nextchar in self.escape)):
                escapedstate = 'a'
                self.state = nextchar
            elif ((nextchar in self.wordchars) or (nextchar in self.quotes) or self.whitespace_split):
                self.token = (self.token + nextchar)
            else:
                self.pushback.appendleft(nextchar)
                if (self.debug >= 2):
                    print 'shlex: I see punctuation in word state'
                self.state = ' '
                if self.token:
                    break
                else:
                    continue
    result = self.token
    self.token = ''
    if (self.posix and (not quoted) and (result == '')):
        result = None
    if (self.debug > 1):
        if result:
            print ('shlex: raw token=' + repr(result))
        else:
            print 'shlex: raw token=EOF'
    return result
