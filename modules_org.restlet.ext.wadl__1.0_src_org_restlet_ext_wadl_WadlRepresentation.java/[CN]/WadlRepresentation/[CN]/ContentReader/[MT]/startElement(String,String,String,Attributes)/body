{
  if (uri.equalsIgnoreCase(APP_NAMESPACE)) {
    if (localName.equals("application")) {
      this.currentApplication=new ApplicationInfo();
      pushState(State.APPLICATION);
    }
 else     if (localName.equals("doc")) {
      this.currentDocumentation=new DocumentationInfo();
      this.mixedContentTopNode=this.mixedContentDocument.createDocumentFragment();
      this.currentMixedContentNode=mixedContentTopNode;
      this.currentMixedContentCDataSection=null;
      if (attrs.getIndex("xml:lang") != -1) {
        this.currentDocumentation.setLanguage(Language.valueOf(attrs.getValue("xml:lang")));
      }
      if (attrs.getIndex("lang") != -1) {
        this.currentDocumentation.setLanguage(Language.valueOf(attrs.getValue("lang")));
      }
      if (attrs.getIndex("title") != -1) {
        this.currentDocumentation.setTitle(attrs.getValue("title"));
      }
      if (getState() == State.APPLICATION) {
        this.currentApplication.getDocumentations().add(this.currentDocumentation);
      }
 else       if (getState() == State.FAULT) {
        this.currentFault.getDocumentations().add(this.currentDocumentation);
      }
 else       if (getState() == State.GRAMMARS) {
        this.currentGrammars.getDocumentations().add(this.currentDocumentation);
      }
 else       if (getState() == State.INCLUDE) {
        this.currentInclude.getDocumentations().add(this.currentDocumentation);
      }
 else       if (getState() == State.LINK) {
        this.currentLink.getDocumentations().add(this.currentDocumentation);
      }
 else       if (getState() == State.METHOD) {
        this.currentMethod.getDocumentations().add(this.currentDocumentation);
      }
 else       if (getState() == State.OPTION) {
        this.currentOption.getDocumentations().add(this.currentDocumentation);
      }
 else       if (getState() == State.PARAMETER) {
        this.currentParameter.getDocumentations().add(this.currentDocumentation);
      }
 else       if (getState() == State.REPRESENTATION) {
        this.currentRepresentation.getDocumentations().add(this.currentDocumentation);
      }
 else       if (getState() == State.REQUEST) {
        this.currentRequest.getDocumentations().add(this.currentDocumentation);
      }
 else       if (getState() == State.RESOURCE) {
        this.currentResourcesList.get(0).getDocumentations().add(this.currentDocumentation);
      }
 else       if (getState() == State.RESOURCES) {
        this.currentResources.getDocumentations().add(this.currentDocumentation);
      }
 else       if (getState() == State.RESOURCETYPE) {
        this.currentResourceType.getDocumentations().add(this.currentDocumentation);
      }
 else       if (getState() == State.RESPONSE) {
        this.currentResponse.getDocumentations().add(this.currentDocumentation);
      }
      pushState(State.DOCUMENTATION);
    }
 else     if (localName.equals("fault")) {
      this.currentFault=new FaultInfo();
      if (attrs.getIndex("id") != -1) {
        this.currentFault.setIdentifier(attrs.getValue("id"));
      }
      if (attrs.getIndex("mediaType") != -1) {
        this.currentFault.setMediaType(MediaType.valueOf(attrs.getValue("mediaType")));
      }
      if (attrs.getIndex("element") != -1) {
        this.currentFault.setXmlElement(attrs.getValue("element"));
      }
      if (attrs.getIndex("profile") != -1) {
        final String[] profiles=attrs.getValue("profile").split(" ");
        for (        final String string : profiles) {
          this.currentFault.getProfiles().add(new Reference(string));
        }
      }
      if (attrs.getIndex("status") != -1) {
        final String[] statuses=attrs.getValue("status").split(" ");
        for (        final String string : statuses) {
          this.currentFault.getStatuses().add(Status.valueOf(Integer.parseInt(string)));
        }
      }
      if (getState() == State.APPLICATION) {
        this.currentApplication.getFaults().add(this.currentFault);
      }
 else       if (getState() == State.RESPONSE) {
        this.currentResponse.getFaults().add(this.currentFault);
      }
      pushState(State.FAULT);
    }
 else     if (localName.equals("grammars")) {
      this.currentGrammars=new GrammarsInfo();
      if (getState() == State.APPLICATION) {
        this.currentApplication.setGrammars(this.currentGrammars);
      }
      pushState(State.GRAMMARS);
    }
 else     if (localName.equals("include")) {
      this.currentInclude=new IncludeInfo();
      if (attrs.getIndex("href") != -1) {
        this.currentInclude.setTargetRef(new Reference(attrs.getValue("href")));
      }
      if (getState() == State.GRAMMARS) {
        this.currentGrammars.getIncludes().add(this.currentInclude);
      }
      pushState(State.INCLUDE);
    }
 else     if (localName.equals("link")) {
      this.currentLink=new LinkInfo();
      if (attrs.getIndex("rel") != -1) {
        this.currentLink.setRelationship(attrs.getValue("rel"));
      }
      if (attrs.getIndex("rev") != -1) {
        this.currentLink.setReverseRelationship(attrs.getValue("rev"));
      }
      if (attrs.getIndex("resource_type") != -1) {
        this.currentLink.setResourceType(new Reference(attrs.getValue("resource_type")));
      }
      if (getState() == State.PARAMETER) {
        this.currentParameter.setLink(this.currentLink);
      }
      pushState(State.LINK);
    }
 else     if (localName.equals("method")) {
      this.currentMethod=new MethodInfo();
      if (attrs.getIndex("href") != -1) {
        this.currentMethod.setTargetRef(new Reference(attrs.getValue("href")));
      }
      if (attrs.getIndex("id") != -1) {
        this.currentMethod.setIdentifier(attrs.getValue("id"));
      }
      if (attrs.getIndex("name") != -1) {
        this.currentMethod.setName(Method.valueOf(attrs.getValue("name")));
      }
      if (getState() == State.APPLICATION) {
        this.currentApplication.getMethods().add(this.currentMethod);
      }
 else       if (getState() == State.RESOURCE) {
        this.currentResourcesList.get(0).getMethods().add(this.currentMethod);
      }
 else       if (getState() == State.RESOURCETYPE) {
        this.currentResourceType.getMethods().add(this.currentMethod);
      }
      pushState(State.METHOD);
    }
 else     if (localName.equals("option")) {
      this.currentOption=new OptionInfo();
      if (attrs.getIndex("value") != -1) {
        this.currentOption.setValue(attrs.getValue("value"));
      }
      if (getState() == State.PARAMETER) {
        this.currentParameter.getOptions().add(this.currentOption);
      }
      pushState(State.OPTION);
    }
 else     if (localName.equals("param")) {
      this.currentParameter=new ParameterInfo();
      if (attrs.getIndex("default") != -1) {
        this.currentParameter.setDefaultValue(attrs.getValue("default"));
      }
      if (attrs.getIndex("fixed") != -1) {
        this.currentParameter.setFixed(attrs.getValue("fixed"));
      }
      if (attrs.getIndex("id") != -1) {
        this.currentParameter.setIdentifier(attrs.getValue("id"));
      }
      if (attrs.getIndex("path") != -1) {
        this.currentParameter.setPath(attrs.getValue("path"));
      }
      if (attrs.getIndex("style") != -1) {
        this.currentParameter.setStyle(getParameterStyle(attrs.getValue("style")));
      }
      if (attrs.getIndex("name") != -1) {
        this.currentParameter.setName(attrs.getValue("name"));
      }
      if (attrs.getIndex("type") != -1) {
        this.currentParameter.setType(attrs.getValue("type"));
      }
      if (attrs.getIndex("repeating") != -1) {
        this.currentParameter.setRepeating(Boolean.parseBoolean(attrs.getValue("repeating")));
      }
      if (attrs.getIndex("required") != -1) {
        this.currentParameter.setRequired(Boolean.parseBoolean(attrs.getValue("required")));
      }
      if (getState() == State.FAULT) {
        this.currentFault.getParameters().add(this.currentParameter);
      }
 else       if (getState() == State.REPRESENTATION) {
        this.currentRepresentation.getParameters().add(this.currentParameter);
      }
 else       if (getState() == State.REQUEST) {
        this.currentRequest.getParameters().add(this.currentParameter);
      }
 else       if (getState() == State.RESOURCE) {
        this.currentResourcesList.get(0).getParameters().add(this.currentParameter);
      }
 else       if (getState() == State.RESOURCETYPE) {
        this.currentRequest.getParameters().add(this.currentParameter);
      }
 else       if (getState() == State.RESPONSE) {
        this.currentRequest.getParameters().add(this.currentParameter);
      }
      pushState(State.PARAMETER);
    }
 else     if (localName.equals("representation")) {
      this.currentRepresentation=new RepresentationInfo();
      if (attrs.getIndex("id") != -1) {
        this.currentRepresentation.setIdentifier(attrs.getValue("id"));
      }
      if (attrs.getIndex("mediaType") != -1) {
        this.currentRepresentation.setMediaType(MediaType.valueOf(attrs.getValue("mediaType")));
      }
      if (attrs.getIndex("element") != -1) {
        this.currentRepresentation.setXmlElement(attrs.getValue("element"));
      }
      if (attrs.getIndex("profile") != -1) {
        final String[] profiles=attrs.getValue("profile").split(" ");
        for (        final String string : profiles) {
          this.currentRepresentation.getProfiles().add(new Reference(string));
        }
      }
      if (attrs.getIndex("status") != -1) {
        final String[] statuses=attrs.getValue("status").split(" ");
        for (        final String string : statuses) {
          this.currentRepresentation.getStatuses().add(Status.valueOf(Integer.parseInt(string)));
        }
      }
      if (getState() == State.APPLICATION) {
        this.currentApplication.getRepresentations().add(this.currentRepresentation);
      }
 else       if (getState() == State.REQUEST) {
        this.currentRequest.getRepresentations().add(this.currentRepresentation);
      }
 else       if (getState() == State.RESPONSE) {
        this.currentResponse.getRepresentations().add(this.currentRepresentation);
      }
      pushState(State.REPRESENTATION);
    }
 else     if (localName.equals("request")) {
      this.currentRequest=new RequestInfo();
      if (getState() == State.METHOD) {
        this.currentMethod.setRequest(this.currentRequest);
      }
      pushState(State.REQUEST);
    }
 else     if (localName.equals("resource")) {
      final ResourceInfo resourceInfo=new ResourceInfo();
      if (attrs.getIndex("id") != -1) {
        resourceInfo.setIdentifier(attrs.getValue("id"));
      }
      if (attrs.getIndex("path") != -1) {
        resourceInfo.setPath(attrs.getValue("path"));
      }
      if (attrs.getIndex("queryType") != -1) {
        resourceInfo.setQueryType(MediaType.valueOf(attrs.getValue("queryType")));
      }
      if (attrs.getIndex("type") != -1) {
        final String[] type=attrs.getValue("type").split(" ");
        for (        final String string : type) {
          resourceInfo.getType().add(new Reference(string));
        }
      }
      if (getState() == State.RESOURCE) {
        this.currentResourcesList.get(0).getChildResources().add(resourceInfo);
      }
 else       if (getState() == State.RESOURCES) {
        this.currentResources.getResources().add(resourceInfo);
      }
      this.currentResourcesList.add(0,resourceInfo);
      pushState(State.RESOURCE);
    }
 else     if (localName.equals("resources")) {
      this.currentResources=new ResourcesInfo();
      if (attrs.getIndex("base") != -1) {
        this.currentResources.setBaseRef(new Reference(attrs.getValue("base")));
      }
      if (getState() == State.APPLICATION) {
        this.currentApplication.setResources(this.currentResources);
      }
      pushState(State.RESOURCES);
    }
 else     if (localName.equals("resource_type")) {
      this.currentResourceType=new ResourceTypeInfo();
      if (attrs.getIndex("id") != -1) {
        this.currentResourceType.setIdentifier(attrs.getValue("id"));
      }
      if (getState() == State.APPLICATION) {
        this.currentApplication.getResourceTypes().add(this.currentResourceType);
      }
      pushState(State.RESOURCETYPE);
    }
 else     if (localName.equals("response")) {
      this.currentResponse=new ResponseInfo();
      if (getState() == State.METHOD) {
        this.currentMethod.setResponse(this.currentResponse);
      }
      pushState(State.RESPONSE);
    }
  }
 else {
    if (getState() == State.DOCUMENTATION) {
      pushMixedContentState(MixedContentState.ELEMENT);
      Node node=null;
      if (("".equals(qName) || qName == null)) {
        node=this.mixedContentDocument.createElementNS(uri,localName);
      }
 else {
        node=this.mixedContentDocument.createElementNS(uri,qName);
      }
      for (int i=0; i < attrs.getLength(); i++) {
        Attr attr=this.mixedContentDocument.createAttributeNS(attrs.getURI(i),attrs.getLocalName(i));
        attr.setNodeValue(attrs.getValue(i));
        node.getAttributes().setNamedItemNS(attr);
      }
      this.currentMixedContentNode.appendChild(node);
      this.currentMixedContentNode=node;
    }
  }
}
