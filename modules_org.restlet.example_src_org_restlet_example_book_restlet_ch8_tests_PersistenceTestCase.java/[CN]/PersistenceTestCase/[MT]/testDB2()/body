{
  final Contact contactProto=new Contact();
  final Predicate<Mail> mailByContactNamePredicate=new Predicate<Mail>(){
    static final long serialVersionUID=1l;
    @Override public boolean match(    Mail mail){
      boolean found=false;
      for (      final Contact contact : mail.getRecipients()) {
        if ("contact-5".equals(contact.getName())) {
          found=true;
          break;
        }
      }
      return found;
    }
  }
;
  final Predicate<Mailbox> mailboxByContactNamePredicate=new Predicate<Mailbox>(){
    static final long serialVersionUID=1l;
    @Override public boolean match(    Mailbox mailbox){
      boolean found=false;
      for (      final Contact contact : mailbox.getContacts()) {
        if ("contact-5".equals(contact.getName())) {
          found=true;
          break;
        }
      }
      return found;
    }
  }
;
  ObjectSet<Contact> contactList;
  ObjectSet<Mail> mailList;
  ObjectSet<Mailbox> mailboxList;
  contactProto.setName("contact-4");
  contactList=this.objectContainer.queryByExample(contactProto);
  assertEquals(contactList.size(),1);
  mailList=this.objectContainer.query(mailByContactNamePredicate);
  assertEquals(mailList.size(),1);
  final Contact contact=contactList.get(0);
  contact.setName("contact-5");
  this.objectContainer.store(contact);
  this.objectContainer.commit();
  mailList=this.objectContainer.query(mailByContactNamePredicate);
  assertEquals(mailList.size(),2);
  mailboxList=this.objectContainer.query(mailboxByContactNamePredicate);
  assertEquals(mailboxList.size(),1);
  contactProto.setName("contact-5");
  contactList=this.objectContainer.queryByExample(contactProto);
  for (  final Contact contact2 : contactList) {
    for (    final Mailbox mailbox : mailboxList) {
      boolean found=false;
      for (int i=0; (i < mailbox.getContacts().size()) && !found; i++) {
        final Contact contact3=mailbox.getContacts().get(i);
        if (contact2.getId().equals(contact3.getId())) {
          mailbox.getContacts().remove(i);
          found=true;
        }
      }
      this.objectContainer.store(mailbox);
    }
    for (    final Mail mail : mailList) {
      final List<Contact> list=new ArrayList<Contact>();
      for (int i=0; i < mail.getRecipients().size(); i++) {
        final Contact contact3=mail.getRecipients().get(i);
        if (!contact2.getId().equals(contact3.getId())) {
          list.add(contact3);
        }
      }
      mail.setRecipients(list);
      this.objectContainer.store(mail);
    }
    this.objectContainer.delete(contact2);
  }
  this.objectContainer.commit();
  contactList=this.objectContainer.queryByExample(contactProto);
  assertTrue(contactList.isEmpty());
  mailboxList=this.objectContainer.query(mailboxByContactNamePredicate);
  assertTrue(mailboxList.isEmpty());
  mailList=this.objectContainer.query(mailByContactNamePredicate);
  assertTrue(mailList.isEmpty());
}
