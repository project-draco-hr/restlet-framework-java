def test_pattern_override(self):


    class MyPattern(Template):
        pattern = '\n            (?P<escaped>@{2})                   |\n            @(?P<named>[_a-z][._a-z0-9]*)       |\n            @{(?P<braced>[_a-z][._a-z0-9]*)}    |\n            (?P<invalid>@)\n            '
    m = Mapping()
    m.bag = Bag()
    m.bag.foo = Bag()
    m.bag.foo.who = 'tim'
    m.bag.what = 'ham'
    s = MyPattern('@bag.foo.who likes to eat a bag of @bag.what')
    self.assertEqual(s.substitute(m), 'tim likes to eat a bag of ham')


    class BadPattern(Template):
        pattern = '\n            (?P<badname>.*)                     |\n            (?P<escaped>@{2})                   |\n            @(?P<named>[_a-z][._a-z0-9]*)       |\n            @{(?P<braced>[_a-z][._a-z0-9]*)}    |\n            (?P<invalid>@)                      |\n            '
    s = BadPattern('@bag.foo.who likes to eat a bag of @bag.what')
    self.assertRaises(ValueError, s.substitute, {})
    self.assertRaises(ValueError, s.safe_substitute, {})
