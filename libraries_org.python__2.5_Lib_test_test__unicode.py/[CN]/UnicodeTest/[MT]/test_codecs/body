def test_codecs(self):
    self.assertEqual(u'hello'.encode('ascii'), 'hello')
    self.assertEqual(u'hello'.encode('utf-7'), 'hello')
    self.assertEqual(u'hello'.encode('utf-8'), 'hello')
    self.assertEqual(u'hello'.encode('utf8'), 'hello')
    self.assertEqual(u'hello'.encode('utf-16-le'), 'h\x00e\x00l\x00l\x00o\x00')
    self.assertEqual(u'hello'.encode('utf-16-be'), '\x00h\x00e\x00l\x00l\x00o')
    self.assertEqual(u'hello'.encode('latin-1'), 'hello')
    u = u''.join(map(unichr, xrange(1024)))
    for encoding in ('utf-7', 'utf-8', 'utf-16', 'utf-16-le', 'utf-16-be', 'raw_unicode_escape', 'unicode_escape', 'unicode_internal'):
        self.assertEqual(unicode(u.encode(encoding), encoding), u)
    u = u''.join(map(unichr, xrange(256)))
    for encoding in ('latin-1',):
        self.assertEqual(unicode(u.encode(encoding), encoding), u)
    u = u''.join(map(unichr, xrange(128)))
    for encoding in ('ascii',):
        self.assertEqual(unicode(u.encode(encoding), encoding), u)
    u = u'\U00010001\U00020002\U00030003\U00040004\U00050005'
    for encoding in ('utf-8', 'utf-16', 'utf-16-le', 'utf-16-be', 'unicode_escape', 'unicode_internal'):
        self.assertEqual(unicode(u.encode(encoding), encoding), u)
    u = u''.join(map(unichr, (range(0, 55296) + range(57344, 65536))))
    for encoding in ('utf-8',):
        self.assertEqual(unicode(u.encode(encoding), encoding), u)
