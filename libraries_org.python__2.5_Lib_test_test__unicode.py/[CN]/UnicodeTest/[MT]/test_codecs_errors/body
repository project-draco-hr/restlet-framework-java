def test_codecs_errors(self):
    self.assertRaises(UnicodeError, u'Andr\x82 x'.encode, 'ascii')
    self.assertRaises(UnicodeError, u'Andr\x82 x'.encode, 'ascii', 'strict')
    self.assertEqual(u'Andr\x82 x'.encode('ascii', 'ignore'), 'Andr x')
    self.assertEqual(u'Andr\x82 x'.encode('ascii', 'replace'), 'Andr? x')
    self.assertRaises(UnicodeError, unicode, 'Andr\x82 x', 'ascii')
    self.assertRaises(UnicodeError, unicode, 'Andr\x82 x', 'ascii', 'strict')
    self.assertEqual(unicode('Andr\x82 x', 'ascii', 'ignore'), u'Andr x')
    self.assertEqual(unicode('Andr\x82 x', 'ascii', 'replace'), u'Andr\ufffd x')
    self.assertEqual('\\N{foo}xx'.decode('unicode-escape', 'ignore'), u'xx')
    self.assertRaises(UnicodeError, '\\'.decode, 'unicode-escape')

    def search_function(encoding):

        def decode1(input, errors='strict'):
            return 42

        def encode1(input, errors='strict'):
            return 42

        def encode2(input, errors='strict'):
            return (42, 42)

        def decode2(input, errors='strict'):
            return (42, 42)
        if (encoding == 'test.unicode1'):
            return (encode1, decode1, None, None)
        elif (encoding == 'test.unicode2'):
            return (encode2, decode2, None, None)
        else:
            return None
    codecs.register(search_function)
    self.assertRaises(TypeError, 'hello'.decode, 'test.unicode1')
    self.assertRaises(TypeError, unicode, 'hello', 'test.unicode2')
    self.assertRaises(TypeError, u'hello'.encode, 'test.unicode1')
    self.assertRaises(TypeError, u'hello'.encode, 'test.unicode2')
    import imp
    self.assertRaises(ImportError, imp.find_module, 'non-existing module', [u'non-existing dir'])
    self.assertRaises(TypeError, u'hello'.encode, 42, 42, 42)
    self.assertRaises(UnicodeError, int, u'\u0200')
