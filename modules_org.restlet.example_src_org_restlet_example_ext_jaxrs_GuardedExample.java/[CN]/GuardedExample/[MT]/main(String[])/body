{
  final Component comp=new Component();
  final Server server=comp.getServers().add(Protocol.HTTP,80);
  final JaxRsApplication application=new JaxRsApplication(comp.getContext().createChildContext());
  final ChallengeGuard guard=new ChallengeGuard(application.getContext(),ChallengeScheme.HTTP_BASIC,"JAX-RS example");
  MemoryRealm realm=new MemoryRealm();
  application.getContext().setRealm(realm);
  Organization organization=new Organization();
  realm.getOrganizations().add(organization);
  organization.getUsers().add(new User("admin","adminPW".toCharArray()));
  organization.getUsers().add(new User("alice","alicesSecret".toCharArray()));
  organization.getUsers().add(new User("bob","bobsSecret".toCharArray()));
  final ExampleRoleChecker roleChecker=new ExampleRoleChecker();
  application.setAuthentication(guard,roleChecker);
  application.add(new ExampleApplication());
  comp.getDefaultHost().attach(application);
  comp.start();
  System.out.println("Server started on port " + server.getPort());
  System.out.println("Press key to stop server");
  System.in.read();
  System.out.println("Stopping server");
  comp.stop();
  System.out.println("Server stopped");
}
