{
  Status result=null;
  try {
    String hostDomain=request.getResourceRef().getHostDomain();
    int hostPort=request.getResourceRef().getHostPort();
    if (hostPort == -1) {
      hostPort=request.getResourceRef().getSchemeProtocol().getDefaultPort();
    }
    Socket socket=createSocket(hostDomain,hostPort);
    this.requestStream=socket.getOutputStream();
    this.responseStream=socket.getInputStream();
    getRequestHeadStream().write(getMethod().getBytes());
    getRequestHeadStream().write(' ');
    getRequestHeadStream().write(getRequestUri().getBytes());
    getRequestHeadStream().write(' ');
    getRequestHeadStream().write(getVersion().getBytes());
    HttpUtils.writeCRLF(getRequestHeadStream());
    if (requestShouldBeChunked(request)) {
      getRequestHeaders().set(HttpConstants.HEADER_TRANSFER_ENCODING,"chunked",true);
      setRequestChunked(true);
    }
    getRequestHeaders().set(HttpConstants.HEADER_CONNECTION,"close",true);
    String host=hostDomain;
    if (request.getResourceRef().getHostPort() != -1) {
      host+=":" + request.getResourceRef().getHostPort();
    }
    getRequestHeaders().set(HttpConstants.HEADER_HOST,host,true);
    for (    Parameter header : getRequestHeaders()) {
      HttpUtils.writeHeader(header,getRequestHeadStream());
    }
    HttpUtils.writeCRLF(getRequestHeadStream());
    super.sendRequest(request);
    parseResponse();
    result=new Status(getStatusCode(),null,getReasonPhrase(),null);
  }
 catch (  IOException ioe) {
    getHelper().getLogger().log(Level.WARNING,"An error occured during the communication with the remote HTTP server.",ioe);
    result=new Status(Status.CONNECTOR_ERROR_COMMUNICATION,"Unable to complete the HTTP call due to a communication error with the remote server. " + ioe.getMessage());
  }
  return result;
}
