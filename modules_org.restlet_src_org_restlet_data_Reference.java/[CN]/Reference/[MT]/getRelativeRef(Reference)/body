{
  Reference result=null;
  if (base == null) {
    result=this;
  }
 else   if (!isAbsolute() || !isHierarchical()) {
    throw new IllegalArgumentException("The reference must have an absolute hierarchical path component");
  }
 else   if (!base.isAbsolute() || !base.isHierarchical()) {
    throw new IllegalArgumentException("The base reference must have an absolute hierarchical path component");
  }
 else   if (!getHostIdentifier().equals(base.getHostIdentifier())) {
    result=this;
  }
 else {
    final String localPath=getPath();
    final String basePath=base.getPath();
    String relativePath=null;
    if ((basePath == null) || (localPath == null)) {
      relativePath=localPath;
    }
 else {
      boolean diffFound=false;
      int lastSlashIndex=-1;
      int i=0;
      char current;
      while (!diffFound && (i < localPath.length()) && (i < basePath.length())) {
        current=localPath.charAt(i);
        if (current != basePath.charAt(i)) {
          diffFound=true;
        }
 else {
          if (current == '/') {
            lastSlashIndex=i;
          }
          i++;
        }
      }
      if (!diffFound) {
        if (localPath.length() == basePath.length()) {
          relativePath=".";
        }
 else         if (i == localPath.length()) {
          if (basePath.charAt(i) == '/') {
            if ((i + 1) == basePath.length()) {
              relativePath=".";
            }
 else {
              final StringBuilder sb=new StringBuilder();
              int segments=0;
              for (int j=basePath.indexOf('/',i); j != -1; j=basePath.indexOf('/',j + 1))               segments++;
              for (int j=0; j < segments; j++)               sb.append("../");
              int lastLocalSlash=localPath.lastIndexOf('/');
              sb.append(localPath.substring(lastLocalSlash + 1));
              relativePath=sb.toString();
            }
          }
 else {
            final StringBuilder sb=new StringBuilder();
            int segments=0;
            for (int j=basePath.indexOf('/',i); j != -1; j=basePath.indexOf('/',j + 1))             segments++;
            for (int j=0; j < segments; j++)             if (j > 0)             sb.append("/..");
 else             sb.append("..");
            relativePath=sb.toString();
            if (relativePath.equals("")) {
              relativePath=".";
            }
          }
        }
 else         if (i == basePath.length()) {
          if (localPath.charAt(i) == '/') {
            if ((i + 1) == localPath.length()) {
              relativePath=".";
            }
 else {
              relativePath=localPath.substring(i + 1);
            }
          }
 else {
            if (lastSlashIndex == (i - 1)) {
              relativePath=localPath.substring(i);
            }
 else {
              relativePath=".." + localPath.substring(lastSlashIndex);
            }
          }
        }
      }
 else {
        final StringBuilder sb=new StringBuilder();
        int segments=0;
        for (int j=basePath.indexOf('/',i); j != -1; j=basePath.indexOf('/',j + 1))         segments++;
        for (int j=0; j < segments; j++)         sb.append("../");
        sb.append(localPath.substring(lastSlashIndex + 1));
        relativePath=sb.toString();
      }
    }
    result=new Reference();
    final String query=getQuery();
    final String fragment=getFragment();
    boolean modified=false;
    if ((query != null) && (!query.equals(base.getQuery()))) {
      result.setQuery(query);
      modified=true;
    }
    if ((fragment != null) && (!fragment.equals(base.getFragment()))) {
      result.setFragment(fragment);
      modified=true;
    }
    if (!modified || !relativePath.equals(".")) {
      result.setPath(relativePath);
    }
  }
  return result;
}
