{
  StringBuffer sb=new StringBuffer();
  Object e;
  int i;
  JSONArray ja;
  String k;
  Iterator keys;
  int len;
  String tagName;
  String v;
  tagName=jo.optString("tagName");
  if (tagName == null) {
    return XML.escape(jo.toString());
  }
  XML.noSpace(tagName);
  tagName=XML.escape(tagName);
  sb.append('<');
  sb.append(tagName);
  keys=jo.keys();
  while (keys.hasNext()) {
    k=keys.next().toString();
    if (!k.equals("tagName") && !k.equals("childNodes")) {
      XML.noSpace(k);
      v=jo.optString(k);
      if (v != null) {
        sb.append(' ');
        sb.append(XML.escape(k));
        sb.append('=');
        sb.append('"');
        sb.append(XML.escape(v));
        sb.append('"');
      }
    }
  }
  ja=jo.optJSONArray("childNodes");
  if (ja == null) {
    sb.append('/');
    sb.append('>');
  }
 else {
    sb.append('>');
    len=ja.length();
    for (i=0; i < len; i+=1) {
      e=ja.get(i);
      if (e != null) {
        if (e instanceof String) {
          sb.append(XML.escape(e.toString()));
        }
 else         if (e instanceof JSONObject) {
          sb.append(toString((JSONObject)e));
        }
 else         if (e instanceof JSONArray) {
          sb.append(toString((JSONArray)e));
        }
      }
    }
    sb.append('<');
    sb.append('/');
    sb.append(tagName);
    sb.append('>');
  }
  return sb.toString();
}
