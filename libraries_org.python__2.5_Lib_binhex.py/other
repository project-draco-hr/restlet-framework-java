'Macintosh binhex compression/decompression.\n\neasy interface:\nbinhex(inputfilename, outputfilename)\nhexbin(inputfilename, outputfilename)\n'
import sys
import os
import struct
import binascii
__all__ = ['binhex', 'hexbin', 'Error']
[_DID_HEADER, _DID_DATA, _DID_RSRC] = range(3)
REASONABLY_LARGE = 32768
LINELEN = 64
RUNCHAR = chr(144)
try:
    from Carbon.File import FSSpec, FInfo
    from MacOS import openrf

    def getfileinfo(name):
        finfo = FSSpec(name).FSpGetFInfo()
        (dir, file) = os.path.split(name)
        fp = open(name, 'rb')
        fp.seek(0, 2)
        dlen = fp.tell()
        fp = openrf(name, '*rb')
        fp.seek(0, 2)
        rlen = fp.tell()
        return (file, finfo, dlen, rlen)

    def openrsrc(name, *mode):
        if (not mode):
            mode = '*rb'
        else:
            mode = ('*' + mode[0])
        return openrf(name, mode)
except ImportError:


    class FInfo:

        def __init__(self):
            self.Type = '????'
            self.Creator = '????'
            self.Flags = 0

    def getfileinfo(name):
        finfo = FInfo()
        fp = open(name)
        data = open(name).read(256)
        for c in data:
            if ((not c.isspace()) and ((c < ' ') or (ord(c) > 127))):
                break
        else:
            finfo.Type = 'TEXT'
        fp.seek(0, 2)
        dsize = fp.tell()
        fp.close()
        (dir, file) = os.path.split(name)
        file = file.replace(':', '-', 1)
        return (file, finfo, dsize, 0)


    class openrsrc:

        def __init__(self, *args):
            pass

        def read(self, *args):
            return ''

        def write(self, *args):
            pass

        def close(self):
            pass
if (__name__ == '__main__'):
    _test()
