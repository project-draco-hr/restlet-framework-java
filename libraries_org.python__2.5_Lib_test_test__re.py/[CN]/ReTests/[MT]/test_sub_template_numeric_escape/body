def test_sub_template_numeric_escape(self):
    self.assertEqual(re.sub('x', '\\0', 'x'), '\x00')
    self.assertEqual(re.sub('x', '\\000', 'x'), '\x00')
    self.assertEqual(re.sub('x', '\\001', 'x'), '\x01')
    self.assertEqual(re.sub('x', '\\008', 'x'), ('\x00' + '8'))
    self.assertEqual(re.sub('x', '\\009', 'x'), ('\x00' + '9'))
    self.assertEqual(re.sub('x', '\\111', 'x'), 'I')
    self.assertEqual(re.sub('x', '\\117', 'x'), 'O')
    self.assertEqual(re.sub('x', '\\1111', 'x'), 'I1')
    self.assertEqual(re.sub('x', '\\1111', 'x'), ('I' + '1'))
    self.assertEqual(re.sub('x', '\\00', 'x'), '\x00')
    self.assertEqual(re.sub('x', '\\07', 'x'), '\x07')
    self.assertEqual(re.sub('x', '\\08', 'x'), ('\x00' + '8'))
    self.assertEqual(re.sub('x', '\\09', 'x'), ('\x00' + '9'))
    self.assertEqual(re.sub('x', '\\0a', 'x'), ('\x00' + 'a'))
    self.assertEqual(re.sub('x', '\\400', 'x'), '\x00')
    self.assertEqual(re.sub('x', '\\777', 'x'), '\xff')
    self.assertRaises(re.error, re.sub, 'x', '\\1', 'x')
    self.assertRaises(re.error, re.sub, 'x', '\\8', 'x')
    self.assertRaises(re.error, re.sub, 'x', '\\9', 'x')
    self.assertRaises(re.error, re.sub, 'x', '\\11', 'x')
    self.assertRaises(re.error, re.sub, 'x', '\\18', 'x')
    self.assertRaises(re.error, re.sub, 'x', '\\1a', 'x')
    self.assertRaises(re.error, re.sub, 'x', '\\90', 'x')
    self.assertRaises(re.error, re.sub, 'x', '\\99', 'x')
    self.assertRaises(re.error, re.sub, 'x', '\\118', 'x')
    self.assertRaises(re.error, re.sub, 'x', '\\11a', 'x')
    self.assertRaises(re.error, re.sub, 'x', '\\181', 'x')
    self.assertRaises(re.error, re.sub, 'x', '\\800', 'x')
    self.assertEqual(re.sub('(((((((((((x)))))))))))', '\\11', 'x'), 'x')
    self.assertEqual(re.sub('((((((((((y))))))))))(.)', '\\118', 'xyz'), 'xz8')
    self.assertEqual(re.sub('((((((((((y))))))))))(.)', '\\11a', 'xyz'), 'xza')
