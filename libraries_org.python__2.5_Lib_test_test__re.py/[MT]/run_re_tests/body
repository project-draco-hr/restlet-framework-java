def run_re_tests():
    from test.re_tests import benchmarks, tests, SUCCEED, FAIL, SYNTAX_ERROR
    if verbose:
        print 'Running re_tests test suite'
    else:
        pass
    for t in tests:
        sys.stdout.flush()
        pattern = s = outcome = repl = expected = None
        if (len(t) == 5):
            (pattern, s, outcome, repl, expected) = t
        elif (len(t) == 3):
            (pattern, s, outcome) = t
        else:
            raise ValueError, ('Test tuples should have 3 or 5 fields', t)
        try:
            obj = re.compile(pattern)
        except re.error:
            if (outcome == SYNTAX_ERROR):
                pass
            else:
                print '=== Syntax error:', t
        except KeyboardInterrupt:
            raise KeyboardInterrupt
        except:
            print '*** Unexpected error ***', t
            if verbose:
                traceback.print_exc(file=sys.stdout)
        else:
            try:
                result = obj.search(s)
            except re.error as msg:
                print '=== Unexpected exception', t, repr(msg)
            if (outcome == SYNTAX_ERROR):
                pass
            elif (outcome == FAIL):
                if (result is None):
                    pass
                else:
                    print '=== Succeeded incorrectly', t
            elif (outcome == SUCCEED):
                if (result is not None):
                    (start, end) = result.span(0)
                    vardict = {'found': result.group(0), 'groups': result.group(), 'flags': result.re.flags, }
                    for i in range(1, 100):
                        try:
                            gi = result.group(i)
                            if (gi is None):
                                gi = 'None'
                        except IndexError:
                            gi = 'Error'
                        vardict[('g%d' % i)] = gi
                    for i in result.re.groupindex.keys():
                        try:
                            gi = result.group(i)
                            if (gi is None):
                                gi = 'None'
                        except IndexError:
                            gi = 'Error'
                        vardict[i] = gi
                    repl = eval(repl, vardict)
                    if (repl != expected):
                        print '=== grouping error', t,
                        print ((repr(repl) + ' should be ') + repr(expected))
                else:
                    print '=== Failed incorrectly', t
                try:
                    result = obj.search(unicode(s, 'latin-1'))
                    if (result is None):
                        print '=== Fails on unicode match', t
                except NameError:
                    continue
                except TypeError:
                    continue
                obj = re.compile(unicode(pattern, 'latin-1'))
                result = obj.search(s)
                if (result is None):
                    print '=== Fails on unicode pattern match', t
                if ((pattern[:2] != '\\B') and (pattern[(-2):] != '\\B') and (result is not None)):
                    obj = re.compile(pattern)
                    result = obj.search(s, result.start(0), (result.end(0) + 1))
                    if (result is None):
                        print '=== Failed on range-limited match', t
                obj = re.compile(pattern, re.IGNORECASE)
                result = obj.search(s)
                if (result is None):
                    print '=== Fails on case-insensitive match', t
                obj = re.compile(pattern, re.LOCALE)
                result = obj.search(s)
                if (result is None):
                    print '=== Fails on locale-sensitive match', t
                obj = re.compile(pattern, re.UNICODE)
                result = obj.search(s)
                if (result is None):
                    print '=== Fails on unicode-sensitive match', t
