{
  Representation result=null;
  final long contentLength=getContentLength();
  final InputStream requestStream=getRequestEntityStream(contentLength);
  final ReadableByteChannel requestChannel=getRequestEntityChannel(contentLength);
  if (requestStream != null) {
    result=new InputRepresentation(requestStream,null,contentLength);
  }
 else   if (requestChannel != null) {
    result=new ReadableRepresentation(requestChannel,null,contentLength);
  }
  result.setSize(contentLength);
  for (  final Parameter header : getRequestHeaders()) {
    if (header.getName().equalsIgnoreCase(HttpConstants.HEADER_CONTENT_ENCODING)) {
      final HeaderReader hr=new HeaderReader(header.getValue());
      String value=hr.readValue();
      while (value != null) {
        final Encoding encoding=Encoding.valueOf(value);
        if (!encoding.equals(Encoding.IDENTITY)) {
          result.getEncodings().add(encoding);
        }
        value=hr.readValue();
      }
    }
 else     if (header.getName().equalsIgnoreCase(HttpConstants.HEADER_CONTENT_LANGUAGE)) {
      final HeaderReader hr=new HeaderReader(header.getValue());
      String value=hr.readValue();
      while (value != null) {
        result.getLanguages().add(Language.valueOf(value));
        value=hr.readValue();
      }
    }
 else     if (header.getName().equalsIgnoreCase(HttpConstants.HEADER_CONTENT_TYPE)) {
      final ContentType contentType=new ContentType(header.getValue());
      result.setMediaType(contentType.getMediaType());
      result.setCharacterSet(contentType.getCharacterSet());
    }
 else     if (header.getName().equalsIgnoreCase(HttpConstants.HEADER_CONTENT_RANGE)) {
      RangeUtils.parseContentRange(header.getValue(),result);
    }
 else     if (header.getName().equalsIgnoreCase(HttpConstants.HEADER_CONTENT_MD5)) {
      result.setDigest(new Digest(Digest.ALGORITHM_MD5,Base64.decode(header.getValue())));
    }
  }
  return result;
}
