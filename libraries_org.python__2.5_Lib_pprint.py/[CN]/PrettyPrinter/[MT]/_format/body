def _format(self, object, stream, indent, allowance, context, level):
    level = (level + 1)
    objid = _id(object)
    if (objid in context):
        stream.write(_recursion(object))
        self._recursive = True
        self._readable = False
        return
    rep = self._repr(object, context, (level - 1))
    typ = _type(object)
    sepLines = (_len(rep) > (((self._width - 1) - indent) - allowance))
    write = stream.write
    if sepLines:
        r = getattr(typ, '__repr__', None)
        if (issubclass(typ, dict) and (r is dict.__repr__)):
            write('{')
            if (self._indent_per_level > 1):
                write(((self._indent_per_level - 1) * ' '))
            length = _len(object)
            if length:
                context[objid] = 1
                indent = (indent + self._indent_per_level)
                items = object.items()
                items.sort()
                (key, ent) = items[0]
                rep = self._repr(key, context, level)
                write(rep)
                write(': ')
                self._format(ent, stream, ((indent + _len(rep)) + 2), (allowance + 1), context, level)
                if (length > 1):
                    for (key, ent) in items[1:]:
                        rep = self._repr(key, context, level)
                        write((',\n%s%s: ' % ((' ' * indent), rep)))
                        self._format(ent, stream, ((indent + _len(rep)) + 2), (allowance + 1), context, level)
                indent = (indent - self._indent_per_level)
                del context[objid]
            write('}')
            return
        if ((issubclass(typ, list) and (r is list.__repr__)) or (issubclass(typ, tuple) and (r is tuple.__repr__))):
            if issubclass(typ, list):
                write('[')
                endchar = ']'
            else:
                write('(')
                endchar = ')'
            if (self._indent_per_level > 1):
                write(((self._indent_per_level - 1) * ' '))
            length = _len(object)
            if length:
                context[objid] = 1
                indent = (indent + self._indent_per_level)
                self._format(object[0], stream, indent, (allowance + 1), context, level)
                if (length > 1):
                    for ent in object[1:]:
                        write((',\n' + (' ' * indent)))
                        self._format(ent, stream, indent, (allowance + 1), context, level)
                indent = (indent - self._indent_per_level)
                del context[objid]
            if (issubclass(typ, tuple) and (length == 1)):
                write(',')
            write(endchar)
            return
    write(rep)
