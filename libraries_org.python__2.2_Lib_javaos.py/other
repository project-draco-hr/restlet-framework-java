"OS routines for Java, with some attempts to support DOS, NT, and\nPosix functionality.\n\nThis exports:\n  - all functions from posix, nt, dos, os2, mac, or ce, e.g. unlink, stat, etc.\n  - os.path is one of the modules posixpath, ntpath, macpath, or dospath\n  - os.name is 'posix', 'nt', 'dos', 'os2', 'mac', 'ce' or 'riscos'\n  - os.curdir is a string representing the current directory ('.' or ':')\n  - os.pardir is a string representing the parent directory ('..' or '::')\n  - os.sep is the (or a most common) pathname separator ('/' or ':' or '\\\\')\n  - os.altsep is the alternate pathname separator (None or '/')\n  - os.pathsep is the component separator used in $PATH etc\n  - os.linesep is the line separator in text files ('\\r' or '\\n' or '\\r\\n')\n  - os.defpath is the default search path for executables\n\nPrograms that import and use 'os' stand a better chance of being\nportable between different platforms.  Of course, they must then\nonly use functions that are defined by all platforms (e.g., unlink\nand opendir), and leave all pathname manipulation to os.path\n(e.g., split and join).\n"
__all__ = ['altsep', 'curdir', 'pardir', 'sep', 'pathsep', 'linesep', 'defpath', 'name', 'system', 'environ', 'putenv', 'getenv', 'popen', 'popen2', 'popen3', 'popen4', 'getlogin']
from java.io import File
import java.lang.System
import javapath as path
from UserDict import UserDict
import time
error = OSError
name = 'java'
curdir = '.'
pardir = '..'
sep = File.separator
altsep = None
pathsep = File.pathSeparator
defpath = '.'
linesep = java.lang.System.getProperty('line.separator')
if (sep == '.'):
    extsep = '/'
else:
    extsep = '.'
path.curdir = curdir
path.pardir = pardir
path.sep = sep
path.altsep = altsep
path.pathsep = pathsep
path.defpath = defpath
path.extsep = extsep
unlink = remove
environ = LazyDict(populate=_getEnvironment)
putenv = environ.__setitem__
