def test_fromkeys(self):
    self.assertEqual(dict.fromkeys('abc'), {'a': None, 'b': None, 'c': None, })
    d = {}
    self.assert_((not (d.fromkeys('abc') is d)))
    self.assertEqual(d.fromkeys('abc'), {'a': None, 'b': None, 'c': None, })
    self.assertEqual(d.fromkeys((4, 5), 0), {4: 0, 5: 0, })
    self.assertEqual(d.fromkeys([]), {})

    def g():
        yield 1
    self.assertEqual(d.fromkeys(g()), {1: None, })
    self.assertRaises(TypeError, {}.fromkeys, 3)


    class dictlike(dict):
        pass
    self.assertEqual(dictlike.fromkeys('a'), {'a': None, })
    self.assertEqual(dictlike().fromkeys('a'), {'a': None, })
    self.assert_((type(dictlike.fromkeys('a')) is dictlike))
    self.assert_((type(dictlike().fromkeys('a')) is dictlike))


    class mydict(dict):

        def __new__(cls):
            return UserDict.UserDict()
    ud = mydict.fromkeys('ab')
    self.assertEqual(ud, {'a': None, 'b': None, })
    self.assert_(isinstance(ud, UserDict.UserDict))
    self.assertRaises(TypeError, dict.fromkeys)


    class Exc(Exception):
        pass


    class baddict1(dict):

        def __init__(self):
            raise Exc()
    self.assertRaises(Exc, baddict1.fromkeys, [1])


    class BadSeq(object):

        def __iter__(self):
            return self

        def next(self):
            raise Exc()
    self.assertRaises(Exc, dict.fromkeys, BadSeq())


    class baddict2(dict):

        def __setitem__(self, key, value):
            raise Exc()
    self.assertRaises(Exc, baddict2.fromkeys, [1])
