def test_missing(self):
    self.assertEqual(hasattr(dict, '__missing__'), False)
    self.assertEqual(hasattr({}, '__missing__'), False)


    class D(dict):

        def __missing__(self, key):
            return 42
    d = D({1: 2, 3: 4, })
    self.assertEqual(d[1], 2)
    self.assertEqual(d[3], 4)
    self.assert_((2 not in d))
    self.assert_((2 not in d.keys()))
    self.assertEqual(d[2], 42)


    class E(dict):

        def __missing__(self, key):
            raise RuntimeError(key)
    e = E()
    try:
        e[42]
    except RuntimeError as err:
        self.assertEqual(err.args, (42,))
    else:
        self.fail("e[42] didn't raise RuntimeError")


    class F(dict):

        def __init__(self):
            self.__missing__ = (lambda key: None)
    f = F()
    try:
        f[42]
    except KeyError as err:
        self.assertEqual(err.args, (42,))
    else:
        self.fail("f[42] didn't raise KeyError")


    class G(dict):
        pass
    g = G()
    try:
        g[42]
    except KeyError as err:
        self.assertEqual(err.args, (42,))
    else:
        self.fail("g[42] didn't raise KeyError")
