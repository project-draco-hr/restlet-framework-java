{
  if (clientAddress == null) {
    clientAddress=(InetSocketAddress)e.getRemoteAddress();
  }
  boolean isLastChunk=false;
  if (!readingChunks) {
    request=(HttpRequest)e.getMessage();
    if (request.isChunked()) {
      readingChunks=true;
    }
 else {
      content=request.getContent();
    }
  }
 else {
    HttpChunk chunk=(HttpChunk)e.getMessage();
    if (chunk.isLast()) {
      readingChunks=false;
      isLastChunk=true;
    }
    long chunkSize=chunk.getContent().readableBytes();
    content.writeBytes(longToHex(chunkSize));
    content.writeByte(CR);
    content.writeByte(LF);
    content.writeBytes(chunk.getContent());
    content.writeByte(CR);
    content.writeByte(LF);
  }
  if (content == null) {
    content=ChannelBuffers.dynamicBuffer();
  }
  HttpResponse response=null;
  if ((!request.isChunked()) || isLastChunk) {
    SslHandler sslHandler=ctx.getPipeline().get(SslHandler.class);
    SSLEngine sslEngine=sslHandler == null ? null : sslHandler.getEngine();
    NettyServerCall httpCall=new NettyServerCall(this.helper.getHelped(),content,request,clientAddress,(this.helper instanceof HttpsServerHelper),sslEngine);
    this.helper.handle(httpCall);
    response=httpCall.getResponse();
  }
  Channel ch=e.getChannel();
  if (request.isChunked()) {
    if (isLastChunk) {
      ChannelFuture future=ch.write(response);
      future.addListener(ChannelFutureListener.CLOSE);
    }
  }
 else {
    ChannelFuture future=ch.write(response);
    if (shouldCloseConnection()) {
      future.addListener(ChannelFutureListener.CLOSE);
    }
  }
}
