{
  onActivity();
  if (getLogger().isLoggable(Level.FINER)) {
    String trace=null;
    if (isClientSide()) {
      trace="Client ";
    }
 else {
      trace="Server ";
    }
    getLogger().finer(trace + "connection (state | inbound | outbound): " + toString());
    if (this.registration != null) {
      getLogger().finer(trace + "NIO selection (interest | ready | cancelled): " + this.registration.toString());
    }
  }
  try {
    if (registration == null) {
      getLogger().warning("Connection with no registration selected: " + this);
    }
 else     if (registration.isReadable()) {
synchronized (getInboundWay().getBuffer().getLock()) {
        getInboundWay().getRegistration().onSelected(registration.getReadyOperations());
      }
    }
 else     if (registration.isWritable()) {
synchronized (getOutboundWay().getBuffer().getLock()) {
        getOutboundWay().getRegistration().onSelected(registration.getReadyOperations());
      }
    }
 else     if (registration.isConnectable()) {
      try {
        if (getSocketChannel().finishConnect()) {
          open();
        }
 else {
          onError("Unable to establish a connection to " + getSocketAddress(),null,Status.CONNECTOR_ERROR_CONNECTION);
        }
      }
 catch (      IOException e) {
        onError("Unable to establish a connection to " + getSocketAddress(),e,Status.CONNECTOR_ERROR_CONNECTION);
      }
    }
  }
 catch (  Throwable t) {
    onError("Unexpected error detected. Closing the connection.",t,Status.CONNECTOR_ERROR_INTERNAL);
  }
}
