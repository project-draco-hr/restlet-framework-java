{
  this.persistent=helper.isPersistingConnections();
  this.pipelining=helper.isPipeliningConnections();
  this.state=ConnectionState.OPENING;
  this.socketChannel=socketChannel;
  this.socketAddress=socketAddress;
  if ((controller != null) && (socketChannel != null) && (socketAddress != null)) {
    this.registration=(controller == null) ? null : controller.register(socketChannel,0,this);
    if (helper.isTracing()) {
      this.readableSelectionChannel=new ReadableTraceChannel(new ReadableSocketChannel(socketChannel,registration));
      this.writableSelectionChannel=new WritableTraceChannel(new WritableSocketChannel(socketChannel,registration));
    }
 else {
      this.readableSelectionChannel=new ReadableSocketChannel(socketChannel,registration);
      this.writableSelectionChannel=new WritableSocketChannel(socketChannel,registration);
    }
  }
  this.lastActivity=System.currentTimeMillis();
  this.inboundWay.reuse();
  this.outboundWay.reuse();
}
