{
  HttpUrlConnectionCall clientCall=null;
  try {
    clientCall=new HttpUrlConnectionCall(this,call.getMethod().toString(),call.getResourceRef().toString(),hasInput(call));
    if (call.getClient().getName() != null) {
      clientCall.getRequestHeaders().add(HttpConstants.HEADER_USER_AGENT,call.getClient().getName());
    }
 else {
      clientCall.getRequestHeaders().add(HttpConstants.HEADER_USER_AGENT,Factory.VERSION_HEADER);
    }
    ConditionData condition=call.getCondition();
    if (condition.getMatch() != null) {
      StringBuilder value=new StringBuilder();
      for (int i=0; i < condition.getMatch().size(); i++) {
        if (i > 0)         value.append(", ");
        value.append(condition.getMatch().get(i).getName());
      }
      clientCall.getRequestHeaders().add(HttpConstants.HEADER_IF_MATCH,value.toString());
    }
    if (condition.getModifiedSince() != null) {
      String imsDate=DateUtils.format(condition.getModifiedSince(),DateUtils.FORMAT_RFC_1123[0]);
      clientCall.getRequestHeaders().add(HttpConstants.HEADER_IF_MODIFIED_SINCE,imsDate);
    }
    if (condition.getNoneMatch() != null) {
      StringBuilder value=new StringBuilder();
      for (int i=0; i < condition.getNoneMatch().size(); i++) {
        if (i > 0)         value.append(", ");
        value.append(condition.getNoneMatch().get(i).getName());
      }
      clientCall.getRequestHeaders().add(HttpConstants.HEADER_IF_NONE_MATCH,value.toString());
    }
    if (condition.getUnmodifiedSince() != null) {
      String iusDate=DateUtils.format(condition.getUnmodifiedSince(),DateUtils.FORMAT_RFC_1123[0]);
      clientCall.getRequestHeaders().add(HttpConstants.HEADER_IF_UNMODIFIED_SINCE,iusDate);
    }
    if (call.getCookies().size() > 0) {
      String cookies=CookieUtils.format(call.getCookies());
      clientCall.getRequestHeaders().add(HttpConstants.HEADER_COOKIE,cookies);
    }
    if (call.getReferrerRef() != null) {
      clientCall.getRequestHeaders().add(HttpConstants.HEADER_REFERRER,call.getReferrerRef().toString());
    }
    ClientData client=call.getClient();
    if (client.getAcceptedMediaTypes().size() > 0) {
      clientCall.getRequestHeaders().add(HttpConstants.HEADER_ACCEPT,PreferenceUtils.format(client.getAcceptedMediaTypes()));
    }
 else {
      clientCall.getRequestHeaders().add(HttpConstants.HEADER_ACCEPT,MediaType.ALL.getName());
    }
    if (client.getAcceptedCharacterSets().size() > 0) {
      clientCall.getRequestHeaders().add(HttpConstants.HEADER_ACCEPT_CHARSET,PreferenceUtils.format(client.getAcceptedCharacterSets()));
    }
    if (client.getAcceptedEncodings().size() > 0) {
      clientCall.getRequestHeaders().add(HttpConstants.HEADER_ACCEPT_ENCODING,PreferenceUtils.format(client.getAcceptedEncodings()));
    }
    if (client.getAcceptedLanguages().size() > 0) {
      clientCall.getRequestHeaders().add(HttpConstants.HEADER_ACCEPT_LANGUAGE,PreferenceUtils.format(client.getAcceptedLanguages()));
    }
    ChallengeResponse response=call.getSecurity().getChallengeResponse();
    if (response != null) {
      clientCall.getRequestHeaders().add(HttpConstants.HEADER_AUTHORIZATION,SecurityUtils.format(response));
    }
    if (hasInput(call)) {
      if (call.getInput().getSize() > 0) {
        clientCall.getConnection().setFixedLengthStreamingMode((int)call.getInput().getSize());
      }
 else {
        if (getChunkLength() >= 0) {
          clientCall.getConnection().setChunkedStreamingMode(getChunkLength());
        }
 else {
        }
      }
      if (call.getInput().getMediaType() != null) {
        clientCall.getRequestHeaders().add(HttpConstants.HEADER_CONTENT_TYPE,call.getInput().getMediaType().toString());
      }
      if (call.getInput().getEncoding() != null) {
        clientCall.getRequestHeaders().add(HttpConstants.HEADER_CONTENT_ENCODING,call.getInput().getEncoding().toString());
      }
      if (call.getInput().getLanguage() != null) {
        clientCall.getRequestHeaders().add(HttpConstants.HEADER_CONTENT_LANGUAGE,call.getInput().getLanguage().toString());
      }
    }
  }
 catch (  Exception e) {
    logger.log(Level.FINE,"An unexpected error occured during the preparation of the HTTP client call.",e);
    call.setStatus(new Status(Status.CONNECTOR_ERROR_INTERNAL,"Unable to create the HTTP call and its headers. " + e.getMessage()));
  }
  try {
    clientCall.sendRequestHeaders();
    if (hasInput(call)) {
      clientCall.sendRequestInput(call.getInput());
    }
    call.setStatus(new Status(clientCall.getResponseStatusCode(),null,clientCall.getResponseReasonPhrase(),null));
  }
 catch (  ConnectException ce) {
    logger.log(Level.FINE,"An error occured during the connection to the remote HTTP server.",ce);
    call.setStatus(new Status(Status.CONNECTOR_ERROR_CONNECTION,"Unable to connect to the remote server. " + ce.getMessage()));
  }
catch (  SocketTimeoutException ste) {
    logger.log(Level.FINE,"An timeout error occured during the communication with the remote HTTP server.",ste);
    call.setStatus(new Status(Status.CONNECTOR_ERROR_COMMUNICATION,"Unable to complete the HTTP call due to a communication timeout error. " + ste.getMessage()));
  }
catch (  FileNotFoundException fnfe) {
    logger.log(Level.FINE,"An unexpected error occured during the sending of the HTTP request.",fnfe);
    call.setStatus(new Status(Status.CONNECTOR_ERROR_INTERNAL,"Unable to find a local file for sending. " + fnfe.getMessage()));
  }
catch (  IOException ioe) {
    logger.log(Level.FINE,"An error occured during the communication with the remote HTTP server.",ioe);
    call.setStatus(new Status(Status.CONNECTOR_ERROR_COMMUNICATION,"Unable to complete the HTTP call due to a communication error with the remote server. " + ioe.getMessage()));
  }
catch (  Exception e) {
    logger.log(Level.FINE,"An unexpected error occured during the sending of the HTTP request.",e);
    call.setStatus(new Status(Status.CONNECTOR_ERROR_INTERNAL,"Unable to send the HTTP request. " + e.getMessage()));
  }
  try {
    call.getServer().setAddress(clientCall.getResponseAddress());
    for (    Parameter header : clientCall.getResponseHeaders()) {
      if (header.getName().equalsIgnoreCase(HttpConstants.HEADER_LOCATION)) {
        call.setRedirectRef(header.getValue());
      }
 else       if ((header.getName().equalsIgnoreCase(HttpConstants.HEADER_SET_COOKIE)) || (header.getName().equalsIgnoreCase(HttpConstants.HEADER_SET_COOKIE2))) {
        try {
          CookieReader cr=new CookieReader(header.getValue());
          call.getCookieSettings().add(cr.readCookieSetting());
        }
 catch (        Exception e) {
          logger.log(Level.WARNING,"Error during cookie setting parsing. Header: " + header.getValue(),e);
        }
      }
 else       if (header.getName().equalsIgnoreCase(HttpConstants.HEADER_WWW_AUTHENTICATE)) {
        ChallengeRequest request=SecurityUtils.parseRequest(header.getValue());
        call.getSecurity().setChallengeRequest(request);
      }
 else       if (header.getName().equalsIgnoreCase(HttpConstants.HEADER_SERVER)) {
        call.getServer().setName(header.getValue());
      }
    }
    call.setOutput(clientCall.getResponseOutput());
  }
 catch (  Exception e) {
    logger.log(Level.FINE,"An error occured during the processing of the HTTP response.",e);
    call.setStatus(new Status(Status.CONNECTOR_ERROR_INTERNAL,"Unable to process the response. " + e.getMessage()));
  }
}
