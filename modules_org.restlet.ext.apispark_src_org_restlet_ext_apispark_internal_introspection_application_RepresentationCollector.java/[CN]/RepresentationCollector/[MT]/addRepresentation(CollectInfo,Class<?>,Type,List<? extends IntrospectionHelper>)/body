{
  Representation representation=new Representation();
  representation.setDescription("");
  Class<?> c=ReflectUtils.getSimpleClass(type);
  Class<?> representationType=(c == null) ? clazz : c;
  boolean generic=c != null && !c.getCanonicalName().equals(clazz.getCanonicalName());
  boolean isList=ReflectUtils.isListType(clazz);
  if (generic || isList) {
    addRepresentation(collectInfo,representationType,representationType.getGenericSuperclass(),introspectionHelper);
    return null;
  }
  if (Types.isPrimitiveType(representationType) || ReflectUtils.isJdkClass(representationType)) {
    return null;
  }
  boolean isFile=org.restlet.representation.Representation.class.isAssignableFrom(clazz);
  if (isFile) {
    representation.setIdentifier("file");
    representation.setName("file");
  }
 else {
    representation.setIdentifier(Types.convertPrimitiveType(representationType));
    if (collectInfo.isUseSectionNamingPackageStrategy()) {
      String packageName=clazz.getPackage().getName();
      representation.getSections().add(packageName);
      if (collectInfo.getSection(packageName) == null) {
        collectInfo.addSection(new Section(packageName));
      }
    }
    representation.setName(representationType.getSimpleName());
  }
  boolean isRaw=isFile || ReflectUtils.isJdkClass(representationType);
  representation.setRaw(isRaw);
  boolean notInCache=collectInfo.getRepresentation(representation.getIdentifier()) == null;
  if (notInCache) {
    collectInfo.addRepresentation(representation);
    if (!isRaw) {
      BeanInfo beanInfo=BeanInfoUtils.getBeanInfo(representationType);
      for (      PropertyDescriptor pd : beanInfo.getPropertyDescriptors()) {
        Class<?> propertyClazz=pd.getReadMethod().getReturnType();
        Type propertyType=pd.getReadMethod().getGenericReturnType();
        Property property=new Property();
        property.setName(pd.getName());
        property.setDescription("");
        property.setType(Types.convertPrimitiveType(ReflectUtils.getSimpleClass(propertyType)));
        property.setMinOccurs(0);
        boolean isCollection=ReflectUtils.isListType(propertyClazz);
        property.setMaxOccurs(isCollection ? -1 : 1);
        addRepresentation(collectInfo,propertyClazz,propertyType,introspectionHelper);
        for (        IntrospectionHelper helper : introspectionHelper) {
          helper.processProperty(property,pd.getReadMethod());
        }
        representation.getProperties().add(property);
      }
    }
    for (    IntrospectionHelper helper : introspectionHelper) {
      helper.processRepresentation(representation,representationType);
    }
  }
  return representation.getIdentifier();
}
