'Configuration file parser.\n\nA setup file consists of sections, lead by a "[section]" header,\nand followed by "name: value" entries, with continuations and such in\nthe style of RFC 822.\n\nThe option values can contain format strings which refer to other values in\nthe same section, or values in a special [DEFAULT] section.\n\nFor example:\n\n    something: %(dir)s/whatever\n\nwould resolve the "%(dir)s" to the value of dir.  All reference\nexpansions are done late, on demand.\n\nIntrinsic defaults can be specified by passing them into the\nConfigParser constructor as a dictionary.\n\nclass:\n\nConfigParser -- responsible for parsing a list of\n                configuration files, and managing the parsed database.\n\n    methods:\n\n    __init__(defaults=None)\n        create the parser and specify a dictionary of intrinsic defaults.  The\n        keys must be strings, the values must be appropriate for %()s string\n        interpolation.  Note that `__name__\' is always an intrinsic default;\n        its value is the section\'s name.\n\n    sections()\n        return all the configuration section names, sans DEFAULT\n\n    has_section(section)\n        return whether the given section exists\n\n    has_option(section, option)\n        return whether the given option exists in the given section\n\n    options(section)\n        return list of configuration options for the named section\n\n    read(filenames)\n        read and parse the list of named configuration files, given by\n        name.  A single filename is also allowed.  Non-existing files\n        are ignored.  Return list of successfully read files.\n\n    readfp(fp, filename=None)\n        read and parse one configuration file, given as a file object.\n        The filename defaults to fp.name; it is only used in error\n        messages (if fp has no `name\' attribute, the string `<???>\' is used).\n\n    get(section, option, raw=False, vars=None)\n        return a string value for the named option.  All % interpolations are\n        expanded in the return values, based on the defaults passed into the\n        constructor and the DEFAULT section.  Additional substitutions may be\n        provided using the `vars\' argument, which must be a dictionary whose\n        contents override any pre-existing defaults.\n\n    getint(section, options)\n        like get(), but convert value to an integer\n\n    getfloat(section, options)\n        like get(), but convert value to a float\n\n    getboolean(section, options)\n        like get(), but convert value to a boolean (currently case\n        insensitively defined as 0, false, no, off for False, and 1, true,\n        yes, on for True).  Returns False or True.\n\n    items(section, raw=False, vars=None)\n        return a list of tuples with (name, value) for each option\n        in the section.\n\n    remove_section(section)\n        remove the given file section and all its options\n\n    remove_option(section, option)\n        remove the given option from the given section\n\n    set(section, option, value)\n        set the given option\n\n    write(fp)\n        write the configuration state in .ini format\n'
import re
__all__ = ['NoSectionError', 'DuplicateSectionError', 'NoOptionError', 'InterpolationError', 'InterpolationDepthError', 'InterpolationSyntaxError', 'ParsingError', 'MissingSectionHeaderError', 'ConfigParser', 'SafeConfigParser', 'RawConfigParser', 'DEFAULTSECT', 'MAX_INTERPOLATION_DEPTH']
DEFAULTSECT = 'DEFAULT'
MAX_INTERPOLATION_DEPTH = 10
