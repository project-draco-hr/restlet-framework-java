@bigmemtest(minsize=(_2G + 10), memuse=8)
def test_index_and_slice(self, size):
    l = ([None] * size)
    self.assertEquals(len(l), size)
    self.assertEquals(l[(-1)], None)
    self.assertEquals(l[5], None)
    self.assertEquals(l[(size - 1)], None)
    self.assertRaises(IndexError, operator.getitem, l, size)
    self.assertEquals(l[:5], ([None] * 5))
    self.assertEquals(l[(-5):], ([None] * 5))
    self.assertEquals(l[20:25], ([None] * 5))
    self.assertEquals(l[(-25):(-20)], ([None] * 5))
    self.assertEquals(l[(size - 5):], ([None] * 5))
    self.assertEquals(l[(size - 5):size], ([None] * 5))
    self.assertEquals(l[(size - 6):(size - 2)], ([None] * 4))
    self.assertEquals(l[size:size], [])
    self.assertEquals(l[size:(size + 5)], [])
    l[(size - 2)] = 5
    self.assertEquals(len(l), size)
    self.assertEquals(l[(-3):], [None, 5, None])
    self.assertEquals(l.count(5), 1)
    self.assertRaises(IndexError, operator.setitem, l, size, 6)
    self.assertEquals(len(l), size)
    l[(size - 7):] = [1, 2, 3, 4, 5]
    size -= 2
    self.assertEquals(len(l), size)
    self.assertEquals(l[(-7):], [None, None, 1, 2, 3, 4, 5])
    l[:7] = [1, 2, 3, 4, 5]
    size -= 2
    self.assertEquals(len(l), size)
    self.assertEquals(l[:7], [1, 2, 3, 4, 5, None, None])
    del l[(size - 1)]
    size -= 1
    self.assertEquals(len(l), size)
    self.assertEquals(l[(-1)], 4)
    del l[(-2):]
    size -= 2
    self.assertEquals(len(l), size)
    self.assertEquals(l[(-1)], 2)
    del l[0]
    size -= 1
    self.assertEquals(len(l), size)
    self.assertEquals(l[0], 2)
    del l[:2]
    size -= 2
    self.assertEquals(len(l), size)
    self.assertEquals(l[0], 4)
