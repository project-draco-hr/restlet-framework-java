import pyexpat
from xml.parsers import expat
from test_support import sortdict
out = Outputter()
parser = expat.ParserCreate(namespace_separator='!')
parser.returns_unicode = 0
confirm((parser.returns_unicode == 0))
parser.returns_unicode = 1
confirm((parser.returns_unicode == 1))
parser.returns_unicode = 2
confirm((parser.returns_unicode == 1))
parser.returns_unicode = 0
confirm((parser.returns_unicode == 0))
parser.ordered_attributes = 0
confirm((parser.ordered_attributes == 0))
parser.ordered_attributes = 1
confirm((parser.ordered_attributes == 1))
parser.ordered_attributes = 2
confirm((parser.ordered_attributes == 1))
parser.ordered_attributes = 0
confirm((parser.ordered_attributes == 0))
parser.specified_attributes = 0
confirm((parser.specified_attributes == 0))
parser.specified_attributes = 1
confirm((parser.specified_attributes == 1))
parser.specified_attributes = 2
confirm((parser.specified_attributes == 1))
parser.specified_attributes = 0
confirm((parser.specified_attributes == 0))
HANDLER_NAMES = ['StartElementHandler', 'EndElementHandler', 'CharacterDataHandler', 'ProcessingInstructionHandler', 'UnparsedEntityDeclHandler', 'NotationDeclHandler', 'StartNamespaceDeclHandler', 'EndNamespaceDeclHandler', 'CommentHandler', 'StartCdataSectionHandler', 'EndCdataSectionHandler', 'DefaultHandler', 'DefaultHandlerExpand', 'ExternalEntityRefHandler']
for name in HANDLER_NAMES:
    setattr(parser, name, getattr(out, name))
data = '<?xml version="1.0" encoding="iso-8859-1" standalone="no"?>\n<?xml-stylesheet href="stylesheet.css"?>\n<!-- comment data -->\n<!DOCTYPE quotations SYSTEM "quotations.dtd" [\n<!ELEMENT root ANY>\n<!NOTATION notation SYSTEM "notation.jpeg">\n<!ENTITY acirc "&#226;">\n<!ENTITY external_entity SYSTEM "entity.file">\n<!ENTITY unparsed_entity SYSTEM "entity.file" NDATA notation>\n%unparsed_entity;\n]>\n\n<root attr1="value1" attr2="value2&#8000;">\n<myns:subelement xmlns:myns="http://www.python.org/namespace">\n     Contents of subelements\n</myns:subelement>\n<sub2><![CDATA[contents of CDATA section]]></sub2>\n&external_entity;\n</root>\n'
parser.returns_unicode = 0
try:
    parser.Parse(data, 1)
except expat.error:
    print '** Error', parser.ErrorCode, expat.ErrorString(parser.ErrorCode)
    print '** Line', parser.ErrorLineNumber
    print '** Column', parser.ErrorColumnNumber
    print '** Byte', parser.ErrorByteIndex
parser = expat.ParserCreate(namespace_separator='!')
parser.returns_unicode = 1
for name in HANDLER_NAMES:
    setattr(parser, name, getattr(out, name))
try:
    parser.Parse(data, 1)
except expat.error:
    print '** Error', parser.ErrorCode, expat.ErrorString(parser.ErrorCode)
    print '** Line', parser.ErrorLineNumber
    print '** Column', parser.ErrorColumnNumber
    print '** Byte', parser.ErrorByteIndex
parser = expat.ParserCreate(namespace_separator='!')
parser.returns_unicode = 1
for name in HANDLER_NAMES:
    setattr(parser, name, getattr(out, name))
import StringIO
file = StringIO.StringIO(data)
try:
    parser.ParseFile(file)
except expat.error:
    print '** Error', parser.ErrorCode, expat.ErrorString(parser.ErrorCode)
    print '** Line', parser.ErrorLineNumber
    print '** Column', parser.ErrorColumnNumber
    print '** Byte', parser.ErrorByteIndex
print 
print 'Testing constructor for proper handling of namespace_separator values:'
expat.ParserCreate()
expat.ParserCreate(namespace_separator=None)
expat.ParserCreate(namespace_separator=' ')
print 'Legal values tested o.k.'
try:
    expat.ParserCreate(namespace_separator=42)
except TypeError as e:
    print 'Caught expected TypeError:'
    print e
else:
    print 'Failed to catch expected TypeError.'
try:
    expat.ParserCreate(namespace_separator='too long')
except ValueError as e:
    print 'Caught expected ValueError:'
    print e
else:
    print 'Failed to catch expected ValueError.'
expat.ParserCreate(namespace_separator='')
