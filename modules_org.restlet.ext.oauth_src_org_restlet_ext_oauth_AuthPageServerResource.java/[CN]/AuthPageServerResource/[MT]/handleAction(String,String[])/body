{
  AuthSession session=getAuthSession();
  session.setGrantedScope(grantedScope);
  if (action.equals(ACTION_REJECT)) {
    getLogger().fine("Rejected.");
    throw new OAuthException(OAuthError.access_denied,"Rejected.",null);
  }
  getLogger().fine("Accepting scopes - in handleAction");
  Client client=clients.findById(session.getClientId());
  String scopeOwner=session.getScopeOwner();
  final Reference location=new Reference(session.getRedirectionURI().getURI());
  String state=session.getState();
  if (state != null && !state.isEmpty()) {
    location.addQueryParameter(STATE,state);
  }
  ResponseType flow=session.getAuthFlow();
  if (flow.equals(ResponseType.token)) {
    Token token=tokens.generateToken(client,scopeOwner,grantedScope);
    location.addQueryParameter(TOKEN_TYPE,token.getTokenType());
    location.addQueryParameter(ACCESS_TOKEN,token.getAccessToken());
    location.addQueryParameter(EXPIRES_IN,Integer.toString(token.getExpirePeriod()));
    String[] scope=token.getScope();
    if (!Scopes.isIdentical(scope,session.getRequestedScope())) {
      location.addQueryParameter(SCOPE,Scopes.toString(scope));
    }
  }
 else   if (flow.equals(ResponseType.code)) {
    String code=tokens.storeSession(session);
    location.addQueryParameter(CODE,code);
  }
  session.setState(null);
  if (flow.equals(ResponseType.token)) {
    location.setFragment(location.getQuery());
    location.setQuery("");
  }
  getLogger().fine("Redirecting to -> " + location);
  redirectTemporary(location);
}
