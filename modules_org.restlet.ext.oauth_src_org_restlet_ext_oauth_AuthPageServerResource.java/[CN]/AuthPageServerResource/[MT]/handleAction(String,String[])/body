{
  AuthSession session=getAuthSession();
  if (action.equals(ACTION_REJECT)) {
    getLogger().fine("Rejected.");
    throw new OAuthException(OAuthError.access_denied,"Rejected.",null);
  }
  getLogger().fine("Accepting scopes - in handleAction");
  Client client=session.getClient();
  String id=session.getScopeOwner();
  String redirUrl=session.getDynamicCallbackURI();
  getLogger().fine("OAuth2 get dynamic callback = " + redirUrl);
  if (redirUrl == null || redirUrl.isEmpty()) {
    redirUrl=client.getRedirectUri();
  }
  final AuthenticatedUser user;
  if (client.containsUser(id)) {
    user=client.findUser(id);
  }
 else {
    user=client.createUser(id);
  }
  Set<String> scopeSet=new HashSet<String>();
  scopeSet.addAll(Arrays.asList(scopes));
  user.revokeRoles();
  for (  String s : scopeSet) {
    getLogger().fine("Adding scope = " + s + " to user = "+ id);
    user.addRole(Scopes.toRole(s),"");
  }
  user.persist();
  final Reference location=new Reference(redirUrl);
  String state=session.getState();
  if (state != null && !state.isEmpty()) {
    location.addQueryParameter(STATE,state);
  }
  ResponseType flow=session.getAuthFlow();
  if (flow.equals(ResponseType.token)) {
    Token token=generator.generateToken(user,tokenTimeSec);
    location.addQueryParameter(TOKEN_TYPE,TOKEN_TYPE_BEARER);
    location.addQueryParameter(ACCESS_TOKEN,token.getToken());
    long expiresIn=token.getExpirePeriod();
    if (expiresIn != Token.UNLIMITED) {
      location.addQueryParameter(EXPIRES_IN,Long.toString(expiresIn));
    }
    String[] granted=scopeSet.toArray(new String[0]);
    if (!Arrays.equals(session.getRequestedScope(),granted)) {
      location.addQueryParameter(SCOPE,Scopes.toString(granted));
    }
  }
 else   if (flow.equals(ResponseType.code)) {
    String code=generator.generateCode(user);
    location.addQueryParameter(CODE,code);
  }
  session.setState(null);
  if (flow.equals(ResponseType.token)) {
    location.setFragment(location.getQuery());
    location.setQuery("");
  }
  getLogger().fine("Redirecting to -> " + location);
  redirectTemporary(location);
}
