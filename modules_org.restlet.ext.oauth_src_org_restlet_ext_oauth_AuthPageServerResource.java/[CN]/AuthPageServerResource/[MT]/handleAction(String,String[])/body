{
  AuthSession session=getAuthSession();
  if (action.equals(ACTION_REJECT)) {
    getLogger().fine("Rejected.");
    throw new OAuthException(OAuthError.access_denied,"Rejected.",null);
  }
  getLogger().fine("Accepting scopes - in handleAction");
  Client client=session.getClient();
  String id=session.getScopeOwner();
  String redirUrl=session.getDynamicCallbackURI();
  getLogger().fine("OAuth2 get dynamic callback = " + redirUrl);
  if (redirUrl == null || redirUrl.isEmpty()) {
    redirUrl=client.getRedirectUri();
  }
  String location=null;
  ResponseType flow=session.getAuthFlow();
  if (flow.equals(ResponseType.token)) {
    location=generateAgentToken(id,client,redirUrl);
  }
 else   if (flow.equals(ResponseType.code)) {
    location=generateCode(id,client,redirUrl);
  }
  AuthenticatedUser user=client.findUser(id);
  if (user == null) {
    throw new OAuthException(OAuthError.server_error,"authenticated_user not found",null);
  }
  user.revokeRoles();
  for (  String s : scopes) {
    getLogger().fine("Adding scope = " + s + " to user = "+ id);
    user.addRole(Scopes.toRole(s),"");
  }
  String state=session.getState();
  if (state != null && state.length() > 0) {
    Reference stateful=new Reference(location);
    stateful.addQueryParameter(OAuthServerResource.STATE,state);
    location=stateful.toString();
  }
  session.setState(null);
  user.persist();
  redirectTemporary(location);
}
