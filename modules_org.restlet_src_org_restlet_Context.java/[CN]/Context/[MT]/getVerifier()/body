{
  return new LocalVerifier(){
    @Override protected char[] getSecret(    String identifier){
      char[] result=null;
      int at=identifier.indexOf('@');
      String domainName=(at == -1) ? null : identifier.substring(at + 1);
      String userIdentifier=(at == -1) ? identifier : identifier.substring(0,at);
      Organization orga=null;
      if (domainName == null) {
        if (getOrganizations().size() == 1) {
          orga=getOrganizations().entrySet().iterator().next().getValue();
        }
 else {
          getLogger().info("Unable to identify an unqualified user. Multiple organizations were bounded.");
        }
      }
 else {
        orga=getOrganizations().get(domainName);
      }
      if (orga != null) {
        User user=orga.findUser(userIdentifier);
        if (user != null) {
          result=user.getSecret();
        }
      }
      return result;
    }
    @Override protected void updateSubject(    Subject subject,    String identifier,    char[] inputSecret){
      int at=identifier.indexOf('@');
      String domainName=(at == -1) ? null : identifier.substring(at + 1);
      String userIdentifier=(at == -1) ? identifier : identifier.substring(0,at);
      Organization orga=null;
      if (domainName == null) {
        if (getOrganizations().size() == 1) {
          orga=getOrganizations().entrySet().iterator().next().getValue();
        }
 else {
          getLogger().info("Unable to identify an unqualified user. Multiple organizations were bounded.");
        }
      }
 else {
        orga=getOrganizations().get(domainName);
      }
      if (orga != null) {
        User user=orga.findUser(userIdentifier);
        if (user != null) {
          subject.getPrincipals().add(new UserPrincipal(user));
          Set<Group> userGroups=orga.findGroups(user);
          Set<Role> userRoles=findRoles(orga,userGroups,user);
          for (          Role role : userRoles) {
            subject.getPrincipals().add(new RolePrincipal(role));
          }
        }
      }
    }
  }
;
}
