"Get useful information from live Python objects.\n\nThis module encapsulates the interface provided by the internal special\nattributes (func_*, co_*, im_*, tb_*, etc.) in a friendlier fashion.\nIt also provides some help for examining source code and class layout.\n\nHere are some of the useful functions provided by this module:\n\n    ismodule(), isclass(), ismethod(), isfunction(), istraceback(),\n        isframe(), iscode(), isbuiltin(), isroutine() - check object types\n    getmembers() - get members of an object that satisfy a given condition\n\n    getfile(), getsourcefile(), getsource() - find an object's source code\n    getdoc(), getcomments() - get documentation on an object\n    getmodule() - determine the module that an object came from\n    getclasstree() - arrange classes so as to represent their hierarchy\n\n    getargspec(), getargvalues() - get info about function arguments\n    formatargspec(), formatargvalues() - format an argument spec\n    getouterframes(), getinnerframes() - get info about frames\n    currentframe() - get the current stack frame\n    stack(), trace() - get info about frames on the stack or in a traceback\n"
__author__ = 'Ka-Ping Yee <ping@lfw.org>'
__date__ = '1 Jan 2001'
import sys, os, types, string, re, dis, imp, tokenize, linecache
from operator import attrgetter
if hasattr(types, 'MemberDescriptorType'):

    def ismemberdescriptor(object):
        'Return true if the object is a member descriptor.\n\n        Member descriptors are specialized descriptors defined in extension\n        modules.'
        return isinstance(object, types.MemberDescriptorType)
else:

    def ismemberdescriptor(object):
        'Return true if the object is a member descriptor.\n\n        Member descriptors are specialized descriptors defined in extension\n        modules.'
        return False
if hasattr(types, 'GetSetDescriptorType'):

    def isgetsetdescriptor(object):
        'Return true if the object is a getset descriptor.\n\n        getset descriptors are specialized descriptors defined in extension\n        modules.'
        return isinstance(object, types.GetSetDescriptorType)
else:

    def isgetsetdescriptor(object):
        'Return true if the object is a getset descriptor.\n\n        getset descriptors are specialized descriptors defined in extension\n        modules.'
        return False
modulesbyfile = {}
_filesbymodname = {}
(CO_OPTIMIZED, CO_NEWLOCALS, CO_VARARGS, CO_VARKEYWORDS) = (1, 2, 4, 8)
currentframe = sys._getframe
