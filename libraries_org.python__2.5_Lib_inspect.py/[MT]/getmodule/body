def getmodule(object, _filename=None):
    'Return the module an object was defined in, or None if not found.'
    if ismodule(object):
        return object
    if hasattr(object, '__module__'):
        return sys.modules.get(object.__module__)
    if ((_filename is not None) and (_filename in modulesbyfile)):
        return sys.modules.get(modulesbyfile[_filename])
    try:
        file = getabsfile(object, _filename)
    except TypeError:
        return None
    if (file in modulesbyfile):
        return sys.modules.get(modulesbyfile[file])
    for (modname, module) in sys.modules.items():
        if (ismodule(module) and hasattr(module, '__file__')):
            f = module.__file__
            if (f == _filesbymodname.get(modname, None)):
                continue
            _filesbymodname[modname] = f
            f = getabsfile(module)
            modulesbyfile[f] = modulesbyfile[os.path.realpath(f)] = module.__name__
    if (file in modulesbyfile):
        return sys.modules.get(modulesbyfile[file])
    main = sys.modules['__main__']
    if (not hasattr(object, '__name__')):
        return None
    if hasattr(main, object.__name__):
        mainobject = getattr(main, object.__name__)
        if (mainobject is object):
            return main
    builtin = sys.modules['__builtin__']
    if hasattr(builtin, object.__name__):
        builtinobject = getattr(builtin, object.__name__)
        if (builtinobject is object):
            return builtin
