def convert(s, syntax=None):
    "Convert a regex regular expression to re syntax.\n\n    The first argument is the regular expression, as a string object,\n    just like it would be passed to regex.compile().  (I.e., pass the\n    actual string object -- string quotes must already have been\n    removed and the standard escape processing has already been done,\n    e.g. by eval().)\n\n    The optional second argument is the regex syntax variant to be\n    used.  This is an integer mask as passed to regex.set_syntax();\n    the flag bits are defined in regex_syntax.  When not specified, or\n    when None is given, the current regex syntax mask (as retrieved by\n    regex.get_syntax()) is used -- which is 0 by default.\n\n    The return value is a regular expression, as a string object that\n    could be passed to re.compile().  (I.e., no string quotes have\n    been added -- use quote() below, or repr().)\n\n    The conversion is not always guaranteed to be correct.  More\n    syntactical analysis should be performed to detect borderline\n    cases and decide what to do with them.  For example, 'x*?' is not\n    translated correctly.\n\n    "
    table = mastertable.copy()
    if (syntax is None):
        syntax = regex.get_syntax()
    if (syntax & RE_NO_BK_PARENS):
        del table['\\('], table['\\)']
        del table['('], table[')']
    if (syntax & RE_NO_BK_VBAR):
        del table['\\|']
        del table['|']
    if (syntax & RE_BK_PLUS_QM):
        table['+'] = '\\+'
        table['?'] = '\\?'
        table['\\+'] = '+'
        table['\\?'] = '?'
    if (syntax & RE_NEWLINE_OR):
        table['\n'] = '|'
    res = ''
    i = 0
    end = len(s)
    while (i < end):
        c = s[i]
        i = (i + 1)
        if (c == '\\'):
            c = s[i]
            i = (i + 1)
            key = ('\\' + c)
            key = table.get(key, key)
            res = (res + key)
        else:
            c = table.get(c, c)
            res = (res + c)
    return res
