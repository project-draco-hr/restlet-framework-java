'Convert old ("regex") regular expressions to new syntax ("re").\n\nWhen imported as a module, there are two functions, with their own\nstrings:\n\n  convert(s, syntax=None) -- convert a regex regular expression to re syntax\n\n  quote(s) -- return a quoted string literal\n\nWhen used as a script, read a Python string literal (or any other\nexpression evaluating to a string) from stdin, and write the\ntranslated expression to stdout as a string literal.  Unless stdout is\na tty, no trailing \\n is written to stdout.  This is done so that it\ncan be used with Emacs C-U M-| (shell-command-on-region with argument\nwhich filters the region through the shell command).\n\nNo attempt has been made at coding for performance.\n\nTranslation table...\n\n    \\(    (     (unless RE_NO_BK_PARENS set)\n    \\)    )     (unless RE_NO_BK_PARENS set)\n    \\|    |     (unless RE_NO_BK_VBAR set)\n    \\<    \\b    (not quite the same, but alla...)\n    \\>    \\b    (not quite the same, but alla...)\n    \\`    \\A\n    \\\'    \\Z\n\nNot translated...\n\n    .\n    ^\n    $\n    *\n    +           (unless RE_BK_PLUS_QM set, then to \\+)\n    ?           (unless RE_BK_PLUS_QM set, then to \\?)\n    \\\n    \\b\n    \\B\n    \\w\n    \\W\n    \\1 ... \\9\n\nSpecial cases...\n\n    Non-printable characters are always replaced by their 3-digit\n    escape code (except \\t, \\n, \\r, which use mnemonic escapes)\n\n    Newline is turned into | when RE_NEWLINE_OR is set\n\nXXX To be done...\n\n    [...]     (different treatment of backslashed items?)\n    [^...]    (different treatment of backslashed items?)\n    ^ $ * + ? (in some error contexts these are probably treated differently)\n    \\vDD  \\DD (in the regex docs but only works when RE_ANSI_HEX set)\n\n'
import warnings
warnings.filterwarnings('ignore', '.* regex .*', DeprecationWarning, __name__, append=1)
import regex
from regex_syntax import *
__all__ = ['convert', 'quote']
mastertable = {'\\<': '\\b', '\\>': '\\b', '\\`': '\\A', "\\'": '\\Z', '\\(': '(', '\\)': ')', '\\|': '|', '(': '\\(', ')': '\\)', '|': '\\|', '\t': '\\t', '\n': '\\n', '\r': '\\r', }
if (__name__ == '__main__'):
    main()
