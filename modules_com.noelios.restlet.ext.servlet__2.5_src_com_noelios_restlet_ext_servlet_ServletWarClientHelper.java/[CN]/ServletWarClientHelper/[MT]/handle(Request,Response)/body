{
  if (request.getMethod().equals(Method.GET) || request.getMethod().equals(Method.HEAD)) {
    request.getResourceRef().normalize();
    final String basePath=request.getResourceRef().getPath();
    final int lastSlashIndex=basePath.lastIndexOf('/');
    String entry=(lastSlashIndex == -1) ? basePath : basePath.substring(lastSlashIndex + 1);
    Representation output=null;
    if (basePath.endsWith("/")) {
      final Set<String> entries=getServletContext().getResourcePaths(basePath);
      if (entries != null) {
        final ReferenceList rl=new ReferenceList(entries.size());
        rl.setIdentifier(request.getResourceRef());
        for (final Iterator<String> iter=entries.iterator(); iter.hasNext(); ) {
          entry=iter.next();
          rl.add(new Reference(basePath + entry.substring(basePath.length())));
        }
        output=rl.getTextRepresentation();
      }
    }
 else {
      final InputStream ris=getServletContext().getResourceAsStream(basePath);
      if (ris != null) {
        final MetadataService metadataService=getMetadataService(request);
        output=new InputRepresentation(ris,metadataService.getDefaultMediaType());
        output.setIdentifier(request.getResourceRef());
        updateMetadata(metadataService,entry,output);
        final String mediaType=getServletContext().getMimeType(basePath);
        if (mediaType != null) {
          output.setMediaType(new MediaType(mediaType));
        }
      }
    }
    response.setEntity(output);
    if (output != null) {
      response.setStatus(Status.SUCCESS_OK);
    }
 else {
      response.setStatus(Status.CLIENT_ERROR_NOT_FOUND);
    }
  }
 else {
    response.setStatus(Status.CLIENT_ERROR_METHOD_NOT_ALLOWED);
    response.getAllowedMethods().add(Method.GET);
    response.getAllowedMethods().add(Method.HEAD);
  }
}
