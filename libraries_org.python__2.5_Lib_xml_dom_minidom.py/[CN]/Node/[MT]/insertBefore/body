def insertBefore(self, newChild, refChild):
    if (newChild.nodeType == self.DOCUMENT_FRAGMENT_NODE):
        for c in tuple(newChild.childNodes):
            self.insertBefore(c, refChild)
        return newChild
    if (newChild.nodeType not in self._child_node_types):
        raise xml.dom.HierarchyRequestErr(('%s cannot be child of %s' % (repr(newChild), repr(self))))
    if (newChild.parentNode is not None):
        newChild.parentNode.removeChild(newChild)
    if (refChild is None):
        self.appendChild(newChild)
    else:
        try:
            index = self.childNodes.index(refChild)
        except ValueError:
            raise xml.dom.NotFoundErr()
        if (newChild.nodeType in _nodeTypes_with_children):
            _clear_id_cache(self)
        self.childNodes.insert(index, newChild)
        newChild.nextSibling = refChild
        refChild.previousSibling = newChild
        if index:
            node = self.childNodes[(index - 1)]
            node.nextSibling = newChild
            newChild.previousSibling = node
        else:
            newChild.previousSibling = None
        newChild.parentNode = self
    return newChild
