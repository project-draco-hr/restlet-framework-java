{
  super(directory.getContext(),request,response);
  this.directory=directory;
  this.relativePart=request.getResourceRef().getRemainingPart();
  if (getApplication() != null && getApplication().getTunnelService().isExtensionsTunnel()) {
    Reference originalRef=(Reference)request.getAttributes().get(TunnelService.ATTRIBUTE_ORIGINAL_REF);
    if (originalRef != null) {
      originalRef.setBaseRef(request.getResourceRef().getBaseRef());
      this.relativePart=originalRef.getRemainingPart();
    }
  }
  setModifiable(getDirectory().isModifiable());
  if (this.relativePart.startsWith("/")) {
    this.relativePart=this.relativePart.substring(1);
  }
  this.targetUri=new Reference(directory.getRootRef().toString() + this.relativePart).normalize().toString(false,false);
  if (!this.targetUri.startsWith(directory.getRootRef().toString())) {
    this.targetUri=directory.getRootRef().toString();
  }
  Response contextResponse=getClientDispatcher().get(this.targetUri);
  if (contextResponse.getEntity() != null) {
    if (MediaType.TEXT_URI_LIST.equals(contextResponse.getEntity().getMediaType())) {
      this.targetDirectory=true;
      this.targetFile=false;
      this.directoryContent=new ReferenceList(contextResponse.getEntity());
      if (!request.getResourceRef().getIdentifier().endsWith("/")) {
        this.directoryRedirection=true;
      }
      if (!this.targetUri.endsWith("/")) {
        this.targetUri+="/";
        this.relativePart+="/";
      }
      if (getDirectory().getIndexName() != null && getDirectory().getIndexName().length() > 0) {
        this.directoryUri=this.targetUri;
        this.baseName=getDirectory().getIndexName();
        this.targetUri=this.directoryUri + this.baseName;
        this.targetIndex=true;
      }
 else {
        this.directoryUri=this.targetUri;
        this.baseName=null;
      }
    }
 else {
      this.targetDirectory=false;
      this.targetFile=true;
      this.fileContent=contextResponse.getEntity();
    }
  }
 else {
    this.targetDirectory=false;
    this.targetFile=false;
    if (this.targetUri.endsWith("/")) {
      if (getDirectory().getIndexName() != null && getDirectory().getIndexName().length() > 0) {
        this.directoryUri=this.targetUri;
        this.baseName=getDirectory().getIndexName();
        this.targetUri=this.directoryUri + this.baseName;
        contextResponse=getClientDispatcher().get(this.targetUri);
        if (contextResponse.getEntity() != null) {
          this.targetDirectory=true;
          this.directoryContent=new ReferenceList();
          this.directoryContent.add(new Reference(this.targetUri));
          this.targetIndex=true;
        }
      }
    }
 else {
      if (getDirectory().getIndexName() != null && getDirectory().getIndexName().length() > 0) {
        contextResponse=getClientDispatcher().get(this.targetUri + "/" + getDirectory().getIndexName());
        if (contextResponse.getEntity() != null) {
          this.directoryUri=this.targetUri + "/";
          this.baseName=getDirectory().getIndexName();
          this.targetUri=this.directoryUri + this.baseName;
          this.targetDirectory=true;
          this.directoryRedirection=true;
          this.directoryContent=new ReferenceList();
          this.directoryContent.add(new Reference(this.targetUri));
          this.targetIndex=true;
        }
      }
    }
  }
  if (!this.targetDirectory) {
    int lastSlashIndex=targetUri.lastIndexOf('/');
    if (lastSlashIndex == -1) {
      this.directoryUri="";
      this.baseName=targetUri;
    }
 else {
      this.directoryUri=targetUri.substring(0,lastSlashIndex + 1);
      this.baseName=targetUri.substring(lastSlashIndex + 1);
    }
    contextResponse=getClientDispatcher().get(this.directoryUri);
    if ((contextResponse.getEntity() != null) && MediaType.TEXT_URI_LIST.equals(contextResponse.getEntity().getMediaType())) {
      this.directoryContent=new ReferenceList(contextResponse.getEntity());
    }
  }
  if (this.baseName != null) {
    int firstDotIndex=this.baseName.indexOf('.');
    if (firstDotIndex != -1) {
      this.baseExtensions=getExtensions(this.baseName);
      this.baseName=this.baseName.substring(0,firstDotIndex);
    }
  }
  List<Variant> variants=getVariants();
  if ((variants == null) || (variants.isEmpty())) {
    setAvailable(false);
  }
  getLogger().info("Converted target URI: " + this.targetUri);
  getLogger().info("Converted base name : " + this.baseName);
}
