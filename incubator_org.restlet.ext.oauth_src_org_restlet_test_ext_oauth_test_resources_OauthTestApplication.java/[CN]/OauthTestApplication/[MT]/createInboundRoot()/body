{
  Context ctx=getContext();
  ConcurrentMap<String,Object> attribs=ctx.getAttributes();
  attribs.put(OAuthServerResource.TOKEN_SERVER_TIME_SEC,timeout);
  attribs.put(OAuthServerResource.TOKEN_SERVER_MAX_TIME_SEC,timeout);
  Object[] params={new ScheduledThreadPoolExecutor(5)};
  ClientStoreFactory.setClientStoreImpl(MemClientStore.class,params);
  ClientStore<?> clientStore=ClientStoreFactory.getInstance();
  Client client=clientStore.createClient("1234567890","1234567890",AuthorizationServerTest.prot + "://localhost:" + AuthorizationServerTest.serverPort+ "/");
  AuthenticatedUser user=client.createUser(TEST_USER);
  user.setPassword(TEST_PASS);
  attribs.put(ClientStore.class.getCanonicalName(),clientStore);
  Router router=new Router(ctx);
  router.attach("/authorize",new Finder(ctx,AuthorizationServerResource.class));
  router.attach("/access_token",new Finder(ctx,AccessTokenServerResource.class));
  router.attach("/validate",ValidationServerResource.class);
  CallbackCacheFilter authCache=new CallbackCacheFilter(getContext());
  Filter f=new SetCallbackFilter(authCache);
  f.setNext(LoginPageResource.class);
  router.attach("/login",f);
  try {
    ConsumerManager consumerManager=new ConsumerManager();
    attribs.put("consumer_manager",consumerManager);
  }
 catch (  ConsumerException e) {
    e.printStackTrace();
  }
  authCache.setNext(new Finder(getContext(),OpenIdConsumer.class));
  router.attach("/openid_login",authCache);
  router.attach("/xrds",XrdsResource.class);
  ServerManager manager=new ServerManager();
  manager.setOPEndpointUrl(AuthorizationServerTest.prot + "://localhost:" + AuthorizationServerTest.serverPort+ "/oauth/provider");
  attribs.put("openid_manager",manager);
  attribs.put("xrds",AuthorizationServerTest.prot + "://localhost:" + AuthorizationServerTest.serverPort+ "/oauth/xrds");
  Finder finder=new Finder(ctx,OpenIdProvider.class);
  router.attach("/provider",finder);
  router.attach("/auth_page",new Finder(ctx,AuthPageServerResource.class));
  return router;
}
