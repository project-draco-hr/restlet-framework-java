{
  final SslContextFactory sslContextFactory=getSslContextFactory();
  SSLContext sslContext;
  if (sslContextFactory == null) {
    final KeyStore keyStore=KeyStore.getInstance(getKeystoreType());
    final FileInputStream fis=new FileInputStream(getKeystorePath());
    keyStore.load(fis,getKeystorePassword().toCharArray());
    final KeyManagerFactory keyManagerFactory=KeyManagerFactory.getInstance(getCertAlgorithm());
    keyManagerFactory.init(keyStore,getKeyPassword().toCharArray());
    sslContext=SSLContext.getInstance(getSslProtocol());
    sslContext.init(keyManagerFactory.getKeyManagers(),null,null);
  }
 else {
    sslContext=sslContextFactory.createSslContext();
  }
  final TCPSelectorHandler selectorHandler=new TCPSelectorHandler();
  final SSLReadFilter readFilter=new SSLReadFilter();
  readFilter.setSSLContext(sslContext);
  if (isNeedClientAuthentication()) {
    readFilter.setNeedClientAuth(isNeedClientAuthentication());
  }
 else   if (isWantClientAuthentication()) {
    readFilter.setWantClientAuth(isWantClientAuthentication());
  }
  selectorHandler.setPort(getHelped().getPort());
  if (getHelped().getAddress() != null) {
    selectorHandler.setInet(InetAddress.getByName(getHelped().getAddress()));
  }
  final HttpParserFilter httpParserFilter=new HttpParserFilter(this);
  controller.setSelectorHandler(selectorHandler);
  controller.setProtocolChainInstanceHandler(new DefaultProtocolChainInstanceHandler(){
    @Override public ProtocolChain poll(){
      ProtocolChain protocolChain=this.protocolChains.poll();
      if (protocolChain == null) {
        protocolChain=new DefaultProtocolChain();
        protocolChain.addFilter(readFilter);
        protocolChain.addFilter(httpParserFilter);
      }
      return protocolChain;
    }
  }
);
}
