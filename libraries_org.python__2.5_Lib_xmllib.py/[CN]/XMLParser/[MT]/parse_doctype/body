def parse_doctype(self, res):
    rawdata = self.rawdata
    n = len(rawdata)
    name = res.group('name')
    if self.__map_case:
        name = name.lower()
    (pubid, syslit) = res.group('pubid', 'syslit')
    if (pubid is not None):
        pubid = pubid[1:(-1)]
        pubid = ' '.join(pubid.split())
    if (syslit is not None):
        syslit = syslit[1:(-1)]
    j = k = res.end(0)
    if (k >= n):
        return (-1)
    if (rawdata[k] == '['):
        level = 0
        k = (k + 1)
        dq = sq = 0
        while (k < n):
            c = rawdata[k]
            if ((not sq) and (c == '"')):
                dq = (not dq)
            elif ((not dq) and (c == "'")):
                sq = (not sq)
            elif (sq or dq):
                pass
            elif ((level <= 0) and (c == ']')):
                res = endbracket.match(rawdata, (k + 1))
                if (res is None):
                    return (-1)
                self.handle_doctype(name, pubid, syslit, rawdata[(j + 1):k])
                return res.end(0)
            elif (c == '<'):
                level = (level + 1)
            elif (c == '>'):
                level = (level - 1)
                if (level < 0):
                    self.syntax_error("bogus `>' in DOCTYPE")
            k = (k + 1)
    res = endbracketfind.match(rawdata, k)
    if (res is None):
        return (-1)
    if (endbracket.match(rawdata, k) is None):
        self.syntax_error('garbage in DOCTYPE')
    self.handle_doctype(name, pubid, syslit, None)
    return res.end(0)
