def parse_starttag(self, i):
    rawdata = self.rawdata
    end = endbracketfind.match(rawdata, (i + 1))
    if (end is None):
        return (-1)
    tag = starttagmatch.match(rawdata, i)
    if ((tag is None) or (tag.end(0) != end.end(0))):
        self.syntax_error('garbage in starttag')
        return end.end(0)
    nstag = tagname = tag.group('tagname')
    if self.__map_case:
        nstag = tagname = nstag.lower()
    if ((not self.__seen_starttag) and self.__seen_doctype and (tagname != self.__seen_doctype)):
        self.syntax_error('starttag does not match DOCTYPE')
    if (self.__seen_starttag and (not self.stack)):
        self.syntax_error('multiple elements on top level')
    (k, j) = tag.span('attrs')
    (attrdict, nsdict, k) = self.parse_attributes(tagname, k, j)
    self.stack.append((tagname, nsdict, nstag))
    if self.__use_namespaces:
        res = qname.match(tagname)
    else:
        res = None
    if (res is not None):
        (prefix, nstag) = res.group('prefix', 'local')
        if (prefix is None):
            prefix = ''
        ns = None
        for (t, d, nst) in self.stack:
            if (prefix in d):
                ns = d[prefix]
        if ((ns is None) and (prefix != '')):
            ns = self.__namespaces.get(prefix)
        if (ns is not None):
            nstag = ((ns + ' ') + nstag)
        elif (prefix != ''):
            nstag = ((prefix + ':') + nstag)
        self.stack[(-1)] = (tagname, nsdict, nstag)
    attrnamemap = {}
    for key in attrdict.keys():
        attrnamemap[key] = key
    if self.__use_namespaces:
        nattrdict = {}
        for (key, val) in attrdict.items():
            okey = key
            res = qname.match(key)
            if (res is not None):
                (aprefix, key) = res.group('prefix', 'local')
                if self.__map_case:
                    key = key.lower()
                if (aprefix is not None):
                    ans = None
                    for (t, d, nst) in self.stack:
                        if (aprefix in d):
                            ans = d[aprefix]
                    if (ans is None):
                        ans = self.__namespaces.get(aprefix)
                    if (ans is not None):
                        key = ((ans + ' ') + key)
                    else:
                        key = ((aprefix + ':') + key)
            nattrdict[key] = val
            attrnamemap[key] = okey
        attrdict = nattrdict
    attributes = self.attributes.get(nstag)
    if (attributes is not None):
        for key in attrdict.keys():
            if (not (key in attributes)):
                self.syntax_error(("unknown attribute `%s' in tag `%s'" % (attrnamemap[key], tagname)))
        for (key, val) in attributes.items():
            if ((val is not None) and (not (key in attrdict))):
                attrdict[key] = val
    method = self.elements.get(nstag, (None, None))[0]
    self.finish_starttag(nstag, attrdict, method)
    if (tag.group('slash') == '/'):
        self.finish_endtag(tagname)
    return tag.end(0)
