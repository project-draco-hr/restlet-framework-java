{
  AbstractConnector result=null;
  final SslContextFactory sslContextFactory=SslUtils.getSslContextFactory(this);
  final String[] excludedCipherSuites=SslUtils.getDisabledCipherSuites(this);
switch (getType()) {
case 1:
    SslSelectChannelConnector nioResult;
  nioResult=new SslSelectChannelConnector(){
    @Override protected SSLContext createSSLContext() throws Exception {
      return sslContextFactory.createSslContext();
    }
  }
;
if (excludedCipherSuites != null) {
  nioResult.setExcludeCipherSuites(excludedCipherSuites);
}
result=nioResult;
break;
case 2:
SslSocketConnector bioResult=new SslSocketConnector(){
@Override protected SSLServerSocketFactory createFactory() throws Exception {
final SSLContext sslContext=sslContextFactory.createSslContext();
return sslContext.getServerSocketFactory();
}
}
;
if (excludedCipherSuites != null) {
bioResult.setExcludeCipherSuites(excludedCipherSuites);
}
result=bioResult;
break;
}
return result;
}
