{
  try {
    URI smtpURI=new URI(request.getResourceRef().toString());
    String smtpHost=smtpURI.getHost();
    int smtpPort=smtpURI.getPort();
    Protocol defaultProtocol=getClient().getProtocols().get(0);
    if (defaultProtocol != null) {
      if (smtpPort == -1) {
        if ((defaultProtocol.equals(Protocol.SMTP)) || (defaultProtocol.equals(Protocol.SMTP_STARTTLS))) {
          smtpPort=25;
        }
 else         if (defaultProtocol.equals(Protocol.SMTPS)) {
          smtpPort=465;
        }
      }
      if ((smtpHost == null) || (smtpHost.equals(""))) {
        throw new IllegalArgumentException("Invalid SMTP host specified");
      }
      DocumentBuilder docBuilder=DocumentBuilderFactory.newInstance().newDocumentBuilder();
      Document email=docBuilder.parse(request.getEntity().getStream());
      Element root=(Element)email.getElementsByTagName("email").item(0);
      Element header=(Element)root.getElementsByTagName("head").item(0);
      String subject=header.getElementsByTagName("subject").item(0).getTextContent();
      String from=header.getElementsByTagName("from").item(0).getTextContent();
      NodeList toList=header.getElementsByTagName("to");
      String[] to=new String[toList.getLength()];
      for (int i=0; i < toList.getLength(); i++) {
        to[i]=toList.item(i).getTextContent();
      }
      NodeList ccList=header.getElementsByTagName("cc");
      String[] cc=new String[ccList.getLength()];
      for (int i=0; i < ccList.getLength(); i++) {
        cc[i]=ccList.item(i).getTextContent();
      }
      NodeList bccList=header.getElementsByTagName("bcc");
      String[] bcc=new String[bccList.getLength()];
      for (int i=0; i < bccList.getLength(); i++) {
        bcc[i]=bccList.item(i).getTextContent();
      }
      String text=root.getElementsByTagName("body").item(0).getTextContent();
      Session session=null;
      Transport transport=null;
      Properties props=System.getProperties();
      boolean authenticate=((getLogin(request) != null) && (getPassword(request) != null));
      if (defaultProtocol.equals(Protocol.SMTP) || defaultProtocol.equals(Protocol.SMTP_STARTTLS)) {
        props.put("mail.smtp.host",smtpHost);
        props.put("mail.smtp.port",Integer.toString(smtpPort));
        props.put("mail.smtp.auth",Boolean.toString(authenticate).toLowerCase());
        props.put("mail.smtp.starttls.enable",Boolean.toString(getClient().getProtocols().get(0).equals(Protocol.SMTP_STARTTLS)).toLowerCase());
        session=Session.getDefaultInstance(props);
        transport=session.getTransport("smtp");
      }
 else       if (defaultProtocol.equals(Protocol.SMTPS)) {
        props.put("mail.smtps.host",smtpHost);
        props.put("mail.smtps.port",Integer.toString(smtpPort));
        props.put("mail.smtps.auth",Boolean.toString(authenticate).toLowerCase());
        session=Session.getDefaultInstance(props);
        transport=session.getTransport("smtps");
      }
      if (transport != null) {
        if (authenticate) {
          transport.connect(smtpHost,getLogin(request),getPassword(request));
        }
 else {
          transport.connect();
        }
        if (transport.isConnected()) {
          getLogger().info("JavaMail client connection successfully established. Attempting to send the message");
          Message msg=new MimeMessage(session);
          msg.setFrom(new InternetAddress(from));
          for (          String element : to) {
            msg.addRecipient(Message.RecipientType.TO,new InternetAddress(element));
          }
          for (          String element : cc) {
            msg.addRecipient(Message.RecipientType.CC,new InternetAddress(element));
          }
          for (          String element : bcc) {
            msg.addRecipient(Message.RecipientType.BCC,new InternetAddress(element));
          }
          msg.setSubject(subject);
          msg.setText(text);
          msg.setSentDate(new Date());
          msg.saveChanges();
          transport.sendMessage(msg,msg.getAllRecipients());
          transport.close();
          getLogger().info("JavaMail client successfully sent the message.");
        }
      }
    }
  }
 catch (  IOException e) {
    getLogger().log(Level.WARNING,"JavaMail client error",e);
  }
catch (  NoSuchProviderException e) {
    getLogger().log(Level.WARNING,"JavaMail client error",e);
  }
catch (  AddressException e) {
    getLogger().log(Level.WARNING,"JavaMail client error",e);
  }
catch (  MessagingException e) {
    getLogger().log(Level.WARNING,"JavaMail client error",e);
  }
catch (  SAXException e) {
    getLogger().log(Level.WARNING,"JavaMail client error",e);
  }
catch (  URISyntaxException e) {
    getLogger().log(Level.WARNING,"JavaMail client error",e);
  }
catch (  ParserConfigurationException e) {
    getLogger().log(Level.WARNING,"JavaMail client error",e);
  }
}
