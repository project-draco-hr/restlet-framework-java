{
  int result=buffer.fill(this.channel);
  if (result == 0) {
    if (Context.getCurrentLogger().isLoggable(Level.FINER)) {
      Context.getCurrentLogger().log(Level.FINER,"Couldn't fill the buffer immediately. Trying to register a select key to get more.");
    }
    if (selectionChannel != null) {
      if (this.selectionRegistration == null) {
        this.selectionRegistration=this.selectionChannel.getRegistration();
        this.selectionRegistration.setInterestOperations(SelectionKey.OP_READ);
        this.selectionRegistration.setListener(new SelectionListener(){
          public void onSelected() throws IOException {
            if (Context.getCurrentLogger().isLoggable(Level.FINER)) {
              Context.getCurrentLogger().log(Level.FINER,"NbChannelInputStream selected");
            }
            selectionRegistration.suspend();
            selectionRegistration.unblock();
          }
        }
);
      }
 else {
        this.selectionRegistration.resume();
      }
      this.selectionRegistration.block();
      result=buffer.fill(this.channel);
    }
 else     if (selectableChannel != null) {
      Selector selector=null;
      SelectionKey selectionKey=null;
      try {
        selector=SelectorFactory.getSelector();
        if (selector != null) {
          selectionKey=this.selectableChannel.register(selector,SelectionKey.OP_READ);
          selector.select(IoUtils.TIMEOUT_MS);
        }
      }
  finally {
        NioUtils.release(selector,selectionKey);
      }
      result=buffer.fill(this.channel);
    }
  }
  if (result == -1) {
    this.endReached=true;
    if (this.selectionRegistration != null) {
      this.selectionRegistration.setCanceling(true);
      this.selectionRegistration.setListener(null);
    }
  }
  return result;
}
