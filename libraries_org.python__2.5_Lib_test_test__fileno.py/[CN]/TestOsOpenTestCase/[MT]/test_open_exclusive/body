def test_open_exclusive(self):
    self.assert_((not os.path.exists(self.filename)))
    raises(OSError, (2, self.filename), os.open, self.filename, os.O_EXCL)
    self.assert_((not os.path.exists(self.filename)))
    self.fd = os.open(self.filename, (os.O_EXCL | os.O_CREAT))
    self.assert_(os.path.exists(self.filename))
    raises(OSError, 9, os.write, self.fd, 'jython')
    self.assertEquals(os.read(self.fd, 99), '')
    os.close(self.fd)
    os.close(os.open(self.filename, os.O_EXCL))
    raises(OSError, (17, self.filename), os.open, self.filename, (os.O_CREAT | os.O_EXCL))
    raises(OSError, (17, self.filename), os.open, self.filename, ((os.O_CREAT | os.O_WRONLY) | os.O_EXCL))
    raises(OSError, (17, self.filename), os.open, self.filename, ((os.O_CREAT | os.O_RDWR) | os.O_EXCL))
    os.remove(self.filename)
    self.fd = os.open(self.filename, ((os.O_EXCL | os.O_RDWR) | os.O_CREAT))
    os.write(self.fd, 'exclusive')
    os.lseek(self.fd, 0, 0)
    self.assertEquals(os.read(self.fd, len('exclusive')), 'exclusive')
