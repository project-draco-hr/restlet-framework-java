def open(self, fullurl, data=None):
    "Use URLopener().open(file) instead of open(file, 'r')."
    fullurl = unwrap(toBytes(fullurl))
    if (self.tempcache and self.tempcache.has_key(fullurl)):
        (filename, headers) = self.tempcache[fullurl]
        fp = open(filename, 'rb')
        return addinfourl(fp, headers, fullurl)
    (urltype, url) = splittype(fullurl)
    if (not urltype):
        urltype = 'file'
    if self.proxies.has_key(urltype):
        proxy = self.proxies[urltype]
        (urltype, proxyhost) = splittype(proxy)
        (host, selector) = splithost(proxyhost)
        url = (host, fullurl)
    else:
        proxy = None
    name = ('open_' + urltype)
    self.type = urltype
    if ('-' in name):
        name = '_'.join(name.split('-'))
    if (not hasattr(self, name)):
        if proxy:
            return self.open_unknown_proxy(proxy, fullurl, data)
        else:
            return self.open_unknown(fullurl, data)
    try:
        if (data is None):
            return getattr(self, name)(url)
        else:
            return getattr(self, name)(url, data)
    except socket.error as msg:
        raise IOError, ('socket error', msg), sys.exc_info()[2]
