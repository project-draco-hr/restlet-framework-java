{
  @SuppressWarnings("unused") String version=null;
  Series<Parameter> headers=null;
  int statusCode=0;
  String reasonPhrase=null;
  StringBuilder sb=new StringBuilder();
  int next=getInboundStream().read();
  while ((next != -1) && !HeaderUtils.isSpace(next)) {
    sb.append((char)next);
    next=getInboundStream().read();
  }
  if (next == -1) {
    throw new IOException("Unable to parse the response HTTP version. End of stream reached too early.");
  }
  version=sb.toString();
  sb.delete(0,sb.length());
  next=getInboundStream().read();
  while ((next != -1) && !HeaderUtils.isSpace(next)) {
    sb.append((char)next);
    next=getInboundStream().read();
  }
  if (next == -1) {
    throw new IOException("Unable to parse the response status. End of stream reached too early.");
  }
  try {
    statusCode=Integer.parseInt(sb.toString());
  }
 catch (  NumberFormatException e) {
    throw new IOException("Unable to parse the status code. Non numeric value: " + sb.toString());
  }
  sb.delete(0,sb.length());
  next=getInboundStream().read();
  while ((next != -1) && !HeaderUtils.isCarriageReturn(next)) {
    sb.append((char)next);
    next=getInboundStream().read();
  }
  if (next == -1) {
    throw new IOException("Unable to parse the reason phrase. End of stream reached too early.");
  }
  next=getInboundStream().read();
  if (HeaderUtils.isLineFeed(next)) {
    reasonPhrase=sb.toString();
    sb.delete(0,sb.length());
    Parameter header=HeaderReader.readHeader(getInboundStream(),sb);
    while (header != null) {
      if (headers == null) {
        headers=new Form();
      }
      headers.add(header);
      header=HeaderReader.readHeader(getInboundStream(),sb);
    }
  }
 else {
    throw new IOException("Unable to parse the reason phrase. The carriage return must be followed by a line feed.");
  }
  if (HeaderUtils.isConnectionClose(headers)) {
    setState(ConnectionState.CLOSING);
  }
  Response finalResponse=getInboundMessages().peek();
  Response response=null;
  Status status=Status.valueOf(statusCode);
  if (status.isInformational()) {
    response=new Response(finalResponse.getRequest());
  }
 else {
    response=finalResponse;
  }
  response.setStatus(status,reasonPhrase);
  response.getServerInfo().setAddress(getSocket().getLocalAddress().toString());
  response.getServerInfo().setAgent(Engine.VERSION_HEADER);
  response.getServerInfo().setPort(getSocket().getPort());
  response.setEntity(createInboundEntity(headers));
  HeaderUtils.copyResponseTransportHeaders(headers,response);
  if (headers != null) {
    response.getAttributes().put(HeaderConstants.ATTRIBUTE_HEADERS,headers);
  }
  if (!response.getStatus().isInformational()) {
    getInboundMessages().poll();
  }
  getHelper().getInboundMessages().add(response);
}
