{
  org.restlet.data.Method httpMethod=restletResp.getRequest().getMethod();
  ResourceObject resObj=resObjAndPath.resourceObject;
  String remainingPath=resObjAndPath.remainingPath;
  MultivaluedMap<String,String> allTemplParamsEnc=resObjAndPath.allTemplParamsEnc;
  Collection<ResourceMethod> resourceMethods=resObj.getMethodsForPath(remainingPath);
  if (resourceMethods.isEmpty())   throw new CouldNotFindMethodException(errorRestletResourceMethodNotFound);
  boolean alsoGet=httpMethod.equals(Method.HEAD);
  removeNotSupportedHttpMethod(resourceMethods,httpMethod,alsoGet);
  if (resourceMethods.isEmpty()) {
    if (httpMethod.equals(Method.OPTIONS)) {
      resourceMethods=resObj.getMethodsForPath(remainingPath);
      Set<Method> allowedMethods=restletResp.getAllowedMethods();
      for (      ResourceMethod rm : resourceMethods)       allowedMethods.add(rm.getHttpMethod());
      if (!allowedMethods.isEmpty()) {
        if (allowedMethods.contains(Method.GET))         allowedMethods.add(Method.HEAD);
        restletResp.setEntity(new StringRepresentation(""));
      }
      throw new RequestHandledException();
    }
    throw new CouldNotFindMethodException(errorRestletMethodNotAllowed);
  }
  if (givenMediaType != null) {
    Iterator<ResourceMethod> methodIter=resourceMethods.iterator();
    while (methodIter.hasNext()) {
      ResourceMethod resourceMethod=methodIter.next();
      if (!resourceMethod.isGivenMediaTypeSupported(givenMediaType))       methodIter.remove();
    }
    if (resourceMethods.isEmpty())     throw new CouldNotFindMethodException(errorRestletUnsupportedMediaType);
  }
  Iterator<ResourceMethod> methodIter=resourceMethods.iterator();
  while (methodIter.hasNext()) {
    ResourceMethod resourceMethod=methodIter.next();
    if (!resourceMethod.isAcceptedMediaTypeSupported(accMediaTypes))     methodIter.remove();
  }
  if (resourceMethods.isEmpty()) {
    throw new CouldNotFindMethodException(errorRestletNotAcceptable);
  }
  ResourceMethod bestResourceMethod=getBestMethod(resourceMethods,givenMediaType,accMediaTypes,httpMethod);
  if (bestResourceMethod == null) {
    throw new RuntimeException("Found no method, but there must be one.");
  }
  return new ResObjAndMeth(resObj,bestResourceMethod,allTemplParamsEnc);
}
