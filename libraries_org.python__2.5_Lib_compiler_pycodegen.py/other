import imp
import os
import marshal
import struct
import sys
from cStringIO import StringIO
is_jython = sys.platform.startswith('java')
from compiler import ast, parse, walk, syntax
from compiler import misc, future, symbols
from compiler.consts import SC_LOCAL, SC_GLOBAL, SC_FREE, SC_CELL
from compiler.consts import CO_VARARGS, CO_VARKEYWORDS, CO_NEWLOCALS, CO_NESTED, CO_GENERATOR, CO_FUTURE_DIVISION, CO_FUTURE_ABSIMPORT, CO_FUTURE_WITH_STATEMENT
if (not is_jython):
    from compiler.pyassem import TupleArg
else:
    TupleArg = None
try:
    VERSION = sys.version_info[0]
except AttributeError:
    VERSION = 1
callfunc_opcode_info = {(0, 0): 'CALL_FUNCTION', (1, 0): 'CALL_FUNCTION_VAR', (0, 1): 'CALL_FUNCTION_KW', (1, 1): 'CALL_FUNCTION_VAR_KW', }
LOOP = 1
EXCEPT = 2
TRY_FINALLY = 3
END_FINALLY = 4
if is_jython:
    compile = compile
else:

    def compile(source, filename, mode, flags=None, dont_inherit=None):
        'Replacement for builtin compile() function'
        if ((flags is not None) or (dont_inherit is not None)):
            raise RuntimeError, 'not implemented yet'
        if (mode == 'single'):
            gen = Interactive(source, filename)
        elif (mode == 'exec'):
            gen = Module(source, filename)
        elif (mode == 'eval'):
            gen = Expression(source, filename)
        else:
            raise ValueError("compile() 3rd arg must be 'exec' or 'eval' or 'single'")
        gen.compile()
        return gen.code
wrapper = {ast.Getattr: AugGetattr, ast.Name: AugName, ast.Slice: AugSlice, ast.Subscript: AugSubscript, }
if (__name__ == '__main__'):
    for file in sys.argv[1:]:
        compileFile(file)
