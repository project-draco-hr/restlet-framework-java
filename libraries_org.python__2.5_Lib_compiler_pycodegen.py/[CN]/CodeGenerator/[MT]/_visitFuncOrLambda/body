def _visitFuncOrLambda(self, node, isLambda=0):
    if ((not isLambda) and node.decorators):
        for decorator in node.decorators.nodes:
            self.visit(decorator)
        ndecorators = len(node.decorators.nodes)
    else:
        ndecorators = 0
    gen = self.FunctionGen(node, self.scopes, isLambda, self.class_name, self.get_module())
    walk(node.code, gen)
    gen.finish()
    self.set_lineno(node)
    for default in node.defaults:
        self.visit(default)
    self._makeClosure(gen, len(node.defaults))
    for i in range(ndecorators):
        self.emit('CALL_FUNCTION', 1)
