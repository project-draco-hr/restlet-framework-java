def __init__(self, func, scopes, isLambda, class_name, mod):
    self.class_name = class_name
    self.module = mod
    if isLambda:
        klass = FunctionCodeGenerator
        name = ('<lambda.%d>' % klass.lambdaCount)
        klass.lambdaCount = (klass.lambdaCount + 1)
    else:
        name = func.name
    (args, hasTupleArg) = generateArgList(func.argnames)
    self.graph = pyassem.PyFlowGraph(name, func.filename, args, optimized=1)
    self.isLambda = isLambda
    self.super_init()
    if ((not isLambda) and func.doc):
        self.setDocstring(func.doc)
    lnf = walk(func.code, self.NameFinder(args), verbose=0)
    self.locals.push(lnf.getLocals())
    if func.varargs:
        self.graph.setFlag(CO_VARARGS)
    if func.kwargs:
        self.graph.setFlag(CO_VARKEYWORDS)
    self.set_lineno(func)
    if hasTupleArg:
        self.generateArgUnpack(func.argnames)
