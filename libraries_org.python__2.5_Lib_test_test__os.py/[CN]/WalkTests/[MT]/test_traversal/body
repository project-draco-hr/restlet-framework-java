def test_traversal(self):
    import os
    from os.path import join
    sub1_path = join(test_support.TESTFN, 'SUB1')
    sub11_path = join(sub1_path, 'SUB11')
    sub2_path = join(test_support.TESTFN, 'SUB2')
    tmp1_path = join(test_support.TESTFN, 'tmp1')
    tmp2_path = join(sub1_path, 'tmp2')
    tmp3_path = join(sub2_path, 'tmp3')
    os.makedirs(sub11_path)
    os.makedirs(sub2_path)
    for path in (tmp1_path, tmp2_path, tmp3_path):
        f = file(path, 'w')
        f.write((("I'm " + path) + ' and proud of it.  Blame test_os.\n'))
        f.close()
    all = list(os.walk(test_support.TESTFN))
    self.assertEqual(len(all), 4)
    flipped = (all[0][1][0] != 'SUB1')
    all[0][1].sort()
    self.assertEqual(all[0], (test_support.TESTFN, ['SUB1', 'SUB2'], ['tmp1']))
    self.assertEqual(all[(1 + flipped)], (sub1_path, ['SUB11'], ['tmp2']))
    self.assertEqual(all[(2 + flipped)], (sub11_path, [], []))
    self.assertEqual(all[(3 - (2 * flipped))], (sub2_path, [], ['tmp3']))
    all = []
    for (root, dirs, files) in os.walk(test_support.TESTFN):
        all.append((root, dirs, files))
        if ('SUB1' in dirs):
            dirs.remove('SUB1')
    self.assertEqual(len(all), 2)
    self.assertEqual(all[0], (test_support.TESTFN, ['SUB2'], ['tmp1']))
    self.assertEqual(all[1], (sub2_path, [], ['tmp3']))
    all = list(os.walk(test_support.TESTFN, topdown=False))
    self.assertEqual(len(all), 4)
    flipped = (all[3][1][0] != 'SUB1')
    all[3][1].sort()
    self.assertEqual(all[3], (test_support.TESTFN, ['SUB1', 'SUB2'], ['tmp1']))
    self.assertEqual(all[flipped], (sub11_path, [], []))
    self.assertEqual(all[(flipped + 1)], (sub1_path, ['SUB11'], ['tmp2']))
    self.assertEqual(all[(2 - (2 * flipped))], (sub2_path, [], ['tmp3']))
    for (root, dirs, files) in os.walk(test_support.TESTFN, topdown=False):
        for name in files:
            os.remove(join(root, name))
        for name in dirs:
            os.rmdir(join(root, name))
    os.rmdir(test_support.TESTFN)
