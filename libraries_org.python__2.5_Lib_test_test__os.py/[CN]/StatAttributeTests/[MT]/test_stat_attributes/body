def test_stat_attributes(self):
    if (not hasattr(os, 'stat')):
        return
    import stat
    result = os.stat(self.fname)
    self.assertEquals(result[stat.ST_SIZE], 3)
    self.assertEquals(result.st_size, 3)
    import sys
    members = dir(result)
    for name in dir(stat):
        if (name[:3] == 'ST_'):
            attr = name.lower()
            if name.endswith('TIME'):

                def trunc(x):
                    return int(x)
            else:

                def trunc(x):
                    return x
            self.assertEquals(trunc(getattr(result, attr)), result[getattr(stat, name)])
            self.assert_((attr in members))
    try:
        result[200]
        self.fail('No exception thrown')
    except IndexError:
        pass
    try:
        result.st_mode = 1
        self.fail('No exception thrown')
    except TypeError:
        pass
    try:
        result.st_rdev = 1
        self.fail('No exception thrown')
    except (AttributeError, TypeError):
        pass
    try:
        result.parrot = 1
        self.fail('No exception thrown')
    except AttributeError:
        pass
    try:
        result2 = os.stat_result((10,))
        self.fail('No exception thrown')
    except TypeError:
        pass
    try:
        result2 = os.stat_result((0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))
    except TypeError:
        pass
