{
  usage_return retval=new usage_return();
  retval.start=input.LT(1);
  Object root_0=null;
  command_return command1=null;
  command_return command2=null;
  requiredParameter_return requiredParameter3=null;
  command_return command4=null;
  optionalParameter_return optionalParameter5=null;
  command_return command6=null;
  requiredParameter_return requiredParameter7=null;
  optionalParameter_return optionalParameter8=null;
  try {
    int alt5=5;
    alt5=dfa5.predict(input);
switch (alt5) {
case 1:
{
        root_0=(Object)adaptor.nil();
      }
    break;
case 2:
{
    root_0=(Object)adaptor.nil();
    pushFollow(FOLLOW_command_in_usage87);
    command1=command();
    _fsp--;
    adaptor.addChild(root_0,command1.getTree());
  }
break;
case 3:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_command_in_usage96);
command2=command();
_fsp--;
adaptor.addChild(root_0,command2.getTree());
int cnt1=0;
loop1: do {
  int alt1=2;
  int LA1_0=input.LA(1);
  if ((LA1_0 == ID)) {
    alt1=1;
  }
switch (alt1) {
case 1:
{
      pushFollow(FOLLOW_requiredParameter_in_usage98);
      requiredParameter3=requiredParameter();
      _fsp--;
      adaptor.addChild(root_0,requiredParameter3.getTree());
    }
  break;
default :
if (cnt1 >= 1) break loop1;
EarlyExitException eee=new EarlyExitException(1,input);
throw eee;
}
cnt1++;
}
 while (true);
}
break;
case 4:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_command_in_usage108);
command4=command();
_fsp--;
adaptor.addChild(root_0,command4.getTree());
int cnt2=0;
loop2: do {
int alt2=2;
int LA2_0=input.LA(1);
if ((LA2_0 == 10)) {
alt2=1;
}
switch (alt2) {
case 1:
{
pushFollow(FOLLOW_optionalParameter_in_usage110);
optionalParameter5=optionalParameter();
_fsp--;
adaptor.addChild(root_0,optionalParameter5.getTree());
}
break;
default :
if (cnt2 >= 1) break loop2;
EarlyExitException eee=new EarlyExitException(2,input);
throw eee;
}
cnt2++;
}
 while (true);
}
break;
case 5:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_command_in_usage120);
command6=command();
_fsp--;
adaptor.addChild(root_0,command6.getTree());
int cnt3=0;
loop3: do {
int alt3=2;
int LA3_0=input.LA(1);
if ((LA3_0 == ID)) {
alt3=1;
}
switch (alt3) {
case 1:
{
pushFollow(FOLLOW_requiredParameter_in_usage122);
requiredParameter7=requiredParameter();
_fsp--;
adaptor.addChild(root_0,requiredParameter7.getTree());
}
break;
default :
if (cnt3 >= 1) break loop3;
EarlyExitException eee=new EarlyExitException(3,input);
throw eee;
}
cnt3++;
}
 while (true);
int cnt4=0;
loop4: do {
int alt4=2;
int LA4_0=input.LA(1);
if ((LA4_0 == 10)) {
alt4=1;
}
switch (alt4) {
case 1:
{
pushFollow(FOLLOW_optionalParameter_in_usage125);
optionalParameter8=optionalParameter();
_fsp--;
adaptor.addChild(root_0,optionalParameter8.getTree());
}
break;
default :
if (cnt4 >= 1) break loop4;
EarlyExitException eee=new EarlyExitException(4,input);
throw eee;
}
cnt4++;
}
 while (true);
}
break;
}
retval.stop=input.LT(-1);
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
