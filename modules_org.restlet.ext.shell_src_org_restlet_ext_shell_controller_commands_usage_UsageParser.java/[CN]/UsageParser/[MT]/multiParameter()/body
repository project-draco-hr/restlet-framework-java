{
  multiParameter_return retval=new multiParameter_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token ID17=null;
  Token char_literal18=null;
  Token ID19=null;
  Object ID17_tree=null;
  Object char_literal18_tree=null;
  Object ID19_tree=null;
  RewriteRuleTokenStream stream_12=new RewriteRuleTokenStream(adaptor,"token 12");
  RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
  try {
{
      ID17=(Token)input.LT(1);
      match(input,ID,FOLLOW_ID_in_multiParameter241);
      stream_ID.add(ID17);
      int cnt7=0;
      loop7:       do {
        int alt7=2;
        int LA7_0=input.LA(1);
        if ((LA7_0 == 12)) {
          alt7=1;
        }
switch (alt7) {
case 1:
{
            char_literal18=(Token)input.LT(1);
            match(input,12,FOLLOW_12_in_multiParameter245);
            stream_12.add(char_literal18);
            ID19=(Token)input.LT(1);
            match(input,ID,FOLLOW_ID_in_multiParameter247);
            stream_ID.add(ID19);
          }
        break;
default :
      if (cnt7 >= 1)       break loop7;
    EarlyExitException eee=new EarlyExitException(7,input);
  throw eee;
}
cnt7++;
}
 while (true);
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
root_0=(Object)adaptor.nil();
{
{
Object root_1=(Object)adaptor.nil();
root_1=(Object)adaptor.becomeRoot(adaptor.create(MULTI,"MULTI"),root_1);
if (!(stream_ID.hasNext())) {
  throw new RewriteEarlyExitException();
}
while (stream_ID.hasNext()) {
  adaptor.addChild(root_1,stream_ID.next());
}
stream_ID.reset();
adaptor.addChild(root_0,root_1);
}
}
}
retval.stop=input.LT(-1);
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
