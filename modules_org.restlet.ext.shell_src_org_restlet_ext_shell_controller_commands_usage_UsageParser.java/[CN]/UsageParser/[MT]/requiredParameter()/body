{
  requiredParameter_return retval=new requiredParameter_return();
  retval.start=input.LT(1);
  Object root_0=null;
  parameter_return parameter10=null;
  RewriteRuleSubtreeStream stream_parameter=new RewriteRuleSubtreeStream(adaptor,"rule parameter");
  try {
{
      pushFollow(FOLLOW_parameter_in_requiredParameter156);
      parameter10=parameter();
      _fsp--;
      stream_parameter.add(parameter10.getTree());
      retval.tree=root_0;
      RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
      root_0=(Object)adaptor.nil();
{
{
          Object root_1=(Object)adaptor.nil();
          root_1=(Object)adaptor.becomeRoot(adaptor.create(REQ,"REQ"),root_1);
          adaptor.addChild(root_1,stream_parameter.next());
          adaptor.addChild(root_0,root_1);
        }
      }
    }
    retval.stop=input.LT(-1);
    retval.tree=(Object)adaptor.rulePostProcessing(root_0);
    adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
  }
 finally {
  }
  return retval;
}
