{
  Component comp=new Component();
  Application localOnly=new Application(comp.getContext()){
    @Override public Restlet createRoot(){
      return new Restlet(getContext()){
        @Override public void handle(        Request request,        Response response){
          final String selfBase="riap://application";
          Reference ref=request.getResourceRef();
          String remainder=ref.getRemainingPart();
          Representation result=new StringRepresentation(DEFAULT_MSG);
          if (remainder.startsWith("/echo/"))           result=new StringRepresentation(remainder.substring(6));
 else           if (remainder.equals("/object"))           result=new ObjectRepresentation(JUST_SOME_OBJ);
 else           if (remainder.equals("/null"))           result=new ObjectRepresentation((Serializable)null);
 else           if (remainder.equals("/self-aggregated")) {
            String echoMessage=ECHO_TEST_MSG;
            Reference echoRef=new LocalReference(selfBase + "/echo/" + echoMessage);
            String echoCopy=null;
            try {
              final Response respo=getContext().getClientDispatcher().get(echoRef);
              final Representation entity=respo.getEntity();
              echoCopy=entity.getText();
            }
 catch (            Exception e) {
              e.printStackTrace();
              fail("Error getting internal reference to " + echoRef);
            }
            assertEquals("expected echoMessage back",echoMessage,echoCopy);
            result=new StringRepresentation(buildAggregate(echoMessage,echoCopy));
          }
          response.setEntity(result);
        }
      }
;
    }
  }
;
  comp.getInternalRouter().attach("/local",localOnly);
  final String localBase="riap://component/local";
  Uniform dispatcher=comp.getContext().getClientDispatcher();
  final String msg="this message";
  final String echoURI=localBase + "/echo/" + msg;
  final Representation echoRep=dispatcher.get(echoURI).getEntity();
  assertEquals("expected echo of uri-remainder",msg,echoRep.getText());
  final String objURI=localBase + "/object";
  final Representation objRep=dispatcher.get(objURI).getEntity();
  assertSame("expected specific test-object",JUST_SOME_OBJ,((ObjectRepresentation)objRep).getObject());
  final String nullURI=localBase + "/null";
  final Representation nullRep=dispatcher.get(nullURI).getEntity();
  assertNull("expected null",((ObjectRepresentation)nullRep).getObject());
  final String anyURI=localBase + "/whatever";
  final Representation anyRep=dispatcher.get(anyURI).getEntity();
  assertEquals("expected echo of uri-remainder",DEFAULT_MSG,anyRep.getText());
  final String aggURI=localBase + "/self-aggregated";
  final Representation aggRep=dispatcher.get(aggURI).getEntity();
  final String expectedResult=buildAggregate(ECHO_TEST_MSG,ECHO_TEST_MSG);
  assertEquals("expected specific aggregated message",expectedResult,aggRep.getText());
}
