def testtype(type, example):
    if verbose:
        print 'testing type ', type
    a = array(type)
    a.append(example)
    if verbose:
        print (40 * '*')
        print 'array after append: ', a
    a.typecode
    a.itemsize
    if (a != eval(str(a))):
        raise TestFailed, ('eval(str(%s)) <> %s' % (a, a))
    if (a.typecode in ('i', 'b', 'h', 'l')):
        a.byteswap()
    if (a.typecode == 'c'):
        f = open(TESTFN, 'w')
        f.write('The quick brown fox jumps over the lazy dog.\n')
        f.close()
        f = open(TESTFN, 'r')
        a.fromfile(f, 10)
        f.close()
        if verbose:
            print 'char array with 10 bytes of TESTFN appended: ', a
        a.fromlist(['a', 'b', 'c'])
        if verbose:
            print 'char array with list appended: ', a
    a.insert(0, example)
    if verbose:
        print ('array of %s after inserting another:' % a.typecode), a
    f = open(TESTFN, 'w')
    a.tofile(f)
    f.close()
    a.tolist()
    a.tostring()
    repr(a)
    str(a)
    if verbose:
        print ('array of %s converted to a list: ' % a.typecode), a.tolist()
    if verbose:
        print ('array of %s converted to a string: ' % a.typecode), a.tostring()
    if (type == 'c'):
        a = array(type, 'abcde')
        a[:(-1)] = a
        if (a != array(type, 'abcdee')):
            raise TestFailed, ('array(%s) self-slice-assign (head)' % type)
        a = array(type, 'abcde')
        a[1:] = a
        if (a != array(type, 'aabcde')):
            raise TestFailed, ('array(%s) self-slice-assign (tail)' % type)
        a = array(type, 'abcde')
        a[1:(-1)] = a
        if (a != array(type, 'aabcdee')):
            raise TestFailed, ('array(%s) self-slice-assign (cntr)' % type)
        if (a.index('e') != 5):
            raise TestFailed, ('array(%s) index-test' % type)
        if (a.count('a') != 2):
            raise TestFailed, ('array(%s) count-test' % type)
        a.remove('e')
        if (a != array(type, 'aabcde')):
            raise TestFailed, ('array(%s) remove-test' % type)
        if (a.pop(0) != 'a'):
            raise TestFailed, ('array(%s) pop-test' % type)
        if (a.pop(1) != 'b'):
            raise TestFailed, ('array(%s) pop-test' % type)
        a.extend(array(type, 'xyz'))
        if (a != array(type, 'acdexyz')):
            raise TestFailed, ('array(%s) extend-test' % type)
        a.pop()
        a.pop()
        a.pop()
        x = a.pop()
        if (x != 'e'):
            raise TestFailed, ('array(%s) pop-test' % type)
        if (a != array(type, 'acd')):
            raise TestFailed, ('array(%s) pop-test' % type)
        a.reverse()
        if (a != array(type, 'dca')):
            raise TestFailed, ('array(%s) reverse-test' % type)
    else:
        a = array(type, [1, 2, 3, 4, 5])
        a[:(-1)] = a
        if (a != array(type, [1, 2, 3, 4, 5, 5])):
            raise TestFailed, ('array(%s) self-slice-assign (head)' % type)
        a = array(type, [1, 2, 3, 4, 5])
        a[1:] = a
        if (a != array(type, [1, 1, 2, 3, 4, 5])):
            raise TestFailed, ('array(%s) self-slice-assign (tail)' % type)
        a = array(type, [1, 2, 3, 4, 5])
        a[1:(-1)] = a
        if (a != array(type, [1, 1, 2, 3, 4, 5, 5])):
            raise TestFailed, ('array(%s) self-slice-assign (cntr)' % type)
        if (a.index(5) != 5):
            raise TestFailed, ('array(%s) index-test' % type)
        if (a.count(1) != 2):
            raise TestFailed, ('array(%s) count-test' % type)
        a.remove(5)
        if (a != array(type, [1, 1, 2, 3, 4, 5])):
            raise TestFailed, ('array(%s) remove-test' % type)
        if (a.pop(0) != 1):
            raise TestFailed, ('array(%s) pop-test' % type)
        if (a.pop(1) != 2):
            raise TestFailed, ('array(%s) pop-test' % type)
        a.extend(array(type, [7, 8, 9]))
        if (a != array(type, [1, 3, 4, 5, 7, 8, 9])):
            raise TestFailed, ('array(%s) extend-test' % type)
        a.pop()
        a.pop()
        a.pop()
        x = a.pop()
        if (x != 5):
            raise TestFailed, ('array(%s) pop-test' % type)
        if (a != array(type, [1, 3, 4])):
            raise TestFailed, ('array(%s) pop-test' % type)
        a.reverse()
        if (a != array(type, [4, 3, 1])):
            raise TestFailed, ('array(%s) reverse-test' % type)
    from math import pow
    if (type in ('b', 'h', 'i', 'l')):
        a = array(type)
        signedLowerLimit = ((-1) * long(pow(2, ((a.itemsize * 8) - 1))))
        signedUpperLimit = (long(pow(2, ((a.itemsize * 8) - 1))) - 1L)
        unsignedLowerLimit = 0
        unsignedUpperLimit = (long(pow(2, (a.itemsize * 8))) - 1L)
        testoverflow(type, signedLowerLimit, signedUpperLimit)
    if (type in ('b', 'h')):
        a = array(type)
        signedLowerLimit = ((-1) * int(pow(2, ((a.itemsize * 8) - 1))))
        signedUpperLimit = (int(pow(2, ((a.itemsize * 8) - 1))) - 1)
        unsignedLowerLimit = 0
        unsignedUpperLimit = (int(pow(2, (a.itemsize * 8))) - 1)
        testoverflow(type, signedLowerLimit, signedUpperLimit)
