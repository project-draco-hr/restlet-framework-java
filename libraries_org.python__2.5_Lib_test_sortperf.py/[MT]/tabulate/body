def tabulate(r):
    'Tabulate sort speed for lists of various sizes.\n\n    The sizes are 2**i for i in r (the argument, a list).\n\n    The output displays i, 2**i, and the time to sort arrays of 2**i\n    floating point numbers with the following properties:\n\n    *sort: random data\n    \\sort: descending data\n    /sort: ascending data\n    3sort: ascending, then 3 random exchanges\n    +sort: ascending, then 10 random at the end\n    %sort: ascending, then randomly replace 1% of the elements w/ random values\n    ~sort: many duplicates\n    =sort: all equal\n    !sort: worst case scenario\n\n    '
    cases = tuple([(ch + 'sort') for ch in '*\\/3+%~=!'])
    fmt = ('%2s %7s' + (' %6s' * len(cases)))
    print (fmt % (('i', '2**i') + cases))
    for i in r:
        n = (1 << i)
        L = randfloats(n)
        print ('%2d %7d' % (i, n)),
        flush()
        doit(L)
        L.reverse()
        doit(L)
        doit(L)
        for dummy in range(3):
            i1 = random.randrange(n)
            i2 = random.randrange(n)
            (L[i1], L[i2]) = (L[i2], L[i1])
        doit(L)
        if (n >= 10):
            L[(-10):] = [random.random() for dummy in range(10)]
        doit(L)
        for dummy in xrange((n // 100)):
            L[random.randrange(n)] = random.random()
        doit(L)
        if (n > 4):
            del L[4:]
            L = (L * (n // 4))
            L = map((lambda x: (- (- x))), L)
        doit(L)
        del L
        L = map(abs, ([(-0.5)] * n))
        doit(L)
        del L
        half = (n // 2)
        L = range((half - 1), (-1), (-1))
        L.extend(range(half))
        L = map(float, L)
        doit(L)
        print 
