def test_dsn(self):
    eq = self.assertEqual
    unless = self.failUnless
    msg = self._msgobj('msg_16.txt')
    eq(msg.get_content_type(), 'multipart/report')
    unless(msg.is_multipart())
    eq(len(msg.get_payload()), 3)
    subpart = msg.get_payload(0)
    eq(subpart.get_content_type(), 'text/plain')
    eq(subpart.get_payload(), 'This report relates to a message you sent with the following header fields:\n\n  Message-id: <002001c144a6$8752e060$56104586@oxy.edu>\n  Date: Sun, 23 Sep 2001 20:10:55 -0700\n  From: "Ian T. Henry" <henryi@oxy.edu>\n  To: SoCal Raves <scr@socal-raves.org>\n  Subject: [scr] yeah for Ians!!\n\nYour message cannot be delivered to the following recipients:\n\n  Recipient address: jangel1@cougar.noc.ucla.edu\n  Reason: recipient reached disk quota\n\n')
    subpart = msg.get_payload(1)
    eq(subpart.get_content_type(), 'message/delivery-status')
    eq(len(subpart.get_payload()), 2)
    dsn1 = subpart.get_payload(0)
    unless(isinstance(dsn1, Message))
    eq(dsn1['original-envelope-id'], '0GK500B4HD0888@cougar.noc.ucla.edu')
    eq(dsn1.get_param('dns', header='reporting-mta'), '')
    eq(dsn1.get_param('nsd', header='reporting-mta'), None)
    dsn2 = subpart.get_payload(1)
    unless(isinstance(dsn2, Message))
    eq(dsn2['action'], 'failed')
    eq(dsn2.get_params(header='original-recipient'), [('rfc822', ''), ('jangel1@cougar.noc.ucla.edu', '')])
    eq(dsn2.get_param('rfc822', header='final-recipient'), '')
    subpart = msg.get_payload(2)
    eq(subpart.get_content_type(), 'message/rfc822')
    payload = subpart.get_payload()
    unless(isinstance(payload, list))
    eq(len(payload), 1)
    subsubpart = payload[0]
    unless(isinstance(subsubpart, Message))
    eq(subsubpart.get_content_type(), 'text/plain')
    eq(subsubpart['message-id'], '<002001c144a6$8752e060$56104586@oxy.edu>')
