def uname():
    " Fairly portable uname interface. Returns a tuple\n        of strings (system,node,release,version,machine,processor)\n        identifying the underlying platform.\n\n        Note that unlike the os.uname function this also returns\n        possible processor information as an additional tuple entry.\n\n        Entries which cannot be determined are set to ''.\n\n    "
    global _uname_cache
    if (_uname_cache is not None):
        return _uname_cache
    try:
        (system, node, release, version, machine) = os.uname()
    except AttributeError:
        system = sys.platform
        release = ''
        version = ''
        node = _node()
        machine = ''
        processor = ''
        use_syscmd_ver = 1
        if (system == 'win32'):
            (release, version, csd, ptype) = win32_ver()
            if (release and version):
                use_syscmd_ver = 0
        if use_syscmd_ver:
            (system, release, version) = _syscmd_ver(system)
            if (system == 'Microsoft Windows'):
                system = 'Windows'
        if (system in ('win32', 'win16')):
            if (not version):
                if (system == 'win32'):
                    version = '32bit'
                else:
                    version = '16bit'
            system = 'Windows'
        elif (system[:4] == 'java'):
            (release, vendor, vminfo, osinfo) = java_ver()
            system = 'Java'
            version = string.join(vminfo, ', ')
            if (not version):
                version = vendor
        elif (os.name == 'mac'):
            (release, (version, stage, nonrel), machine) = mac_ver()
            system = 'MacOS'
    else:
        if (system == 'OpenVMS'):
            if ((not release) or (release == '0')):
                release = version
                version = ''
            try:
                import vms_lib
            except ImportError:
                pass
            else:
                (csid, cpu_number) = vms_lib.getsyi('SYI$_CPU', 0)
                if (cpu_number >= 128):
                    processor = 'Alpha'
                else:
                    processor = 'VAX'
        else:
            processor = _syscmd_uname('-p', '')
    if (system == 'unknown'):
        system = ''
    if (node == 'unknown'):
        node = ''
    if (release == 'unknown'):
        release = ''
    if (version == 'unknown'):
        version = ''
    if (machine == 'unknown'):
        machine = ''
    if (processor == 'unknown'):
        processor = ''
    if ((system == 'Microsoft') and (release == 'Windows')):
        system = 'Windows'
        release = 'Vista'
    _uname_cache = (system, node, release, version, machine, processor)
    return _uname_cache
