def architecture(executable=sys.executable, bits='', linkage=''):
    ' Queries the given executable (defaults to the Python interpreter\n        binary) for various architecture information.\n\n        Returns a tuple (bits,linkage) which contains information about\n        the bit architecture and the linkage format used for the\n        executable. Both values are returned as strings.\n\n        Values that cannot be determined are returned as given by the\n        parameter presets. If bits is given as \'\', the sizeof(pointer)\n        (or sizeof(long) on Python version < 1.5.2) is used as\n        indicator for the supported pointer size.\n\n        The function relies on the system\'s "file" command to do the\n        actual work. This is available on most if not all Unix\n        platforms. On some non-Unix platforms where the "file" command\n        does not exist and the executable is set to the Python interpreter\n        binary defaults from _default_architecture are used.\n\n    '
    if (not bits):
        import struct
        try:
            size = struct.calcsize('P')
        except struct.error:
            size = struct.calcsize('l')
        bits = (str((size * 8)) + 'bit')
    output = _syscmd_file(executable, '')
    if ((not output) and (executable == sys.executable)):
        if _default_architecture.has_key(sys.platform):
            (b, l) = _default_architecture[sys.platform]
            if b:
                bits = b
            if l:
                linkage = l
        return (bits, linkage)
    fileout = _architecture_split(output)[1:]
    if ('executable' not in fileout):
        return (bits, linkage)
    if ('32-bit' in fileout):
        bits = '32bit'
    elif ('N32' in fileout):
        bits = 'n32bit'
    elif ('64-bit' in fileout):
        bits = '64bit'
    if ('ELF' in fileout):
        linkage = 'ELF'
    elif ('PE' in fileout):
        if ('Windows' in fileout):
            linkage = 'WindowsPE'
        else:
            linkage = 'PE'
    elif ('COFF' in fileout):
        linkage = 'COFF'
    elif ('MS-DOS' in fileout):
        linkage = 'MSDOS'
    else:
        pass
    return (bits, linkage)
