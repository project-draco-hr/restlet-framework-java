def win32_ver(release='', version='', csd='', ptype=''):
    " Get additional version information from the Windows Registry\n        and return a tuple (version,csd,ptype) referring to version\n        number, CSD level and OS type (multi/single\n        processor).\n\n        As a hint: ptype returns 'Uniprocessor Free' on single\n        processor NT machines and 'Multiprocessor Free' on multi\n        processor machines. The 'Free' refers to the OS version being\n        free of debugging code. It could also state 'Checked' which\n        means the OS version uses debugging code, i.e. code that\n        checks arguments, ranges, etc. (Thomas Heller).\n\n        Note: this function only works if Mark Hammond's win32\n        package is installed and obviously only runs on Win32\n        compatible platforms.\n\n    "
    try:
        import win32api
    except ImportError:
        return (release, version, csd, ptype)
    from win32api import RegQueryValueEx, RegOpenKeyEx, RegCloseKey, GetVersionEx
    from win32con import HKEY_LOCAL_MACHINE, VER_PLATFORM_WIN32_NT, VER_PLATFORM_WIN32_WINDOWS
    (maj, min, buildno, plat, csd) = GetVersionEx()
    version = ('%i.%i.%i' % (maj, min, (buildno & 65535)))
    if (csd[:13] == 'Service Pack '):
        csd = ('SP' + csd[13:])
    if (plat == VER_PLATFORM_WIN32_WINDOWS):
        regkey = 'SOFTWARE\\Microsoft\\Windows\\CurrentVersion'
        if (maj == 4):
            if (min == 0):
                release = '95'
            elif (min == 10):
                release = '98'
            elif (min == 90):
                release = 'Me'
            else:
                release = 'postMe'
        elif (maj == 5):
            release = '2000'
    elif (plat == VER_PLATFORM_WIN32_NT):
        regkey = 'SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion'
        if (maj <= 4):
            release = 'NT'
        elif (maj == 5):
            if (min == 0):
                release = '2000'
            elif (min == 1):
                release = 'XP'
            elif (min == 2):
                release = '2003Server'
            else:
                release = 'post2003'
    else:
        if (not release):
            release = ('%i.%i' % (maj, min))
        return (release, version, csd, ptype)
    try:
        keyCurVer = RegOpenKeyEx(HKEY_LOCAL_MACHINE, regkey)
        RegQueryValueEx(keyCurVer, 'SystemRoot')
    except:
        return (release, version, csd, ptype)
    build = _win32_getvalue(keyCurVer, 'CurrentBuildNumber', ('', 1))[0]
    ptype = _win32_getvalue(keyCurVer, 'CurrentType', (ptype, 1))[0]
    version = _norm_version(version, build)
    RegCloseKey(keyCurVer)
    return (release, version, csd, ptype)
