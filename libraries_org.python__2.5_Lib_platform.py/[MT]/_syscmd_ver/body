def _syscmd_ver(system='', release='', version='', supported_platforms=('win32', 'win16', 'dos', 'os2')):
    ' Tries to figure out the OS version used and returns\n        a tuple (system,release,version).\n\n        It uses the "ver" shell command for this which is known\n        to exists on Windows, DOS and OS/2. XXX Others too ?\n\n        In case this fails, the given parameters are used as\n        defaults.\n\n    '
    if (sys.platform not in supported_platforms):
        return (system, release, version)
    for cmd in ('ver', 'command /c ver', 'cmd /c ver'):
        try:
            pipe = popen(cmd)
            info = pipe.read()
            if pipe.close():
                raise os.error, 'command failed'
        except os.error as why:
            continue
        except IOError as why:
            continue
        else:
            break
    else:
        return (system, release, version)
    info = string.strip(info)
    m = _ver_output.match(info)
    if m:
        (system, release, version) = m.groups()
        if (release[(-1)] == '.'):
            release = release[:(-1)]
        if (version[(-1)] == '.'):
            version = version[:(-1)]
        version = _norm_version(version)
    return (system, release, version)
