def test_subclass_local(self):

    def f():
        items = mydata.__dict__.items()
        items.sort()
        log.append(items)
        mydata.number = 11
        log.append(mydata.number)


    class MyLocal(local):
        number = 2
        initialized = False

        def __init__(self, **kw):
            if self.initialized:
                raise SystemError('__init__ called too many times')
            self.initialized = True
            self.__dict__.update(kw)

        def squared(self):
            return (self.number ** 2)


    class SubSubLocal(MyLocal):
        pass
    mydata = MyLocal(color='red')
    self.assertEqual(mydata.number, 2)
    self.assertEqual(mydata.color, 'red')
    del mydata.color
    log = []
    self.assertEqual(mydata.squared(), 4)
    thread = threading.Thread(target=f)
    thread.start()
    thread.join()
    self.assertEqual(log, [[('color', 'red'), ('initialized', True)], 11])
    self.assertEqual(mydata.number, 2)
    self.assertRaises(TypeError, local, 'any arguments')
    SubSubLocal(color='red')

    def accessColor():
        mydata.color
    self.assertRaises(AttributeError, accessColor)


    class MyLocal(local):
        __slots__ = 'number'
    mydata = MyLocal()
    mydata.number = 42
    mydata.color = 'red'
    thread = threading.Thread(target=f)
    thread.start()
    thread.join()
    self.assertEqual(mydata.number, 11)
