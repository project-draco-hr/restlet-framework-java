{
  Preference<T> result=null;
  boolean readingMetadata=true;
  boolean readingParamName=false;
  boolean readingParamValue=false;
  StringBuilder metadataBuffer=new StringBuilder();
  StringBuilder paramNameBuffer=null;
  StringBuilder paramValueBuffer=null;
  Series<Parameter> parameters=null;
  int next=0;
  while (result == null) {
    next=read();
    if (readingMetadata) {
      if ((next == -1) || isComma(next)) {
        if (metadataBuffer.length() > 0) {
          result=createPreference(metadataBuffer,null);
        }
 else {
          break;
        }
      }
 else       if (next == ';') {
        if (metadataBuffer.length() > 0) {
          readingMetadata=false;
          readingParamName=true;
          paramNameBuffer=new StringBuilder();
          parameters=new Series<Parameter>(Parameter.class);
        }
 else {
          throw new IOException("Empty metadata name detected.");
        }
      }
 else       if (isSpace(next)) {
      }
 else       if (isText(next)) {
        metadataBuffer.append((char)next);
      }
 else {
        throw new IOException("Unexpected character \"" + (char)next + "\" detected.");
      }
    }
 else     if (readingParamName) {
      if (next == '=') {
        if (paramNameBuffer.length() > 0) {
          readingParamName=false;
          readingParamValue=true;
          paramValueBuffer=new StringBuilder();
        }
 else {
          throw new IOException("Empty parameter name detected.");
        }
      }
 else       if ((next == -1) || isComma(next)) {
        if (paramNameBuffer.length() > 0) {
          parameters.add(Parameter.create(paramNameBuffer,null));
          result=createPreference(metadataBuffer,parameters);
        }
 else {
          throw new IOException("Empty parameter name detected.");
        }
      }
 else       if (next == ';') {
        parameters.add(Parameter.create(paramNameBuffer,null));
        paramNameBuffer=new StringBuilder();
        readingParamName=true;
        readingParamValue=false;
      }
 else       if (isSpace(next) && (paramNameBuffer.length() == 0)) {
      }
 else       if (isTokenChar(next)) {
        paramNameBuffer.append((char)next);
      }
 else {
        throw new IOException("Unexpected character \"" + (char)next + "\" detected.");
      }
    }
 else     if (readingParamValue) {
      if ((next == -1) || isComma(next) || isSpace(next)) {
        if (paramValueBuffer.length() > 0) {
          parameters.add(Parameter.create(paramNameBuffer,paramValueBuffer));
          result=createPreference(metadataBuffer,parameters);
        }
 else {
          throw new IOException("Empty parameter value detected");
        }
      }
 else       if (next == ';') {
        parameters.add(Parameter.create(paramNameBuffer,paramValueBuffer));
        paramNameBuffer=new StringBuilder();
        readingParamName=true;
        readingParamValue=false;
      }
 else       if ((next == '"') && (paramValueBuffer.length() == 0)) {
        boolean done=false;
        boolean quotedPair=false;
        while ((!done) && (next != -1)) {
          next=read();
          if (quotedPair) {
            if (isText(next)) {
              paramValueBuffer.append((char)next);
              quotedPair=false;
            }
 else {
              throw new IOException("Invalid character detected in quoted string. Please check your value");
            }
          }
 else           if (isDoubleQuote(next)) {
            done=true;
          }
 else           if (next == '\\') {
            quotedPair=true;
          }
 else           if (isText(next)) {
            paramValueBuffer.append((char)next);
          }
 else {
            throw new IOException("Invalid character detected in quoted string. Please check your value");
          }
        }
      }
 else       if (isTokenChar(next)) {
        paramValueBuffer.append((char)next);
      }
 else {
        throw new IOException("Unexpected character \"" + (char)next + "\" detected.");
      }
    }
  }
  if (isComma(next)) {
    unread();
  }
  return result;
}
