def test_hash_method(self):
    hash(Decimal(23))
    test_values = [Decimal((sign * ((2 ** m) + n))) for m in [0, 14, 15, 16, 17, 30, 31, 32, 33, 62, 63, 64, 65, 66] for n in range((-10), 10) for sign in [(-1), 1]]
    test_values.extend([Decimal('-0'), Decimal('0.00'), Decimal('-0.000'), Decimal('0E10'), Decimal('-0E12'), Decimal('10.0'), Decimal('-23.00000'), Decimal('1230E100'), Decimal('-4.5678E50'), Decimal((((2 ** 64) + (2 ** 32)) - 1)), Decimal('1.634E100'), Decimal('90.697E100'), Decimal('188.83E100'), Decimal('1652.9E100'), Decimal('56531E100')])
    for value in test_values:
        self.assertEqual(hash(value), hash(int(value)))
    self.assertEqual(hash(Decimal(23)), hash(23))
    self.assertRaises(TypeError, hash, Decimal('NaN'))
    self.assert_(hash(Decimal('Inf')))
    self.assert_(hash(Decimal('-Inf')))
    c = getcontext()
    old_precision = c.prec
    x = Decimal('123456789.1')
    c.prec = 6
    h1 = hash(x)
    c.prec = 10
    h2 = hash(x)
    c.prec = 16
    h3 = hash(x)
    self.assertEqual(h1, h2)
    self.assertEqual(h1, h3)
    c.prec = old_precision
