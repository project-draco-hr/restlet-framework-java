"\nThese are the test cases for the Decimal module.\n\nThere are two groups of tests, Arithmetic and Behaviour. The former test\nthe Decimal arithmetic using the tests provided by Mike Cowlishaw. The latter\ntest the pythonic behaviour according to PEP 327.\n\nCowlishaw's tests can be downloaded from:\n\n   www2.hursley.ibm.com/decimal/dectest.zip\n\nThis test module can be called from command line with one parameter (Arithmetic\nor Behaviour) to test each part, or without parameter to test both parts. If\nyou're working through IDLE, you can import this test module and call test_main()\nwith the corresponding argument.\n"
from __future__ import with_statement
import unittest
import glob
import os, sys
import pickle, copy
from decimal import *
from test.test_support import TestSkipped, run_unittest, run_doctest, is_resource_enabled
import random
try:
    import threading
except ImportError:
    threading = None
Signals = getcontext().flags.keys()
TESTDATADIR = 'decimaltestdata'
if (__name__ == '__main__'):
    file = sys.argv[0]
else:
    file = __file__
testdir = (os.path.dirname(file) or os.curdir)
directory = (((testdir + os.sep) + TESTDATADIR) + os.sep)
skip_expected = (not os.path.isdir(directory))
EXTENDEDERRORTEST = False
ErrorNames = {'clamped': Clamped, 'conversion_syntax': InvalidOperation, 'division_by_zero': DivisionByZero, 'division_impossible': InvalidOperation, 'division_undefined': InvalidOperation, 'inexact': Inexact, 'invalid_context': InvalidOperation, 'invalid_operation': InvalidOperation, 'overflow': Overflow, 'rounded': Rounded, 'subnormal': Subnormal, 'underflow': Underflow, }
RoundingDict = {'ceiling': ROUND_CEILING, 'down': ROUND_DOWN, 'floor': ROUND_FLOOR, 'half_down': ROUND_HALF_DOWN, 'half_even': ROUND_HALF_EVEN, 'half_up': ROUND_HALF_UP, 'up': ROUND_UP, '05up': ROUND_05UP, }
nameAdapter = {'and': 'logical_and', 'apply': '_apply', 'class': 'number_class', 'comparesig': 'compare_signal', 'comparetotal': 'compare_total', 'comparetotmag': 'compare_total_mag', 'copy': 'copy_decimal', 'copyabs': 'copy_abs', 'copynegate': 'copy_negate', 'copysign': 'copy_sign', 'divideint': 'divide_int', 'invert': 'logical_invert', 'iscanonical': 'is_canonical', 'isfinite': 'is_finite', 'isinfinite': 'is_infinite', 'isnan': 'is_nan', 'isnormal': 'is_normal', 'isqnan': 'is_qnan', 'issigned': 'is_signed', 'issnan': 'is_snan', 'issubnormal': 'is_subnormal', 'iszero': 'is_zero', 'maxmag': 'max_mag', 'minmag': 'min_mag', 'nextminus': 'next_minus', 'nextplus': 'next_plus', 'nexttoward': 'next_toward', 'or': 'logical_or', 'reduce': 'normalize', 'remaindernear': 'remainder_near', 'samequantum': 'same_quantum', 'squareroot': 'sqrt', 'toeng': 'to_eng_string', 'tointegral': 'to_integral_value', 'tointegralx': 'to_integral_exact', 'tosci': 'to_sci_string', 'xor': 'logical_xor', }
LOGICAL_FUNCTIONS = ('is_canonical', 'is_finite', 'is_infinite', 'is_nan', 'is_normal', 'is_qnan', 'is_signed', 'is_snan', 'is_subnormal', 'is_zero', 'same_quantum')
decNumberRestricted = ('power', 'ln', 'log10', 'exp')
DEC_MAX_MATH = 999999
if (__name__ == '__main__'):
    import optparse
    p = optparse.OptionParser('test_decimal.py [--debug] [{--skip | test1 [test2 [...]]}]')
    p.add_option('--debug', '-d', action='store_true', help='shows the test number and context before each test')
    p.add_option('--skip', '-s', action='store_true', help='skip over 90% of the arithmetic tests')
    (opt, args) = p.parse_args()
    if opt.skip:
        test_main(arith=False, verbose=True)
    elif args:
        test_main(arith=True, verbose=True, todo_tests=args, debug=opt.debug)
    else:
        test_main(arith=True, verbose=True)
