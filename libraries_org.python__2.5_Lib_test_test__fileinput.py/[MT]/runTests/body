def runTests(t1, t2, t3, t4, bs=0, round=0):
    start = (1 + (round * 6))
    if verbose:
        print ('%s. Simple iteration (bs=%s)' % ((start + 0), bs))
    fi = FileInput(files=(t1, t2, t3, t4), bufsize=bs)
    lines = list(fi)
    fi.close()
    verify((len(lines) == 31))
    verify((lines[4] == 'Line 5 of file 1\n'))
    verify((lines[30] == 'Line 1 of file 4\n'))
    verify((fi.lineno() == 31))
    verify((fi.filename() == t4))
    if verbose:
        print ('%s. Status variables (bs=%s)' % ((start + 1), bs))
    fi = FileInput(files=(t1, t2, t3, t4), bufsize=bs)
    s = 'x'
    while (s and (s != 'Line 6 of file 2\n')):
        s = fi.readline()
    verify((fi.filename() == t2))
    verify((fi.lineno() == 21))
    verify((fi.filelineno() == 6))
    verify((not fi.isfirstline()))
    verify((not fi.isstdin()))
    if verbose:
        print ('%s. Nextfile (bs=%s)' % ((start + 2), bs))
    fi.nextfile()
    verify((fi.readline() == 'Line 1 of file 3\n'))
    verify((fi.lineno() == 22))
    fi.close()
    if verbose:
        print ('%s. Stdin (bs=%s)' % ((start + 3), bs))
    fi = FileInput(files=(t1, t2, t3, t4, '-'), bufsize=bs)
    savestdin = sys.stdin
    try:
        sys.stdin = StringIO('Line 1 of stdin\nLine 2 of stdin\n')
        lines = list(fi)
        verify((len(lines) == 33))
        verify((lines[32] == 'Line 2 of stdin\n'))
        verify((fi.filename() == '<stdin>'))
        fi.nextfile()
    finally:
        sys.stdin = savestdin
    if verbose:
        print ('%s. Boundary conditions (bs=%s)' % ((start + 4), bs))
    fi = FileInput(files=(t1, t2, t3, t4), bufsize=bs)
    verify((fi.lineno() == 0))
    verify((fi.filename() == None))
    fi.nextfile()
    verify((fi.lineno() == 0))
    verify((fi.filename() == None))
    if verbose:
        print ('%s. Inplace (bs=%s)' % ((start + 5), bs))
    savestdout = sys.stdout
    try:
        fi = FileInput(files=(t1, t2, t3, t4), inplace=1, bufsize=bs)
        for line in fi:
            line = line[:(-1)].upper()
            print line
        fi.close()
    finally:
        sys.stdout = savestdout
    fi = FileInput(files=(t1, t2, t3, t4), bufsize=bs)
    for line in fi:
        verify((line[(-1)] == '\n'))
        m = pat.match(line[:(-1)])
        verify((m != None))
        verify((int(m.group(1)) == fi.filelineno()))
    fi.close()
