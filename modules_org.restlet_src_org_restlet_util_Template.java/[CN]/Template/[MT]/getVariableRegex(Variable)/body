{
  String result=null;
  if (variable.isFixed()) {
    result=Pattern.quote(variable.getDefaultValue());
  }
 else {
    final String ALL=".";
    final String ALPHA="a-zA-Z";
    final String DIGIT="0-9";
    final String ALPHA_DIGIT=ALPHA + DIGIT;
    final String HEXA=DIGIT + "ABCDEFabcdef";
    final String URI_UNRESERVED=ALPHA_DIGIT + "\\-\\.\\_\\~";
    final String URI_GEN_DELIMS="\\:\\/\\?\\#\\[\\]\\@";
    final String URI_SUB_DELIMS="\\!\\$\\&\\'\\(\\)\\*\\+\\,\\;\\=";
    final String URI_RESERVED=URI_GEN_DELIMS + URI_SUB_DELIMS;
    final String WORD="\\w";
    final String CRLF="\\r\\n";
    final String CTL="\\p{Cntrl}";
    final String LWS=CRLF + "\\ \\t";
    final String SEPARATOR="\\(\\)\\<\\>\\@\\,\\;\\:\\[\\]\"\\/\\\\?\\=\\{\\}\\ \\t";
    final String TOKEN="[^" + SEPARATOR + "]";
    final String COMMENT="[^" + CTL + "]"+ "[^\\(\\)]"+ LWS;
    final String COMMENT_ATTRIBUTE="[^\\;\\(\\)]";
    final String PCT_ENCODED="\\%[" + HEXA + "]["+ HEXA+ "]";
    final String PCHAR="[" + URI_UNRESERVED + URI_SUB_DELIMS+ "\\:\\@]|(?:"+ PCT_ENCODED+ ")";
    final String QUERY=PCHAR + "|\\/|\\?";
    final String FRAGMENT=QUERY;
    final String URI_PATH=PCHAR + "|\\/";
    final String URI_ALL="[" + URI_RESERVED + URI_UNRESERVED+ "]|(?:"+ PCT_ENCODED+ ")";
    final StringBuilder coreRegex=new StringBuilder();
switch (variable.getType()) {
case Variable.TYPE_ALL:
      appendClass(coreRegex,ALL,variable.isRequired());
    break;
case Variable.TYPE_ALPHA:
  appendClass(coreRegex,ALPHA,variable.isRequired());
break;
case Variable.TYPE_DIGIT:
appendClass(coreRegex,DIGIT,variable.isRequired());
break;
case Variable.TYPE_ALPHA_DIGIT:
appendClass(coreRegex,ALPHA_DIGIT,variable.isRequired());
break;
case Variable.TYPE_URI_ALL:
appendGroup(coreRegex,URI_ALL,variable.isRequired());
break;
case Variable.TYPE_URI_UNRESERVED:
appendClass(coreRegex,URI_UNRESERVED,variable.isRequired());
break;
case Variable.TYPE_WORD:
appendClass(coreRegex,WORD,variable.isRequired());
break;
case Variable.TYPE_URI_FRAGMENT:
appendGroup(coreRegex,FRAGMENT,variable.isRequired());
break;
case Variable.TYPE_URI_PATH:
appendGroup(coreRegex,URI_PATH,variable.isRequired());
break;
case Variable.TYPE_URI_QUERY:
appendGroup(coreRegex,QUERY,variable.isRequired());
break;
case Variable.TYPE_URI_SEGMENT:
appendGroup(coreRegex,PCHAR,variable.isRequired());
break;
case Variable.TYPE_TOKEN:
appendClass(coreRegex,TOKEN,variable.isRequired());
break;
case Variable.TYPE_COMMENT:
appendClass(coreRegex,COMMENT,variable.isRequired());
break;
case Variable.TYPE_COMMENT_ATTRIBUTE:
appendClass(coreRegex,COMMENT_ATTRIBUTE,variable.isRequired());
break;
}
result=coreRegex.toString();
}
return result;
}
