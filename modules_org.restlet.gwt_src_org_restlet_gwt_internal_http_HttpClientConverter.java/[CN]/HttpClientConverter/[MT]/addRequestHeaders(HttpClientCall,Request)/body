{
  if (httpCall != null) {
    final Series<Parameter> requestHeaders=httpCall.getRequestHeaders();
    final Reference hostRef=(request.getResourceRef().getBaseRef() != null) ? request.getResourceRef().getBaseRef() : request.getResourceRef();
    if (hostRef.getHostDomain() != null) {
      String host=hostRef.getHostDomain();
      final int hostRefPortValue=hostRef.getHostPort();
      if ((hostRefPortValue != -1) && (hostRefPortValue != request.getProtocol().getDefaultPort())) {
        host=host + ':' + hostRefPortValue;
      }
      requestHeaders.add(HttpConstants.HEADER_HOST,host);
    }
    if (request.getClientInfo().getAgent() != null) {
      requestHeaders.add(HttpConstants.HEADER_USER_AGENT,request.getClientInfo().getAgent());
    }
 else {
      requestHeaders.add(HttpConstants.HEADER_USER_AGENT,Engine.VERSION_HEADER);
    }
    final Conditions condition=request.getConditions();
    if (!condition.getMatch().isEmpty()) {
      final StringBuilder value=new StringBuilder();
      for (int i=0; i < condition.getMatch().size(); i++) {
        if (i > 0) {
          value.append(", ");
        }
        value.append(condition.getMatch().get(i).format());
      }
      httpCall.getRequestHeaders().add(HttpConstants.HEADER_IF_MATCH,value.toString());
    }
    if (condition.getModifiedSince() != null) {
      final String imsDate=DateUtils.format(condition.getModifiedSince(),DateUtils.FORMAT_RFC_1123.get(0));
      requestHeaders.add(HttpConstants.HEADER_IF_MODIFIED_SINCE,imsDate);
    }
    if (!condition.getNoneMatch().isEmpty()) {
      final StringBuilder value=new StringBuilder();
      for (int i=0; i < condition.getNoneMatch().size(); i++) {
        if (i > 0) {
          value.append(", ");
        }
        value.append(condition.getNoneMatch().get(i).format());
      }
      requestHeaders.add(HttpConstants.HEADER_IF_NONE_MATCH,value.toString());
    }
    if (condition.getUnmodifiedSince() != null) {
      final String iusDate=DateUtils.format(condition.getUnmodifiedSince(),DateUtils.FORMAT_RFC_1123.get(0));
      requestHeaders.add(HttpConstants.HEADER_IF_UNMODIFIED_SINCE,iusDate);
    }
    if (request.getCookies().size() > 0) {
      final String cookies=CookieUtils.format(request.getCookies());
      requestHeaders.add(HttpConstants.HEADER_COOKIE,cookies);
    }
    if (request.getReferrerRef() != null) {
      requestHeaders.add(HttpConstants.HEADER_REFERRER,request.getReferrerRef().toString());
    }
    final ClientInfo client=request.getClientInfo();
    if (client.getAcceptedMediaTypes().size() > 0) {
      try {
        requestHeaders.add(HttpConstants.HEADER_ACCEPT,PreferenceUtils.format(client.getAcceptedMediaTypes()));
      }
 catch (      final Exception ioe) {
        System.err.println("Unable to format the HTTP Accept header");
      }
    }
 else {
      requestHeaders.add(HttpConstants.HEADER_ACCEPT,MediaType.ALL.getName());
    }
    if (client.getAcceptedCharacterSets().size() > 0) {
      try {
        requestHeaders.add(HttpConstants.HEADER_ACCEPT_CHARSET,PreferenceUtils.format(client.getAcceptedCharacterSets()));
      }
 catch (      final Exception ioe) {
        System.err.println("Unable to format the HTTP Accept header");
      }
    }
    if (client.getAcceptedEncodings().size() > 0) {
      try {
        requestHeaders.add(HttpConstants.HEADER_ACCEPT_ENCODING,PreferenceUtils.format(client.getAcceptedEncodings()));
      }
 catch (      final Exception ioe) {
        System.err.println("Unable to format the HTTP Accept header");
      }
    }
    if (client.getAcceptedLanguages().size() > 0) {
      try {
        requestHeaders.add(HttpConstants.HEADER_ACCEPT_LANGUAGE,PreferenceUtils.format(client.getAcceptedLanguages()));
      }
 catch (      final Exception ioe) {
        System.err.println("Unable to format the HTTP Accept header");
      }
    }
    if (request.getEntity() != null) {
      if (request.getEntity().getMediaType() != null) {
        String contentType=request.getEntity().getMediaType().toString();
        if ((request.getEntity().getMediaType().getParameters().getFirstValue("charset") == null) && (request.getEntity().getCharacterSet() != null)) {
          contentType=contentType + "; charset=" + request.getEntity().getCharacterSet().getName();
        }
        requestHeaders.add(HttpConstants.HEADER_CONTENT_TYPE,contentType);
      }
      if (!request.getEntity().getEncodings().isEmpty()) {
        final StringBuilder value=new StringBuilder();
        for (int i=0; i < request.getEntity().getEncodings().size(); i++) {
          if (i > 0) {
            value.append(", ");
          }
          value.append(request.getEntity().getEncodings().get(i).getName());
        }
        requestHeaders.add(HttpConstants.HEADER_CONTENT_ENCODING,value.toString());
      }
      if (!request.getEntity().getLanguages().isEmpty()) {
        final StringBuilder value=new StringBuilder();
        for (int i=0; i < request.getEntity().getLanguages().size(); i++) {
          if (i > 0) {
            value.append(", ");
          }
          value.append(request.getEntity().getLanguages().get(i).getName());
        }
        requestHeaders.add(HttpConstants.HEADER_CONTENT_LANGUAGE,value.toString());
      }
      if (request.getEntity().getSize() > 0) {
        requestHeaders.add(HttpConstants.HEADER_CONTENT_LENGTH,String.valueOf(request.getEntity().getSize()));
      }
    }
    final Series<Parameter> additionalHeaders=(Series<Parameter>)request.getAttributes().get(HttpConstants.ATTRIBUTE_HEADERS);
    addAdditionalHeaders(requestHeaders,additionalHeaders);
  }
}
