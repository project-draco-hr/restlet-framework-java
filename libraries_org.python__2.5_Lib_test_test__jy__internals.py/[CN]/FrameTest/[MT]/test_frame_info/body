def test_frame_info(self):
    import sys
    from types import ClassType

    def getinfo():
        ' Returns a tuple consisting of:\n                the name of the current module\n                the name of the current class or None\n                the name of the current function\n                the current line number\n            '
        try:
            (1 / 0)
        except:
            tb = sys.exc_info()[(-1)]
            frame = tb.tb_frame.f_back
            modulename = frame.f_globals['__name__']
            funcname = frame.f_code.co_name
            lineno = frame.f_lineno
            if (len(frame.f_code.co_varnames) == 0):
                classname = None
            else:
                self = frame.f_locals[frame.f_code.co_varnames[0]]
                myclass = self.__class__
                if (type(myclass) == ClassType):
                    classname = myclass.__name__
                else:
                    classname = None
            return (modulename, classname, funcname, lineno)

    def foo():
        x = 99
        g = getinfo()
        assert ((g[0] == '__main__') or (g[0] == 'test.test_jy_internals'))
        self.assertEquals(g[1], None)
        self.assertEquals(g[2], 'foo')


    class Bar:

        def baz(self):
            g = getinfo()
            assert ((g[0] == '__main__') or (g[0] == 'test.test_jy_internals'))
            assert (g[1] == 'Bar')
            assert (g[2] == 'baz')
    g = getinfo()
    assert ((g[0] == '__main__') or (g[0] == 'test.test_jy_internals'))
    self.assertEquals(g[1], None)
    self.assertEquals(g[2], 'test_frame_info')
    foo()
    Bar().baz()
