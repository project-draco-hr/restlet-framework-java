def test_seek(self):
    'Test seek() method of _FileObject, incl. random reading.\n        '
    if (self.sep != '|'):
        filename = '0-REGTYPE-TEXT'
        self.tar.extract(filename, dirname())
        f = open(os.path.join(dirname(), filename), 'rb')
        data = f.read()
        f.close()
        tarinfo = self.tar.getmember(filename)
        fobj = self.tar.extractfile(tarinfo)
        text = fobj.read()
        fobj.seek(0)
        self.assert_((0 == fobj.tell()), "seek() to file's start failed")
        fobj.seek(2048, 0)
        self.assert_((2048 == fobj.tell()), 'seek() to absolute position failed')
        fobj.seek((-1024), 1)
        self.assert_((1024 == fobj.tell()), 'seek() to negative relative position failed')
        fobj.seek(1024, 1)
        self.assert_((2048 == fobj.tell()), 'seek() to positive relative position failed')
        s = fobj.read(10)
        self.assert_((s == data[2048:2058]), 'read() after seek failed')
        fobj.seek(0, 2)
        self.assert_((tarinfo.size == fobj.tell()), "seek() to file's end failed")
        self.assert_((fobj.read() == ''), "read() at file's end did not return empty string")
        fobj.seek((- tarinfo.size), 2)
        self.assert_((0 == fobj.tell()), "relative seek() to file's start failed")
        fobj.seek(512)
        s1 = fobj.readlines()
        fobj.seek(512)
        s2 = fobj.readlines()
        self.assert_((s1 == s2), 'readlines() after seek failed')
        fobj.seek(0)
        self.assert_((len(fobj.readline()) == fobj.tell()), 'tell() after readline() failed')
        fobj.seek(512)
        self.assert_(((len(fobj.readline()) + 512) == fobj.tell()), 'tell() after seek() and readline() failed')
        fobj.seek(0)
        line = fobj.readline()
        self.assert_((fobj.read() == data[len(line):]), 'read() after readline() failed')
        fobj.close()
