{
  Object jaxRsResObj=resourceObject.getJaxRsResourceObject();
  for (  Field contextField : this.injectFieldsContext) {
    Util.inject(jaxRsResObj,contextField,callContext);
  }
  for (  Field clientInfoField : this.injectFieldsClientInfo) {
    ClientInfo clientInfo=callContext.getRequest().getClientInfo();
    Util.inject(jaxRsResObj,clientInfoField,clientInfo);
  }
  for (  Field conditionsField : this.injectFieldsConditions) {
    Conditions conditions=callContext.getRequest().getConditions();
    Util.inject(jaxRsResObj,conditionsField,conditions);
  }
  for (  Field cpf : this.injectFieldsCookieParam) {
    CookieParam headerParam=cpf.getAnnotation(CookieParam.class);
    DefaultValue defaultValue=cpf.getAnnotation(DefaultValue.class);
    Class<?> convTo=cpf.getType();
    Object value=getCookieParamValue(convTo,headerParam,defaultValue,callContext);
    Util.inject(jaxRsResObj,cpf,value);
  }
  for (  Field hpf : this.injectFieldsHeaderParam) {
    HeaderParam headerParam=hpf.getAnnotation(HeaderParam.class);
    DefaultValue defaultValue=hpf.getAnnotation(DefaultValue.class);
    Class<?> convTo=hpf.getType();
    Object value=getHeaderParamValue(convTo,headerParam,defaultValue,callContext);
    Util.inject(jaxRsResObj,hpf,value);
  }
  for (  Field hpf : this.injectFieldsMatrixParam) {
    MatrixParam headerParam=hpf.getAnnotation(MatrixParam.class);
    DefaultValue defaultValue=hpf.getAnnotation(DefaultValue.class);
    Class<?> convTo=hpf.getType();
    Object value=getMatrixParamValue(convTo,headerParam,leaveEncoded,defaultValue,callContext);
    Util.inject(jaxRsResObj,hpf,value);
  }
  for (  Field hpf : this.injectFieldsPathParam) {
    PathParam headerParam=hpf.getAnnotation(PathParam.class);
    DefaultValue defaultValue=hpf.getAnnotation(DefaultValue.class);
    Class<?> convTo=hpf.getType();
    Object value=getPathParamValue(convTo,headerParam,leaveEncoded,defaultValue,callContext);
    Util.inject(jaxRsResObj,hpf,value);
  }
  for (  Field hpf : this.injectFieldsQueryParam) {
    QueryParam headerParam=hpf.getAnnotation(QueryParam.class);
    DefaultValue defaultValue=hpf.getAnnotation(DefaultValue.class);
    Class<?> convTo=hpf.getType();
    Object value=getQueryParamValue(convTo,headerParam,defaultValue,callContext,Logger.getAnonymousLogger());
    Util.inject(jaxRsResObj,hpf,value);
  }
  try {
    Util.invokeNoneArgMethod(jaxRsResObj,this.postConstructMethod);
  }
 catch (  InvocationTargetException e) {
    String message=e.getMessage();
    MethodInvokeException mie=new MethodInvokeException(message);
    mie.setStackTrace(e.getCause().getStackTrace());
    throw mie;
  }
}
