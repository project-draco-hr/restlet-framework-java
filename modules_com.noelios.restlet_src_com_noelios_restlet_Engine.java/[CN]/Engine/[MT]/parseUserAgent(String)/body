{
  List<Product> result=new ArrayList<Product>();
  if (userAgent != null) {
    String token=null;
    String version=null;
    String comment=null;
    char[] tab=userAgent.trim().toCharArray();
    StringBuilder tokenBuilder=new StringBuilder();
    StringBuilder versionBuilder=null;
    StringBuilder commentBuilder=null;
    int index=0;
    boolean insideToken=true;
    boolean insideVersion=false;
    boolean insideComment=false;
    for (index=0; index < tab.length; index++) {
      char c=tab[index];
      if (insideToken) {
        if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || c == ' ') {
          tokenBuilder.append(c);
        }
 else {
          token=tokenBuilder.toString().trim();
          insideToken=false;
          if (c == '/') {
            insideVersion=true;
            versionBuilder=new StringBuilder();
            version=null;
          }
 else           if (c == '(' || c == '{') {
            insideComment=true;
            commentBuilder=new StringBuilder();
            commentBuilder.append(c);
          }
        }
      }
 else {
        if (insideVersion) {
          if (c != ' ') {
            versionBuilder.append(c);
          }
 else {
            insideVersion=false;
            version=versionBuilder.toString();
          }
        }
 else {
          if (c == '(' || c == '{') {
            insideComment=true;
            commentBuilder=new StringBuilder();
            commentBuilder.append(c);
          }
 else {
            if (insideComment) {
              if (c == ')' || c == '}') {
                insideComment=false;
                commentBuilder.append(c);
                comment=commentBuilder.toString();
                result.add(new Product(token,version,comment));
                comment=null;
                insideToken=true;
                tokenBuilder=new StringBuilder();
                token=null;
              }
 else {
                commentBuilder.append(c);
              }
            }
 else {
              result.add(new Product(token,version,comment));
              insideToken=true;
              tokenBuilder=new StringBuilder();
              tokenBuilder.append(c);
              token=null;
            }
          }
        }
      }
    }
    if (insideComment) {
      comment=commentBuilder.toString();
      result.add(new Product(token,version,comment));
    }
 else {
      if (insideVersion) {
        version=versionBuilder.toString();
        result.add(new Product(token,version,null));
      }
 else {
        if (insideToken && tokenBuilder.length() > 0) {
          token=tokenBuilder.toString();
          result.add(new Product(token,null,null));
        }
      }
    }
  }
  return result;
}
