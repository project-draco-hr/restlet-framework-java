{
  try {
    URI smtpURI=new URI(call.getResourceRef().toString());
    String smtpHost=smtpURI.getHost();
    int smtpPort=smtpURI.getPort();
    if (smtpPort == -1) {
      smtpPort=25;
    }
    if ((smtpHost == null) || (smtpHost.equals(""))) {
      throw new IllegalArgumentException("Invalid SMTP host specified");
    }
    DocumentBuilder docBuilder=DocumentBuilderFactory.newInstance().newDocumentBuilder();
    Document email=docBuilder.parse(call.getInput().getStream());
    Element root=(Element)email.getElementsByTagName("email").item(0);
    Element header=(Element)root.getElementsByTagName("head").item(0);
    String subject=header.getElementsByTagName("subject").item(0).getTextContent();
    String from=header.getElementsByTagName("from").item(0).getTextContent();
    NodeList toList=header.getElementsByTagName("to");
    String[] to=new String[toList.getLength()];
    for (int i=0; i < toList.getLength(); i++) {
      to[i]=toList.item(i).getTextContent();
    }
    NodeList ccList=header.getElementsByTagName("cc");
    String[] cc=new String[ccList.getLength()];
    for (int i=0; i < ccList.getLength(); i++) {
      cc[i]=ccList.item(i).getTextContent();
    }
    NodeList bccList=header.getElementsByTagName("bcc");
    String[] bcc=new String[bccList.getLength()];
    for (int i=0; i < bccList.getLength(); i++) {
      bcc[i]=bccList.item(i).getTextContent();
    }
    String text=root.getElementsByTagName("body").item(0).getTextContent();
    Properties props=System.getProperties();
    props.put("mail.smtp.host",smtpHost);
    props.put("mail.smtp.port",Integer.toString(smtpPort));
    props.put("mail.smtp.auth","false");
    Session session=Session.getDefaultInstance(props);
    Transport transport=session.getTransport("smtp");
    transport.connect();
    if (transport.isConnected()) {
      Message msg=new MimeMessage(session);
      msg.setFrom(new InternetAddress(from));
      for (int i=0; i < to.length; i++) {
        msg.addRecipient(Message.RecipientType.TO,new InternetAddress(to[i]));
      }
      for (int i=0; i < cc.length; i++) {
        msg.addRecipient(Message.RecipientType.CC,new InternetAddress(cc[i]));
      }
      for (int i=0; i < bcc.length; i++) {
        msg.addRecipient(Message.RecipientType.BCC,new InternetAddress(bcc[i]));
      }
      msg.setSubject(subject);
      msg.setText(text);
      Parameter customHeader;
      for (Iterator<Parameter> iter=call.getConnectorCall().getRequestHeaders().iterator(); iter.hasNext(); ) {
        customHeader=iter.next();
        msg.addHeader(customHeader.getName(),customHeader.getValue());
      }
      msg.setSentDate(new Date());
      msg.saveChanges();
      transport.sendMessage(msg,msg.getAllRecipients());
      transport.close();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
