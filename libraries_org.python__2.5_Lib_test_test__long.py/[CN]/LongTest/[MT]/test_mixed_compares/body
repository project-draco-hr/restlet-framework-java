def test_mixed_compares(self):
    eq = self.assertEqual
    import math
    import sys


    class Rat:

        def __init__(self, value):
            if isinstance(value, (int, long)):
                self.n = value
                self.d = 1
            elif isinstance(value, float):
                (f, e) = math.frexp(abs(value))
                assert ((f == 0) or (0.5 <= f < 1.0))
                CHUNK = 28
                top = 0
                while f:
                    f = math.ldexp(f, CHUNK)
                    digit = int(f)
                    assert ((digit >> CHUNK) == 0)
                    top = ((top << CHUNK) | digit)
                    f -= digit
                    assert (0.0 <= f < 1.0)
                    e -= CHUNK
                if (e >= 0):
                    n = (top << e)
                    d = 1
                else:
                    n = top
                    d = (1 << (- e))
                if (value < 0):
                    n = (- n)
                self.n = n
                self.d = d
                assert ((float(n) / float(d)) == value)
            else:
                raise TypeError(("can't deal with %r" % val))

        def __cmp__(self, other):
            if (not isinstance(other, Rat)):
                other = Rat(other)
            return cmp((self.n * other.d), (self.d * other.n))
    cases = [0, 0.001, 0.99, 1.0, 1.5, 1e+20, 1e+200]
    for t in ((2.0 ** 48), (2.0 ** 50), (2.0 ** 53)):
        cases.extend([(t - 1.0), (t - 0.3), t, (t + 0.3), (t + 1.0), long((t - 1)), long(t), long((t + 1))])
    cases.extend([0, 1, 2, sys.maxint, float(sys.maxint)])
    t = long(1e+200)
    cases.extend([0L, 1L, 2L, (1L << 20000), (t - 1), t, (t + 1)])
    cases.extend([(- x) for x in cases])
    for x in cases:
        Rx = Rat(x)
        for y in cases:
            Ry = Rat(y)
            Rcmp = cmp(Rx, Ry)
            xycmp = cmp(x, y)
            eq(Rcmp, xycmp, Frm('%r %r %d %d', x, y, Rcmp, xycmp))
            eq((x == y), (Rcmp == 0), Frm('%r == %r %d', x, y, Rcmp))
            eq((x != y), (Rcmp != 0), Frm('%r != %r %d', x, y, Rcmp))
            eq((x < y), (Rcmp < 0), Frm('%r < %r %d', x, y, Rcmp))
            eq((x <= y), (Rcmp <= 0), Frm('%r <= %r %d', x, y, Rcmp))
            eq((x > y), (Rcmp > 0), Frm('%r > %r %d', x, y, Rcmp))
            eq((x >= y), (Rcmp >= 0), Frm('%r >= %r %d', x, y, Rcmp))
