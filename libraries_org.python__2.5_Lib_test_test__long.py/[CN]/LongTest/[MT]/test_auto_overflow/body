def test_auto_overflow(self):
    import math, sys
    special = [0, 1, 2, 3, (sys.maxint - 1), sys.maxint, (sys.maxint + 1)]
    sqrt = int(math.sqrt(sys.maxint))
    special.extend([(sqrt - 1), sqrt, (sqrt + 1)])
    special.extend([(- i) for i in special])

    def checkit(*args):
        self.assertEqual(got, expected, Frm('for %r expected %r got %r', args, expected, got))
    for x in special:
        longx = long(x)
        expected = (- longx)
        got = (- x)
        checkit('-', x)
        for y in special:
            longy = long(y)
            expected = (longx + longy)
            got = (x + y)
            checkit(x, '+', y)
            expected = (longx - longy)
            got = (x - y)
            checkit(x, '-', y)
            expected = (longx * longy)
            got = (x * y)
            checkit(x, '*', y)
            if y:
                expected = (longx / longy)
                got = (x / y)
                checkit(x, '/', y)
                expected = (longx // longy)
                got = (x // y)
                checkit(x, '//', y)
                expected = divmod(longx, longy)
                got = divmod(longx, longy)
                checkit(x, 'divmod', y)
            if ((abs(y) < 5) and (not ((x == 0) and (y < 0)))):
                expected = (longx ** longy)
                got = (x ** y)
                checkit(x, '**', y)
                for z in special:
                    if (z != 0):
                        if (y >= 0):
                            expected = pow(longx, longy, long(z))
                            got = pow(x, y, z)
                            checkit('pow', x, y, '%', z)
                        else:
                            self.assertRaises(TypeError, pow, longx, longy, long(z))
