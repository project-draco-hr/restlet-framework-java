def check_bitop_identities_1(self, x):
    eq = self.assertEqual
    eq((x & 0), 0, Frm('x & 0 != 0 for x=%r', x))
    eq((x | 0), x, Frm('x | 0 != x for x=%r', x))
    eq((x ^ 0), x, Frm('x ^ 0 != x for x=%r', x))
    eq((x & (-1)), x, Frm('x & -1 != x for x=%r', x))
    eq((x | (-1)), (-1), Frm('x | -1 != -1 for x=%r', x))
    eq((x ^ (-1)), (~ x), Frm('x ^ -1 != ~x for x=%r', x))
    eq(x, (~ (~ x)), Frm('x != ~~x for x=%r', x))
    eq((x & x), x, Frm('x & x != x for x=%r', x))
    eq((x | x), x, Frm('x | x != x for x=%r', x))
    eq((x ^ x), 0, Frm('x ^ x != 0 for x=%r', x))
    eq((x & (~ x)), 0, Frm('x & ~x != 0 for x=%r', x))
    eq((x | (~ x)), (-1), Frm('x | ~x != -1 for x=%r', x))
    eq((x ^ (~ x)), (-1), Frm('x ^ ~x != -1 for x=%r', x))
    eq((- x), (1 + (~ x)), Frm('not -x == 1 + ~x for x=%r', x))
    eq((- x), (~ (x - 1)), Frm('not -x == ~(x-1) forx =%r', x))
    for n in xrange((2 * SHIFT)):
        p2 = (2L ** n)
        eq(((x << n) >> n), x, Frm('x << n >> n != x for x=%r, n=%r', (x, n)))
        eq((x // p2), (x >> n), Frm('x // p2 != x >> n for x=%r n=%r p2=%r', (x, n, p2)))
        eq((x * p2), (x << n), Frm('x * p2 != x << n for x=%r n=%r p2=%r', (x, n, p2)))
        eq((x & (- p2)), ((x >> n) << n), Frm('not x & -p2 == x >> n << n for x=%r n=%r p2=%r', (x, n, p2)))
        eq((x & (- p2)), (x & (~ (p2 - 1))), Frm('not x & -p2 == x & ~(p2 - 1) for x=%r n=%r p2=%r', (x, n, p2)))
