{
  PreparedStatement stmt=null;
  ResultSet rset=null;
  if (request.getMethod().equals(Method.GET) || request.getMethod().equals(Method.HEAD)) {
    final String basePath=request.getResourceRef().getPath();
    final String xdbResPath;
    if (request.getProtocol().equals(Protocol.FILE)) {
      xdbResPath=(basePath.startsWith(HOME_DIR)) ? USER_DIR + this.connectedUser + basePath.substring(HOME_DIR.length()) : basePath;
    }
 else {
      xdbResPath=USER_DIR + this.connectedUser + DEPLOY_DIR+ this.config.getServletName()+ basePath;
    }
    final int lastSlashIndex=basePath.lastIndexOf('/');
    String entry=(lastSlashIndex == -1) ? basePath : basePath.substring(lastSlashIndex + 1);
    Representation output=null;
    if (basePath.endsWith("/")) {
      try {
        stmt=this.conn.prepareStatement("SELECT path(1),extractValue(res,'/Resource/@Container') " + "FROM resource_view WHERE under_path(res,1,?,1 ) = 1");
        getLogger().info("looking resources at: " + xdbResPath);
        stmt.setString(1,xdbResPath);
        rset=stmt.executeQuery();
        if (rset.next()) {
          final ReferenceList rl=new ReferenceList();
          rl.setIdentifier(request.getResourceRef());
          while (rset.next()) {
            entry=rset.getString(1) + (("true".equalsIgnoreCase(rset.getString(2))) ? "/" : "");
            getLogger().info("Reference: " + basePath + entry);
            rl.add(new Reference(basePath + entry));
          }
          output=rl.getTextRepresentation();
        }
      }
 catch (      SQLException sqe) {
        getLogger().throwing("XdbServletWarClientHelper","handleWar",sqe);
        throw new RuntimeException("Exception querying resource_view - xdbResPath: " + xdbResPath,sqe);
      }
 finally {
        XdbServerServlet.closeDbResources(stmt,rset);
      }
      response.setEntity(output);
      response.setStatus(Status.SUCCESS_OK);
    }
 else {
      try {
        InputStream is=null;
        stmt=this.conn.prepareStatement("select xdburitype(?).getBlob()," + "xdburitype(?).getContentType() " + "from dual");
        stmt.setString(1,xdbResPath);
        stmt.setString(2,xdbResPath);
        getLogger().info("looking resources at: " + xdbResPath);
        rset=stmt.executeQuery();
        if (rset.next()) {
          final Blob blob=(Blob)rset.getObject(1);
          final String mediaType=rset.getString(2);
          is=blob.getBinaryStream();
          final MetadataService metadataService=getMetadataService(request);
          output=new InputRepresentation(is,metadataService.getDefaultMediaType());
          output.setIdentifier(request.getResourceRef());
          updateMetadata(metadataService,entry,output);
          if (mediaType != null) {
            getLogger().info("mediaType: " + mediaType);
            output.setMediaType(new MediaType(mediaType));
          }
        }
        response.setEntity(output);
        response.setStatus(Status.SUCCESS_OK);
      }
 catch (      SQLException sqe) {
        if (sqe.getErrorCode() == 31001) {
          response.setStatus(Status.CLIENT_ERROR_NOT_FOUND);
        }
 else {
          getLogger().throwing("XdbServletWarClientHelper","handleWar: ",sqe);
          throw new RuntimeException("Exception querying xdburitype(?).getBlob() - xdbResPath: " + xdbResPath,sqe);
        }
      }
 finally {
        XdbServerServlet.closeDbResources(stmt,rset);
      }
    }
  }
 else {
    response.setStatus(Status.CLIENT_ERROR_METHOD_NOT_ALLOWED);
    response.getAllowedMethods().add(Method.GET);
    response.getAllowedMethods().add(Method.HEAD);
  }
}
