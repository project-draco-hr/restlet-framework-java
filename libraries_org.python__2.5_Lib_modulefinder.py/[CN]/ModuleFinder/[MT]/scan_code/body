def scan_code(self, co, m):
    code = co.co_code
    n = len(code)
    i = 0
    fromlist = None
    while (i < n):
        c = code[i]
        i = (i + 1)
        op = ord(c)
        if (op >= dis.HAVE_ARGUMENT):
            oparg = (ord(code[i]) + (ord(code[(i + 1)]) * 256))
            i = (i + 2)
        if (op == LOAD_CONST):
            fromlist = co.co_consts[oparg]
        elif (op == IMPORT_NAME):
            assert ((fromlist is None) or (type(fromlist) is tuple))
            name = co.co_names[oparg]
            have_star = 0
            if (fromlist is not None):
                if ('*' in fromlist):
                    have_star = 1
                fromlist = [f for f in fromlist if (f != '*')]
            self._safe_import_hook(name, m, fromlist)
            if have_star:
                mm = None
                if m.__path__:
                    mm = self.modules.get(((m.__name__ + '.') + name))
                if (mm is None):
                    mm = self.modules.get(name)
                if (mm is not None):
                    m.globalnames.update(mm.globalnames)
                    m.starimports.update(mm.starimports)
                    if (mm.__code__ is None):
                        m.starimports[name] = 1
                else:
                    m.starimports[name] = 1
        elif (op in STORE_OPS):
            name = co.co_names[oparg]
            m.globalnames[name] = 1
    for c in co.co_consts:
        if isinstance(c, type(co)):
            self.scan_code(c, m)
