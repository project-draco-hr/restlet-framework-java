{
  int numThreads=10;
  int numCalls=50;
  int totCalls=(numThreads * numCalls);
  List<Callable<Boolean>> calls=new ArrayList<Callable<Boolean>>(totCalls);
  ExecutorService es=Executors.newFixedThreadPool(numThreads);
  Client c=this.createClient();
  Random r=new Random();
  for (int i=0; i < totCalls; i++) {
    calls.add(new OAuthRequest(c,r.nextInt(5) + 1));
  }
  long l=System.currentTimeMillis();
  es.invokeAll(calls);
  es.shutdown();
  es.awaitTermination(30,TimeUnit.SECONDS);
  long tot=System.currentTimeMillis() - l;
  if (!es.isTerminated()) {
    Logger.getAnonymousLogger().warning("All calls threads did not execute within 30 seconds");
    es.shutdownNow();
  }
  Assert.assertEquals(totCalls,SingletonStore.I().getCallbacks());
  Assert.assertEquals(0,SingletonStore.I().getErrors());
  int totReq=totCalls * 2;
  double avg=(double)tot / (double)totReq;
  Logger.getAnonymousLogger().warning("Executed " + totReq + " in "+ tot+ " millis ("+ avg+ " average/request)");
}
