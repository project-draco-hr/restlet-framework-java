def DocTestSuite(module=None, globs=None, extraglobs=None, test_finder=None, **options):
    '\n    Convert doctest tests for a module to a unittest test suite.\n\n    This converts each documentation string in a module that\n    contains doctest tests to a unittest test case.  If any of the\n    tests in a doc string fail, then the test case fails.  An exception\n    is raised showing the name of the file containing the test and a\n    (sometimes approximate) line number.\n\n    The `module` argument provides the module to be tested.  The argument\n    can be either a module or a module name.\n\n    If no argument is given, the calling module is used.\n\n    A number of options may be provided as keyword arguments:\n\n    setUp\n      A set-up function.  This is called before running the\n      tests in each file. The setUp function will be passed a DocTest\n      object.  The setUp function can access the test globals as the\n      globs attribute of the test passed.\n\n    tearDown\n      A tear-down function.  This is called after running the\n      tests in each file.  The tearDown function will be passed a DocTest\n      object.  The tearDown function can access the test globals as the\n      globs attribute of the test passed.\n\n    globs\n      A dictionary containing initial global variables for the tests.\n\n    optionflags\n       A set of doctest option flags expressed as an integer.\n    '
    if (test_finder is None):
        test_finder = DocTestFinder()
    module = _normalize_module(module)
    tests = test_finder.find(module, globs=globs, extraglobs=extraglobs)
    if (globs is None):
        globs = module.__dict__
    if (not tests):
        raise ValueError(module, 'has no tests')
    tests.sort()
    suite = unittest.TestSuite()
    for test in tests:
        if (len(test.examples) == 0):
            continue
        if (not test.filename):
            filename = module.__file__
            if (filename[(-4):] in ('.pyc', '.pyo')):
                filename = filename[:(-1)]
            elif filename.endswith('$py.class'):
                filename = ('%s.py' % filename[:(-9)])
            test.filename = filename
        suite.addTest(DocTestCase(test, **options))
    return suite
