def __run(self, test, compileflags, out):
    '\n        Run the examples in `test`.  Write the outcome of each example\n        with one of the `DocTestRunner.report_*` methods, using the\n        writer function `out`.  `compileflags` is the set of compiler\n        flags that should be used to execute examples.  Return a tuple\n        `(f, t)`, where `t` is the number of examples tried, and `f`\n        is the number of examples that failed.  The examples are run\n        in the namespace `test.globs`.\n        '
    failures = tries = 0
    original_optionflags = self.optionflags
    (SUCCESS, FAILURE, BOOM) = range(3)
    check = self._checker.check_output
    for (examplenum, example) in enumerate(test.examples):
        quiet = ((self.optionflags & REPORT_ONLY_FIRST_FAILURE) and (failures > 0))
        self.optionflags = original_optionflags
        if example.options:
            for (optionflag, val) in example.options.items():
                if val:
                    self.optionflags |= optionflag
                else:
                    self.optionflags &= (~ optionflag)
        if (self.optionflags & SKIP):
            continue
        tries += 1
        if (not quiet):
            self.report_start(out, test, example)
        filename = ('<doctest %s[%d]>' % (test.name, examplenum))
        try:
            exec compile(example.source, filename, 'single', compileflags, 1) in test.globs
            self.debugger.set_continue()
            exception = None
        except KeyboardInterrupt:
            raise
        except:
            exception = sys.exc_info()
            self.debugger.set_continue()
        got = self._fakeout.getvalue()
        self._fakeout.truncate(0)
        outcome = FAILURE
        if (exception is None):
            if check(example.want, got, self.optionflags):
                outcome = SUCCESS
        else:
            exc_info = sys.exc_info()
            exc_msg = traceback.format_exception_only(*exc_info[:2])[(-1)]
            if (not quiet):
                got += _exception_traceback(exc_info)
            if (example.exc_msg is None):
                outcome = BOOM
            elif check(example.exc_msg, exc_msg, self.optionflags):
                outcome = SUCCESS
            elif (self.optionflags & IGNORE_EXCEPTION_DETAIL):
                m1 = re.match('[^:]*:', example.exc_msg)
                m2 = re.match('[^:]*:', exc_msg)
                if (m1 and m2 and check(m1.group(0), m2.group(0), self.optionflags)):
                    outcome = SUCCESS
        if (outcome is SUCCESS):
            if (not quiet):
                self.report_success(out, test, example, got)
        elif (outcome is FAILURE):
            if (not quiet):
                self.report_failure(out, test, example, got)
            failures += 1
        elif (outcome is BOOM):
            if (not quiet):
                self.report_unexpected_exception(out, test, example, exc_info)
            failures += 1
        else:
            assert False, ('unknown outcome', outcome)
    self.optionflags = original_optionflags
    self.__record_outcome(test, failures, tries)
    return (failures, tries)
