def link(self, target_desc, objects, output_filename, output_dir=None, libraries=None, library_dirs=None, runtime_library_dirs=None, export_symbols=None, debug=0, extra_preargs=None, extra_postargs=None, build_temp=None, target_lang=None):
    'Link a bunch of stuff together to create an executable or\n        shared library file.\n\n        The "bunch of stuff" consists of the list of object files supplied\n        as \'objects\'.  \'output_filename\' should be a filename.  If\n        \'output_dir\' is supplied, \'output_filename\' is relative to it\n        (i.e. \'output_filename\' can provide directory components if\n        needed).\n\n        \'libraries\' is a list of libraries to link against.  These are\n        library names, not filenames, since they\'re translated into\n        filenames in a platform-specific way (eg. "foo" becomes "libfoo.a"\n        on Unix and "foo.lib" on DOS/Windows).  However, they can include a\n        directory component, which means the linker will look in that\n        specific directory rather than searching all the normal locations.\n\n        \'library_dirs\', if supplied, should be a list of directories to\n        search for libraries that were specified as bare library names\n        (ie. no directory component).  These are on top of the system\n        default and those supplied to \'add_library_dir()\' and/or\n        \'set_library_dirs()\'.  \'runtime_library_dirs\' is a list of\n        directories that will be embedded into the shared library and used\n        to search for other shared libraries that *it* depends on at\n        run-time.  (This may only be relevant on Unix.)\n\n        \'export_symbols\' is a list of symbols that the shared library will\n        export.  (This appears to be relevant only on Windows.)\n\n        \'debug\' is as for \'compile()\' and \'create_static_lib()\', with the\n        slight distinction that it actually matters on most platforms (as\n        opposed to \'create_static_lib()\', which includes a \'debug\' flag\n        mostly for form\'s sake).\n\n        \'extra_preargs\' and \'extra_postargs\' are as for \'compile()\' (except\n        of course that they supply command-line arguments for the\n        particular linker being used).\n\n        \'target_lang\' is the target language for which the given objects\n        are being compiled. This allows specific linkage time treatment of\n        certain languages.\n\n        Raises LinkError on failure.\n        '
    raise NotImplementedError
