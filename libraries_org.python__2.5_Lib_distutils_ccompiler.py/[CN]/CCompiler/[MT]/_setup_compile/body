def _setup_compile(self, outdir, macros, incdirs, sources, depends, extra):
    'Process arguments and decide which source files to compile.\n\n        Merges _fix_compile_args() and _prep_compile().\n        '
    if (outdir is None):
        outdir = self.output_dir
    elif (type(outdir) is not StringType):
        raise TypeError, "'output_dir' must be a string or None"
    if (macros is None):
        macros = self.macros
    elif (type(macros) is ListType):
        macros = (macros + (self.macros or []))
    else:
        raise TypeError, "'macros' (if supplied) must be a list of tuples"
    if (incdirs is None):
        incdirs = self.include_dirs
    elif (type(incdirs) in (ListType, TupleType)):
        incdirs = (list(incdirs) + (self.include_dirs or []))
    else:
        raise TypeError, "'include_dirs' (if supplied) must be a list of strings"
    if (extra is None):
        extra = []
    objects = self.object_filenames(sources, strip_dir=0, output_dir=outdir)
    assert (len(objects) == len(sources))
    if self.force:
        skip_source = {}
        for source in sources:
            skip_source[source] = 0
    elif (depends is None):
        skip_source = {}
        for source in sources:
            skip_source[source] = 1
        (n_sources, n_objects) = newer_pairwise(sources, objects)
        for source in n_sources:
            skip_source[source] = 0
    else:
        skip_source = {}
        L = (depends[:] + [None])
        for i in range(len(objects)):
            source = sources[i]
            L[(-1)] = source
            if newer_group(L, objects[i]):
                skip_source[source] = 0
            else:
                skip_source[source] = 1
    pp_opts = gen_preprocess_options(macros, incdirs)
    build = {}
    for i in range(len(sources)):
        src = sources[i]
        obj = objects[i]
        ext = os.path.splitext(src)[1]
        self.mkpath(os.path.dirname(obj))
        if skip_source[src]:
            log.debug('skipping %s (%s up-to-date)', src, obj)
        else:
            build[obj] = (src, ext)
    return (macros, objects, extra, pp_opts, build)
