def parse_template(source, pattern):
    s = Tokenizer(source)
    p = []
    a = p.append

    def literal(literal, p=p):
        if (p and (p[(-1)][0] is LITERAL)):
            p[(-1)] = (LITERAL, (p[(-1)][1] + literal))
        else:
            p.append((LITERAL, literal))
    sep = source[:0]
    if (type(sep) is type('')):
        makechar = chr
    else:
        makechar = unichr
    while 1:
        this = s.get()
        if (this is None):
            break
        if (this and (this[0] == '\\')):
            if (this == '\\g'):
                name = ''
                if s.match('<'):
                    while 1:
                        char = s.get()
                        if (char is None):
                            raise error, 'unterminated group name'
                        if (char == '>'):
                            break
                        name = (name + char)
                if (not name):
                    raise error, 'bad group name'
                try:
                    index = atoi(name)
                except ValueError:
                    if (not isname(name)):
                        raise error, 'bad character in group name'
                    try:
                        index = pattern.groupindex[name]
                    except KeyError:
                        raise IndexError, 'unknown group name'
                a((MARK, index))
            elif ((len(this) > 1) and (this[1] in DIGITS)):
                code = None
                while 1:
                    group = _group(this, (pattern.groups + 1))
                    if group:
                        if ((s.next not in DIGITS) or (not _group((this + s.next), (pattern.groups + 1)))):
                            code = (MARK, group)
                            break
                    elif (s.next in OCTDIGITS):
                        this = (this + s.get())
                    else:
                        break
                if (not code):
                    this = this[1:]
                    code = (LITERAL, makechar((atoi(this[(-6):], 8) & 255)))
                if (code[0] is LITERAL):
                    literal(code[1])
                else:
                    a(code)
            else:
                try:
                    this = makechar(ESCAPES[this][1])
                except KeyError:
                    pass
                literal(this)
        else:
            literal(this)
    i = 0
    groups = []
    literals = []
    for (c, s) in p:
        if (c is MARK):
            groups.append((i, s))
            literals.append(None)
        else:
            literals.append(s)
        i = (i + 1)
    return (groups, literals)
