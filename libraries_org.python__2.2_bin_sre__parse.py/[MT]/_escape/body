def _escape(source, escape, state):
    code = CATEGORIES.get(escape)
    if code:
        return code
    code = ESCAPES.get(escape)
    if code:
        return code
    try:
        if (escape[1:2] == 'x'):
            while ((source.next in HEXDIGITS) and (len(escape) < 4)):
                escape = (escape + source.get())
            if (len(escape) != 4):
                raise ValueError
            return (LITERAL, (atoi(escape[2:], 16) & 255))
        elif (escape[1:2] == '0'):
            while ((source.next in OCTDIGITS) and (len(escape) < 4)):
                escape = (escape + source.get())
            return (LITERAL, (atoi(escape[1:], 8) & 255))
        elif (escape[1:2] in DIGITS):
            here = source.tell()
            if (source.next in DIGITS):
                escape = (escape + source.get())
                if ((escape[1] in OCTDIGITS) and (escape[2] in OCTDIGITS) and (source.next in OCTDIGITS)):
                    escape = (escape + source.get())
                    return (LITERAL, (atoi(escape[1:], 8) & 255))
            group = _group(escape, state.groups)
            if group:
                if (not state.checkgroup(group)):
                    raise error, 'cannot refer to open group'
                return (GROUPREF, group)
            raise ValueError
        if (len(escape) == 2):
            return (LITERAL, ord(escape[1]))
    except ValueError:
        pass
    raise error, ('bogus escape: %s' % repr(escape))
