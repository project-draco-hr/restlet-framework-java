{
  Series<Parameter> credentials=cr.getParameters();
  String username=credentials.getFirstValue("username");
  String nonce=credentials.getFirstValue("nonce");
  String response=credentials.getFirstValue("response");
  String uri=credentials.getFirstValue("uri");
  String qop=credentials.getFirstValue("qop");
  String nc=credentials.getFirstValue("nc");
  String cnonce=credentials.getFirstValue("cnonce");
  try {
    if (!isNonceValid(nonce,guard.getServerKey(),guard.getNonceLifespan())) {
      return Guard.AUTHENTICATION_STALE;
    }
  }
 catch (  CredentialException ce) {
    return Guard.AUTHENTICATION_INVALID;
  }
  if (!AuthenticationUtils.anyNull(username,nonce,response,uri)) {
    Reference resourceRef=request.getResourceRef();
    String requestUri=resourceRef.getPath();
    if (resourceRef.getQuery() != null && uri.indexOf('?') > -1) {
      requestUri+="?" + resourceRef.getQuery();
    }
    if (uri.equals(requestUri)) {
      String a1=getHashedSecret(username,guard);
      String a2=Engine.getInstance().toMd5(request.getMethod() + ":" + requestUri);
      StringBuffer expectedResponse=new StringBuffer(a1).append(':').append(nonce);
      if (!AuthenticationUtils.anyNull(qop,cnonce,nc)) {
        expectedResponse.append(':').append(nc).append(':').append(cnonce).append(':').append(qop);
      }
      expectedResponse.append(':').append(a2);
      if (response.equals(Engine.getInstance().toMd5(expectedResponse.toString()))) {
        return Guard.AUTHENTICATION_VALID;
      }
    }
    return Guard.AUTHENTICATION_INVALID;
  }
  return Guard.AUTHENTICATION_MISSING;
}
