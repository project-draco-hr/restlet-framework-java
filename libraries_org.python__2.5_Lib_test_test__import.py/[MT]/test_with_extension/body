def test_with_extension(ext):
    source = (TESTFN + ext)
    pyo = ((TESTFN + os.extsep) + 'pyo')
    if sys.platform.startswith('java'):
        pyc = (TESTFN + '$py.class')
    else:
        pyc = ((TESTFN + os.extsep) + 'pyc')
    f = open(source, 'w')
    print  >> f, "# This tests Python's ability to import a", ext, 'file.'
    a = random.randrange(1000)
    b = random.randrange(1000)
    print  >> f, 'a =', a
    print  >> f, 'b =', b
    f.close()
    try:
        try:
            mod = __import__(TESTFN)
        except ImportError as err:
            raise ValueError(('import from %s failed: %s' % (ext, err)))
        if ((mod.a != a) or (mod.b != b)):
            print a, '!=', mod.a
            print b, '!=', mod.b
            raise ValueError(('module loaded (%s) but contents invalid' % mod))
    finally:
        os.unlink(source)
    try:
        try:
            reload(mod)
        except ImportError as err:
            raise ValueError(('import from .pyc/.pyo failed: %s' % err))
    finally:
        try:
            os.unlink(pyc)
        except os.error:
            pass
        try:
            os.unlink(pyo)
        except os.error:
            pass
        del sys.modules[TESTFN]
