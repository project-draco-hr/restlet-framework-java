def bigmemtest(minsize, memuse, overhead=(5 * _1M)):
    "Decorator for bigmem tests.\n\n    'minsize' is the minimum useful size for the test (in arbitrary,\n    test-interpreted units.) 'memuse' is the number of 'bytes per size' for\n    the test, or a good estimate of it. 'overhead' specifies fixed overhead,\n    independant of the testsize, and defaults to 5Mb.\n\n    The decorator tries to guess a good value for 'size' and passes it to\n    the decorated test function. If minsize * memuse is more than the\n    allowed memory use (as defined by max_memuse), the test is skipped.\n    Otherwise, minsize is adjusted upward to use up to max_memuse.\n    "

    def decorator(f):

        def wrapper(self):
            if (not max_memuse):
                maxsize = 5147
                self.failIf((((maxsize * memuse) + overhead) > (20 * _1M)))
            else:
                maxsize = int(((max_memuse - overhead) / memuse))
                if (maxsize < minsize):
                    if verbose:
                        sys.stderr.write(('Skipping %s because of memory constraint\n' % (f.__name__,)))
                    return
                maxsize = max((maxsize - (50 * _1M)), minsize)
            return f(self, maxsize)
        wrapper.minsize = minsize
        wrapper.memuse = memuse
        wrapper.overhead = overhead
        return wrapper
    return decorator
