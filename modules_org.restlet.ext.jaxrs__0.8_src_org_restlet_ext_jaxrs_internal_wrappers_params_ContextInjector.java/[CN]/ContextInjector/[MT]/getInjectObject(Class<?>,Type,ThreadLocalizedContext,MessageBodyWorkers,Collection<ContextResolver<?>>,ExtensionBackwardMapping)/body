{
  if (declaringClass.equals(MessageBodyWorkers.class))   return mbWorkers;
  if (declaringClass.equals(ContextResolver.class))   return getContextResolver(genericType,allCtxResolvers);
  if (declaringClass.equals(ExtensionBackwardMapping.class))   return extensionBackwardMapping;
  if (declaringClass.equals(PathSegment.class)) {
    String msg="The use of PathSegment annotated with @Context is not standard.";
    logger.config(msg);
    return new GetLastPathSegment(tlContext);
  }
  if (declaringClass.equals(SecurityContext.class) || declaringClass.equals(HttpHeaders.class) || declaringClass.equals(Request.class))   return tlContext;
  if (declaringClass.equals(UriInfo.class))   throw new ImplementationException("You must not call the method ContextInjector.getInjectObject(.......) with class UriInfo");
  throw new IllegalTypeException(declaringClass + " must not be annotated with @Context");
}
