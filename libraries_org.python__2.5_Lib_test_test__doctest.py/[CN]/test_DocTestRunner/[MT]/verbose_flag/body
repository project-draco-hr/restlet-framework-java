def verbose_flag():
    "\nThe `verbose` flag makes the test runner generate more detailed\noutput:\n\n    >>> def f(x):\n    ...     '''\n    ...     >>> x = 12\n    ...     >>> print x\n    ...     12\n    ...     >>> x//2\n    ...     6\n    ...     '''\n    >>> test = doctest.DocTestFinder().find(f)[0]\n\n    >>> doctest.DocTestRunner(verbose=True).run(test)\n    Trying:\n        x = 12\n    Expecting nothing\n    ok\n    Trying:\n        print x\n    Expecting:\n        12\n    ok\n    Trying:\n        x//2\n    Expecting:\n        6\n    ok\n    (0, 3)\n\nIf the `verbose` flag is unspecified, then the output will be verbose\niff `-v` appears in sys.argv:\n\n    >>> # Save the real sys.argv list.\n    >>> old_argv = sys.argv\n\n    >>> # If -v does not appear in sys.argv, then output isn't verbose.\n    >>> sys.argv = ['test']\n    >>> doctest.DocTestRunner().run(test)\n    (0, 3)\n\n    >>> # If -v does appear in sys.argv, then output is verbose.\n    >>> sys.argv = ['test', '-v']\n    >>> doctest.DocTestRunner().run(test)\n    Trying:\n        x = 12\n    Expecting nothing\n    ok\n    Trying:\n        print x\n    Expecting:\n        12\n    ok\n    Trying:\n        x//2\n    Expecting:\n        6\n    ok\n    (0, 3)\n\n    >>> # Restore sys.argv\n    >>> sys.argv = old_argv\n\nIn the remaining examples, the test runner's verbosity will be\nexplicitly set, to ensure that the test behavior is consistent.\n    "
