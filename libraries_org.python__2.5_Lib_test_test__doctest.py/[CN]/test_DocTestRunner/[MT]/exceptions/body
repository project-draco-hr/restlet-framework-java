def exceptions():
    "\nTests of `DocTestRunner`'s exception handling.\n\nAn expected exception is specified with a traceback message.  The\nlines between the first line and the type/value may be omitted or\nreplaced with any other string:\n\n    >>> def f(x):\n    ...     '''\n    ...     >>> x = 12\n    ...     >>> print x//0\n    ...     Traceback (most recent call last):\n    ...     ZeroDivisionError: integer division or modulo by zero\n    ...     '''\n    >>> test = doctest.DocTestFinder().find(f)[0]\n    >>> doctest.DocTestRunner(verbose=False).run(test)\n    (0, 2)\n\nAn example may not generate output before it raises an exception; if\nit does, then the traceback message will not be recognized as\nsignaling an expected exception, so the example will be reported as an\nunexpected exception:\n\n    >>> def f(x):\n    ...     '''\n    ...     >>> x = 12\n    ...     >>> print 'pre-exception output', x//0\n    ...     pre-exception output\n    ...     Traceback (most recent call last):\n    ...     ZeroDivisionError: integer division or modulo by zero\n    ...     '''\n    >>> test = doctest.DocTestFinder().find(f)[0]\n    >>> doctest.DocTestRunner(verbose=False).run(test)\n    ... # doctest: +ELLIPSIS\n    **********************************************************************\n    File ..., line 4, in f\n    Failed example:\n        print 'pre-exception output', x//0\n    Exception raised:\n        ...\n        ZeroDivisionError: integer division or modulo by zero\n    (1, 2)\n\nException messages may contain newlines:\n\n    >>> def f(x):\n    ...     r'''\n    ...     >>> raise ValueError, 'multi\\nline\\nmessage'\n    ...     Traceback (most recent call last):\n    ...     ValueError: multi\n    ...     line\n    ...     message\n    ...     '''\n    >>> test = doctest.DocTestFinder().find(f)[0]\n    >>> doctest.DocTestRunner(verbose=False).run(test)\n    (0, 1)\n\nIf an exception is expected, but an exception with the wrong type or\nmessage is raised, then it is reported as a failure:\n\n    >>> def f(x):\n    ...     r'''\n    ...     >>> raise ValueError, 'message'\n    ...     Traceback (most recent call last):\n    ...     ValueError: wrong message\n    ...     '''\n    >>> test = doctest.DocTestFinder().find(f)[0]\n    >>> doctest.DocTestRunner(verbose=False).run(test)\n    ... # doctest: +ELLIPSIS\n    **********************************************************************\n    File ..., line 3, in f\n    Failed example:\n        raise ValueError, 'message'\n    Expected:\n        Traceback (most recent call last):\n        ValueError: wrong message\n    Got:\n        Traceback (most recent call last):\n        ...\n        ValueError: message\n    (1, 1)\n\nHowever, IGNORE_EXCEPTION_DETAIL can be used to allow a mismatch in the\ndetail:\n\n    >>> def f(x):\n    ...     r'''\n    ...     >>> raise ValueError, 'message' #doctest: +IGNORE_EXCEPTION_DETAIL\n    ...     Traceback (most recent call last):\n    ...     ValueError: wrong message\n    ...     '''\n    >>> test = doctest.DocTestFinder().find(f)[0]\n    >>> doctest.DocTestRunner(verbose=False).run(test)\n    (0, 1)\n\nBut IGNORE_EXCEPTION_DETAIL does not allow a mismatch in the exception type:\n\n    >>> def f(x):\n    ...     r'''\n    ...     >>> raise ValueError, 'message' #doctest: +IGNORE_EXCEPTION_DETAIL\n    ...     Traceback (most recent call last):\n    ...     TypeError: wrong type\n    ...     '''\n    >>> test = doctest.DocTestFinder().find(f)[0]\n    >>> doctest.DocTestRunner(verbose=False).run(test)\n    ... # doctest: +ELLIPSIS\n    **********************************************************************\n    File ..., line 3, in f\n    Failed example:\n        raise ValueError, 'message' #doctest: +IGNORE_EXCEPTION_DETAIL\n    Expected:\n        Traceback (most recent call last):\n        TypeError: wrong type\n    Got:\n        Traceback (most recent call last):\n        ...\n        ValueError: message\n    (1, 1)\n\nIf an exception is raised but not expected, then it is reported as an\nunexpected exception:\n\n    >>> def f(x):\n    ...     r'''\n    ...     >>> 1//0\n    ...     0\n    ...     '''\n    >>> test = doctest.DocTestFinder().find(f)[0]\n    >>> doctest.DocTestRunner(verbose=False).run(test)\n    ... # doctest: +ELLIPSIS\n    **********************************************************************\n    File ..., line 3, in f\n    Failed example:\n        1//0\n    Exception raised:\n        Traceback (most recent call last):\n        ...\n        ZeroDivisionError: integer division or modulo by zero\n    (1, 1)\n"
