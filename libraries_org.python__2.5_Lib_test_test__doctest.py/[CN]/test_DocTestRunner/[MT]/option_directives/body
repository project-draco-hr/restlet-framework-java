def option_directives():
    "\nTests of `DocTestRunner`'s option directive mechanism.\n\nOption directives can be used to turn option flags on or off for a\nsingle example.  To turn an option on for an example, follow that\nexample with a comment of the form ``# doctest: +OPTION``:\n\n    >>> def f(x): r'''\n    ...     >>> print range(10)       # should fail: no ellipsis\n    ...     [0, 1, ..., 9]\n    ...\n    ...     >>> print range(10)       # doctest: +ELLIPSIS\n    ...     [0, 1, ..., 9]\n    ...     '''\n    >>> test = doctest.DocTestFinder().find(f)[0]\n    >>> doctest.DocTestRunner(verbose=False).run(test)\n    ... # doctest: +ELLIPSIS\n    **********************************************************************\n    File ..., line 2, in f\n    Failed example:\n        print range(10)       # should fail: no ellipsis\n    Expected:\n        [0, 1, ..., 9]\n    Got:\n        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    (1, 2)\n\nTo turn an option off for an example, follow that example with a\ncomment of the form ``# doctest: -OPTION``:\n\n    >>> def f(x): r'''\n    ...     >>> print range(10)\n    ...     [0, 1, ..., 9]\n    ...\n    ...     >>> # should fail: no ellipsis\n    ...     >>> print range(10)       # doctest: -ELLIPSIS\n    ...     [0, 1, ..., 9]\n    ...     '''\n    >>> test = doctest.DocTestFinder().find(f)[0]\n    >>> doctest.DocTestRunner(verbose=False,\n    ...                       optionflags=doctest.ELLIPSIS).run(test)\n    ... # doctest: +ELLIPSIS\n    **********************************************************************\n    File ..., line 6, in f\n    Failed example:\n        print range(10)       # doctest: -ELLIPSIS\n    Expected:\n        [0, 1, ..., 9]\n    Got:\n        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    (1, 2)\n\nOption directives affect only the example that they appear with; they\ndo not change the options for surrounding examples:\n\n    >>> def f(x): r'''\n    ...     >>> print range(10)       # Should fail: no ellipsis\n    ...     [0, 1, ..., 9]\n    ...\n    ...     >>> print range(10)       # doctest: +ELLIPSIS\n    ...     [0, 1, ..., 9]\n    ...\n    ...     >>> print range(10)       # Should fail: no ellipsis\n    ...     [0, 1, ..., 9]\n    ...     '''\n    >>> test = doctest.DocTestFinder().find(f)[0]\n    >>> doctest.DocTestRunner(verbose=False).run(test)\n    ... # doctest: +ELLIPSIS\n    **********************************************************************\n    File ..., line 2, in f\n    Failed example:\n        print range(10)       # Should fail: no ellipsis\n    Expected:\n        [0, 1, ..., 9]\n    Got:\n        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    **********************************************************************\n    File ..., line 8, in f\n    Failed example:\n        print range(10)       # Should fail: no ellipsis\n    Expected:\n        [0, 1, ..., 9]\n    Got:\n        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    (2, 3)\n\nMultiple options may be modified by a single option directive.  They\nmay be separated by whitespace, commas, or both:\n\n    >>> def f(x): r'''\n    ...     >>> print range(10)       # Should fail\n    ...     [0, 1,  ...,   9]\n    ...     >>> print range(10)       # Should succeed\n    ...     ... # doctest: +ELLIPSIS +NORMALIZE_WHITESPACE\n    ...     [0, 1,  ...,   9]\n    ...     '''\n    >>> test = doctest.DocTestFinder().find(f)[0]\n    >>> doctest.DocTestRunner(verbose=False).run(test)\n    ... # doctest: +ELLIPSIS\n    **********************************************************************\n    File ..., line 2, in f\n    Failed example:\n        print range(10)       # Should fail\n    Expected:\n        [0, 1,  ...,   9]\n    Got:\n        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    (1, 2)\n\n    >>> def f(x): r'''\n    ...     >>> print range(10)       # Should fail\n    ...     [0, 1,  ...,   9]\n    ...     >>> print range(10)       # Should succeed\n    ...     ... # doctest: +ELLIPSIS,+NORMALIZE_WHITESPACE\n    ...     [0, 1,  ...,   9]\n    ...     '''\n    >>> test = doctest.DocTestFinder().find(f)[0]\n    >>> doctest.DocTestRunner(verbose=False).run(test)\n    ... # doctest: +ELLIPSIS\n    **********************************************************************\n    File ..., line 2, in f\n    Failed example:\n        print range(10)       # Should fail\n    Expected:\n        [0, 1,  ...,   9]\n    Got:\n        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    (1, 2)\n\n    >>> def f(x): r'''\n    ...     >>> print range(10)       # Should fail\n    ...     [0, 1,  ...,   9]\n    ...     >>> print range(10)       # Should succeed\n    ...     ... # doctest: +ELLIPSIS, +NORMALIZE_WHITESPACE\n    ...     [0, 1,  ...,   9]\n    ...     '''\n    >>> test = doctest.DocTestFinder().find(f)[0]\n    >>> doctest.DocTestRunner(verbose=False).run(test)\n    ... # doctest: +ELLIPSIS\n    **********************************************************************\n    File ..., line 2, in f\n    Failed example:\n        print range(10)       # Should fail\n    Expected:\n        [0, 1,  ...,   9]\n    Got:\n        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    (1, 2)\n\nThe option directive may be put on the line following the source, as\nlong as a continuation prompt is used:\n\n    >>> def f(x): r'''\n    ...     >>> print range(10)\n    ...     ... # doctest: +ELLIPSIS\n    ...     [0, 1, ..., 9]\n    ...     '''\n    >>> test = doctest.DocTestFinder().find(f)[0]\n    >>> doctest.DocTestRunner(verbose=False).run(test)\n    (0, 1)\n\nFor examples with multi-line source, the option directive may appear\nat the end of any line:\n\n    >>> def f(x): r'''\n    ...     >>> for x in range(10): # doctest: +ELLIPSIS\n    ...     ...     print x,\n    ...     0 1 2 ... 9\n    ...\n    ...     >>> for x in range(10):\n    ...     ...     print x,        # doctest: +ELLIPSIS\n    ...     0 1 2 ... 9\n    ...     '''\n    >>> test = doctest.DocTestFinder().find(f)[0]\n    >>> doctest.DocTestRunner(verbose=False).run(test)\n    (0, 2)\n\nIf more than one line of an example with multi-line source has an\noption directive, then they are combined:\n\n    >>> def f(x): r'''\n    ...     Should fail (option directive not on the last line):\n    ...         >>> for x in range(10): # doctest: +ELLIPSIS\n    ...         ...     print x,        # doctest: +NORMALIZE_WHITESPACE\n    ...         0  1    2...9\n    ...     '''\n    >>> test = doctest.DocTestFinder().find(f)[0]\n    >>> doctest.DocTestRunner(verbose=False).run(test)\n    (0, 1)\n\nIt is an error to have a comment of the form ``# doctest:`` that is\n*not* followed by words of the form ``+OPTION`` or ``-OPTION``, where\n``OPTION`` is an option that has been registered with\n`register_option`:\n\n    >>> # Error: Option not registered\n    >>> s = '>>> print 12   #doctest: +BADOPTION'\n    >>> test = doctest.DocTestParser().get_doctest(s, {}, 's', 's.py', 0)\n    Traceback (most recent call last):\n    ValueError: line 1 of the doctest for s has an invalid option: '+BADOPTION'\n\n    >>> # Error: No + or - prefix\n    >>> s = '>>> print 12   #doctest: ELLIPSIS'\n    >>> test = doctest.DocTestParser().get_doctest(s, {}, 's', 's.py', 0)\n    Traceback (most recent call last):\n    ValueError: line 1 of the doctest for s has an invalid option: 'ELLIPSIS'\n\nIt is an error to use an option directive on a line that contains no\nsource:\n\n    >>> s = '>>> # doctest: +ELLIPSIS'\n    >>> test = doctest.DocTestParser().get_doctest(s, {}, 's', 's.py', 0)\n    Traceback (most recent call last):\n    ValueError: line 0 of the doctest for s has an option directive on a line with no example: '# doctest: +ELLIPSIS'\n"
