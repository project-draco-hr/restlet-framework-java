def test_unittest_reportflags():
    "Default unittest reporting flags can be set to control reporting\n\n    Here, we'll set the REPORT_ONLY_FIRST_FAILURE option so we see\n    only the first failure of each test.  First, we'll look at the\n    output without the flag.  The file test_doctest.txt file has two\n    tests. They both fail if blank lines are disabled:\n\n      >>> suite = doctest.DocFileSuite('test_doctest.txt',\n      ...                          optionflags=doctest.DONT_ACCEPT_BLANKLINE)\n      >>> import unittest\n      >>> result = suite.run(unittest.TestResult())\n      >>> print result.failures[0][1] # doctest: +ELLIPSIS\n      Traceback ...\n      Failed example:\n          favorite_color\n      ...\n      Failed example:\n          if 1:\n      ...\n\n    Note that we see both failures displayed.\n\n      >>> old = doctest.set_unittest_reportflags(\n      ...    doctest.REPORT_ONLY_FIRST_FAILURE)\n\n    Now, when we run the test:\n\n      >>> result = suite.run(unittest.TestResult())\n      >>> print result.failures[0][1] # doctest: +ELLIPSIS\n      Traceback ...\n      Failed example:\n          favorite_color\n      Exception raised:\n          ...\n          NameError: name 'favorite_color' is not defined\n      <BLANKLINE>\n      <BLANKLINE>\n\n    We get only the first failure.\n\n    If we give any reporting options when we set up the tests,\n    however:\n\n      >>> suite = doctest.DocFileSuite('test_doctest.txt',\n      ...     optionflags=doctest.DONT_ACCEPT_BLANKLINE | doctest.REPORT_NDIFF)\n\n    Then the default eporting options are ignored:\n\n      >>> result = suite.run(unittest.TestResult())\n      >>> print result.failures[0][1] # doctest: +ELLIPSIS\n      Traceback ...\n      Failed example:\n          favorite_color\n      ...\n      Failed example:\n          if 1:\n             print 'a'\n             print\n             print 'b'\n      Differences (ndiff with -expected +actual):\n            a\n          - <BLANKLINE>\n          +\n            b\n      <BLANKLINE>\n      <BLANKLINE>\n\n\n    Test runners can restore the formatting flags after they run:\n\n      >>> ignored = doctest.set_unittest_reportflags(old)\n\n    "
