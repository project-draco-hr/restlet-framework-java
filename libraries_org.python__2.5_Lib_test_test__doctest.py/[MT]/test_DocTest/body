def test_DocTest():
    '\nUnit tests for the `DocTest` class.\n\nDocTest is a collection of examples, extracted from a docstring, along\nwith information about where the docstring comes from (a name,\nfilename, and line number).  The docstring is parsed by the `DocTest`\nconstructor:\n\n    >>> docstring = \'\'\'\n    ...     >>> print 12\n    ...     12\n    ...\n    ... Non-example text.\n    ...\n    ...     >>> print \'another\\example\'\n    ...     another\n    ...     example\n    ... \'\'\'\n    >>> globs = {} # globals to run the test in.\n    >>> parser = doctest.DocTestParser()\n    >>> test = parser.get_doctest(docstring, globs, \'some_test\',\n    ...                           \'some_file\', 20)\n    >>> print test\n    <DocTest some_test from some_file:20 (2 examples)>\n    >>> len(test.examples)\n    2\n    >>> e1, e2 = test.examples\n    >>> (e1.source, e1.want, e1.lineno)\n    (\'print 12\\n\', \'12\\n\', 1)\n    >>> (e2.source, e2.want, e2.lineno)\n    ("print \'another\\\\example\'\\n", \'another\\nexample\\n\', 6)\n\nSource information (name, filename, and line number) is available as\nattributes on the doctest object:\n\n    >>> (test.name, test.filename, test.lineno)\n    (\'some_test\', \'some_file\', 20)\n\nThe line number of an example within its containing file is found by\nadding the line number of the example and the line number of its\ncontaining test:\n\n    >>> test.lineno + e1.lineno\n    21\n    >>> test.lineno + e2.lineno\n    26\n\nIf the docstring contains inconsistant leading whitespace in the\nexpected output of an example, then `DocTest` will raise a ValueError:\n\n    >>> docstring = r\'\'\'\n    ...       >>> print \'bad\\nindentation\'\n    ...       bad\n    ...     indentation\n    ...     \'\'\'\n    >>> parser.get_doctest(docstring, globs, \'some_test\', \'filename\', 0)\n    Traceback (most recent call last):\n    ValueError: line 4 of the docstring for some_test has inconsistent leading whitespace: \'indentation\'\n\nIf the docstring contains inconsistent leading whitespace on\ncontinuation lines, then `DocTest` will raise a ValueError:\n\n    >>> docstring = r\'\'\'\n    ...       >>> print (\'bad indentation\',\n    ...     ...          2)\n    ...       (\'bad\', \'indentation\')\n    ...     \'\'\'\n    >>> parser.get_doctest(docstring, globs, \'some_test\', \'filename\', 0)\n    Traceback (most recent call last):\n    ValueError: line 2 of the docstring for some_test has inconsistent leading whitespace: \'...          2)\'\n\nIf there\'s no blank space after a PS1 prompt (\'>>>\'), then `DocTest`\nwill raise a ValueError:\n\n    >>> docstring = \'>>>print 1\\n1\'\n    >>> parser.get_doctest(docstring, globs, \'some_test\', \'filename\', 0)\n    Traceback (most recent call last):\n    ValueError: line 1 of the docstring for some_test lacks blank after >>>: \'>>>print 1\'\n\nIf there\'s no blank space after a PS2 prompt (\'...\'), then `DocTest`\nwill raise a ValueError:\n\n    >>> docstring = \'>>> if 1:\\n...print 1\\n1\'\n    >>> parser.get_doctest(docstring, globs, \'some_test\', \'filename\', 0)\n    Traceback (most recent call last):\n    ValueError: line 2 of the docstring for some_test lacks blank after ...: \'...print 1\'\n\n'
