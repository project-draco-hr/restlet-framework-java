def test_DocTestParser():
    "\nUnit tests for the `DocTestParser` class.\n\nDocTestParser is used to parse docstrings containing doctest examples.\n\nThe `parse` method divides a docstring into examples and intervening\ntext:\n\n    >>> s = '''\n    ...     >>> x, y = 2, 3  # no output expected\n    ...     >>> if 1:\n    ...     ...     print x\n    ...     ...     print y\n    ...     2\n    ...     3\n    ...\n    ...     Some text.\n    ...     >>> x+y\n    ...     5\n    ...     '''\n    >>> parser = doctest.DocTestParser()\n    >>> for piece in parser.parse(s):\n    ...     if isinstance(piece, doctest.Example):\n    ...         print 'Example:', (piece.source, piece.want, piece.lineno)\n    ...     else:\n    ...         print '   Text:', `piece`\n       Text: '\\n'\n    Example: ('x, y = 2, 3  # no output expected\\n', '', 1)\n       Text: ''\n    Example: ('if 1:\\n    print x\\n    print y\\n', '2\\n3\\n', 2)\n       Text: '\\nSome text.\\n'\n    Example: ('x+y\\n', '5\\n', 9)\n       Text: ''\n\nThe `get_examples` method returns just the examples:\n\n    >>> for piece in parser.get_examples(s):\n    ...     print (piece.source, piece.want, piece.lineno)\n    ('x, y = 2, 3  # no output expected\\n', '', 1)\n    ('if 1:\\n    print x\\n    print y\\n', '2\\n3\\n', 2)\n    ('x+y\\n', '5\\n', 9)\n\nThe `get_doctest` method creates a Test from the examples, along with the\ngiven arguments:\n\n    >>> test = parser.get_doctest(s, {}, 'name', 'filename', lineno=5)\n    >>> (test.name, test.filename, test.lineno)\n    ('name', 'filename', 5)\n    >>> for piece in test.examples:\n    ...     print (piece.source, piece.want, piece.lineno)\n    ('x, y = 2, 3  # no output expected\\n', '', 1)\n    ('if 1:\\n    print x\\n    print y\\n', '2\\n3\\n', 2)\n    ('x+y\\n', '5\\n', 9)\n"
