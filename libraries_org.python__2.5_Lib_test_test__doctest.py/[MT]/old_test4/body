def old_test4():
    '\n        >>> import new\n        >>> m1 = new.module(\'_m1\')\n        >>> m2 = new.module(\'_m2\')\n        >>> test_data = """\n        ... def _f():\n        ...     \'\'\'>>> assert 1 == 1\n        ...     \'\'\'\n        ... def g():\n        ...    \'\'\'>>> assert 2 != 1\n        ...    \'\'\'\n        ... class H:\n        ...    \'\'\'>>> assert 2 > 1\n        ...    \'\'\'\n        ...    def bar(self):\n        ...        \'\'\'>>> assert 1 < 2\n        ...        \'\'\'\n        ... """\n        >>> exec test_data in m1.__dict__\n        >>> exec test_data in m2.__dict__\n        >>> m1.__dict__.update({"f2": m2._f, "g2": m2.g, "h2": m2.H})\n\n        Tests that objects outside m1 are excluded:\n\n        >>> from doctest import Tester\n        >>> t = Tester(globs={}, verbose=0)\n        >>> t.rundict(m1.__dict__, "rundict_test", m1)  # f2 and g2 and h2 skipped\n        (0, 4)\n\n        Once more, not excluding stuff outside m1:\n\n        >>> t = Tester(globs={}, verbose=0)\n        >>> t.rundict(m1.__dict__, "rundict_test_pvt")  # None are skipped.\n        (0, 8)\n\n        The exclusion of objects from outside the designated module is\n        meant to be invoked automagically by testmod.\n\n        >>> doctest.testmod(m1, verbose=False)\n        (0, 4)\n'
