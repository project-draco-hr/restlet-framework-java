def test_testfile():
    '\nTests for the `testfile()` function.  This function runs all the\ndoctest examples in a given file.  In its simple invokation, it is\ncalled with the name of a file, which is taken to be relative to the\ncalling module.  The return value is (#failures, #tests).\n\n    >>> doctest.testfile(\'test_doctest.txt\') # doctest: +ELLIPSIS\n    **********************************************************************\n    File "...", line 6, in test_doctest.txt\n    Failed example:\n        favorite_color\n    Exception raised:\n        ...\n        NameError: name \'favorite_color\' is not defined\n    **********************************************************************\n    1 items had failures:\n       1 of   2 in test_doctest.txt\n    ***Test Failed*** 1 failures.\n    (1, 2)\n    >>> doctest.master = None  # Reset master.\n\n(Note: we\'ll be clearing doctest.master after each call to\n`doctest.testfile`, to supress warnings about multiple tests with the\nsame name.)\n\nGlobals may be specified with the `globs` and `extraglobs` parameters:\n\n    >>> globs = {\'favorite_color\': \'blue\'}\n    >>> doctest.testfile(\'test_doctest.txt\', globs=globs)\n    (0, 2)\n    >>> doctest.master = None  # Reset master.\n\n    >>> extraglobs = {\'favorite_color\': \'red\'}\n    >>> doctest.testfile(\'test_doctest.txt\', globs=globs,\n    ...                  extraglobs=extraglobs) # doctest: +ELLIPSIS\n    **********************************************************************\n    File "...", line 6, in test_doctest.txt\n    Failed example:\n        favorite_color\n    Expected:\n        \'blue\'\n    Got:\n        \'red\'\n    **********************************************************************\n    1 items had failures:\n       1 of   2 in test_doctest.txt\n    ***Test Failed*** 1 failures.\n    (1, 2)\n    >>> doctest.master = None  # Reset master.\n\nThe file may be made relative to a given module or package, using the\noptional `module_relative` parameter:\n\n    >>> doctest.testfile(\'test_doctest.txt\', globs=globs,\n    ...                  module_relative=\'test\')\n    (0, 2)\n    >>> doctest.master = None  # Reset master.\n\nVerbosity can be increased with the optional `verbose` paremter:\n\n    >>> doctest.testfile(\'test_doctest.txt\', globs=globs, verbose=True)\n    Trying:\n        favorite_color\n    Expecting:\n        \'blue\'\n    ok\n    Trying:\n        if 1:\n           print \'a\'\n           print\n           print \'b\'\n    Expecting:\n        a\n        <BLANKLINE>\n        b\n    ok\n    1 items passed all tests:\n       2 tests in test_doctest.txt\n    2 tests in 1 items.\n    2 passed and 0 failed.\n    Test passed.\n    (0, 2)\n    >>> doctest.master = None  # Reset master.\n\nThe name of the test may be specified with the optional `name`\nparameter:\n\n    >>> doctest.testfile(\'test_doctest.txt\', name=\'newname\')\n    ... # doctest: +ELLIPSIS\n    **********************************************************************\n    File "...", line 6, in newname\n    ...\n    (1, 2)\n    >>> doctest.master = None  # Reset master.\n\nThe summary report may be supressed with the optional `report`\nparameter:\n\n    >>> doctest.testfile(\'test_doctest.txt\', report=False)\n    ... # doctest: +ELLIPSIS\n    **********************************************************************\n    File "...", line 6, in test_doctest.txt\n    Failed example:\n        favorite_color\n    Exception raised:\n        ...\n        NameError: name \'favorite_color\' is not defined\n    (1, 2)\n    >>> doctest.master = None  # Reset master.\n\nThe optional keyword argument `raise_on_error` can be used to raise an\nexception on the first error (which may be useful for postmortem\ndebugging):\n\n    >>> doctest.testfile(\'test_doctest.txt\', raise_on_error=True)\n    ... # doctest: +ELLIPSIS\n    Traceback (most recent call last):\n    UnexpectedException: ...\n    >>> doctest.master = None  # Reset master.\n\nIf the tests contain non-ASCII characters, the tests might fail, since\nit\'s unknown which encoding is used. The encoding can be specified\nusing the optional keyword argument `encoding`:\n\n    >>> doctest.testfile(\'test_doctest4.txt\') # doctest: +ELLIPSIS\n    **********************************************************************\n    File "...", line 7, in test_doctest4.txt\n    Failed example:\n        u\'...\'\n    Expected:\n        u\'f\\xf6\\xf6\'\n    Got:\n        u\'f\\xc3\\xb6\\xc3\\xb6\'\n    **********************************************************************\n    ...\n    **********************************************************************\n    1 items had failures:\n       2 of   4 in test_doctest4.txt\n    ***Test Failed*** 2 failures.\n    (2, 4)\n    >>> doctest.master = None  # Reset master.\n\n    >>> doctest.testfile(\'test_doctest4.txt\', encoding=\'utf-8\')\n    (0, 4)\n    >>> doctest.master = None  # Reset master.\n'
