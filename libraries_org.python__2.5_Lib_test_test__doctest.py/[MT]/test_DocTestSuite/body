def test_DocTestSuite():
    "DocTestSuite creates a unittest test suite from a doctest.\n\n       We create a Suite by providing a module.  A module can be provided\n       by passing a module object:\n\n         >>> import unittest\n         >>> import test.sample_doctest\n         >>> suite = doctest.DocTestSuite(test.sample_doctest)\n         >>> suite.run(unittest.TestResult())\n         <unittest.TestResult run=9 errors=0 failures=4>\n\n       We can also supply the module by name:\n\n         >>> suite = doctest.DocTestSuite('test.sample_doctest')\n         >>> suite.run(unittest.TestResult())\n         <unittest.TestResult run=9 errors=0 failures=4>\n\n       We can use the current module:\n\n         >>> suite = test.sample_doctest.test_suite()\n         >>> suite.run(unittest.TestResult())\n         <unittest.TestResult run=9 errors=0 failures=4>\n\n       We can supply global variables.  If we pass globs, they will be\n       used instead of the module globals.  Here we'll pass an empty\n       globals, triggering an extra error:\n\n         >>> suite = doctest.DocTestSuite('test.sample_doctest', globs={})\n         >>> suite.run(unittest.TestResult())\n         <unittest.TestResult run=9 errors=0 failures=5>\n\n       Alternatively, we can provide extra globals.  Here we'll make an\n       error go away by providing an extra global variable:\n\n         >>> suite = doctest.DocTestSuite('test.sample_doctest',\n         ...                              extraglobs={'y': 1})\n         >>> suite.run(unittest.TestResult())\n         <unittest.TestResult run=9 errors=0 failures=3>\n\n       You can pass option flags.  Here we'll cause an extra error\n       by disabling the blank-line feature:\n\n         >>> suite = doctest.DocTestSuite('test.sample_doctest',\n         ...                      optionflags=doctest.DONT_ACCEPT_BLANKLINE)\n         >>> suite.run(unittest.TestResult())\n         <unittest.TestResult run=9 errors=0 failures=5>\n\n       You can supply setUp and tearDown functions:\n\n         >>> def setUp(t):\n         ...     import test.test_doctest\n         ...     test.test_doctest.sillySetup = True\n\n         >>> def tearDown(t):\n         ...     import test.test_doctest\n         ...     del test.test_doctest.sillySetup\n\n       Here, we installed a silly variable that the test expects:\n\n         >>> suite = doctest.DocTestSuite('test.sample_doctest',\n         ...      setUp=setUp, tearDown=tearDown)\n         >>> suite.run(unittest.TestResult())\n         <unittest.TestResult run=9 errors=0 failures=3>\n\n       But the tearDown restores sanity:\n\n         >>> import test.test_doctest\n         >>> test.test_doctest.sillySetup\n         Traceback (most recent call last):\n         ...\n         AttributeError: 'module' object has no attribute 'sillySetup'\n\n       The setUp and tearDown funtions are passed test objects. Here\n       we'll use the setUp function to supply the missing variable y:\n\n         >>> def setUp(test):\n         ...     test.globs['y'] = 1\n\n         >>> suite = doctest.DocTestSuite('test.sample_doctest', setUp=setUp)\n         >>> suite.run(unittest.TestResult())\n         <unittest.TestResult run=9 errors=0 failures=3>\n\n       Here, we didn't need to use a tearDown function because we\n       modified the test globals, which are a copy of the\n       sample_doctest module dictionary.  The test globals are\n       automatically cleared for us after a test.\n       "
