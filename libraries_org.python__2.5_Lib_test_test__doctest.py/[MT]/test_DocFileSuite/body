def test_DocFileSuite():
    "We can test tests found in text files using a DocFileSuite.\n\n       We create a suite by providing the names of one or more text\n       files that include examples:\n\n         >>> import unittest\n         >>> suite = doctest.DocFileSuite('test_doctest.txt',\n         ...                              'test_doctest2.txt',\n         ...                              'test_doctest4.txt')\n         >>> suite.run(unittest.TestResult())\n         <unittest.TestResult run=3 errors=0 failures=3>\n\n       The test files are looked for in the directory containing the\n       calling module.  A package keyword argument can be provided to\n       specify a different relative location.\n\n         >>> import unittest\n         >>> suite = doctest.DocFileSuite('test_doctest.txt',\n         ...                              'test_doctest2.txt',\n         ...                              'test_doctest4.txt',\n         ...                              package='test')\n         >>> suite.run(unittest.TestResult())\n         <unittest.TestResult run=3 errors=0 failures=3>\n\n       Support for using a package's __loader__.get_data() is also\n       provided.\n\n         >>> import unittest, pkgutil, test\n         >>> added_loader = False\n         >>> if not hasattr(test, '__loader__'):\n         ...     test.__loader__ = pkgutil.get_loader(test)\n         ...     added_loader = True\n         >>> try:\n         ...     suite = doctest.DocFileSuite('test_doctest.txt',\n         ...                                  'test_doctest2.txt',\n         ...                                  'test_doctest4.txt',\n         ...                                  package='test')\n         ...     suite.run(unittest.TestResult())\n         ... finally:\n         ...     if added_loader:\n         ...         del test.__loader__\n         <unittest.TestResult run=3 errors=0 failures=3>\n\n       '/' should be used as a path separator.  It will be converted\n       to a native separator at run time:\n\n         >>> suite = doctest.DocFileSuite('../test/test_doctest.txt')\n         >>> suite.run(unittest.TestResult())\n         <unittest.TestResult run=1 errors=0 failures=1>\n\n       If DocFileSuite is used from an interactive session, then files\n       are resolved relative to the directory of sys.argv[0]:\n\n         >>> import new, os.path, test.test_doctest\n         >>> save_argv = sys.argv\n         >>> sys.argv = [test.test_doctest.__file__]\n         >>> suite = doctest.DocFileSuite('test_doctest.txt',\n         ...                              package=new.module('__main__'))\n         >>> sys.argv = save_argv\n\n       By setting `module_relative=False`, os-specific paths may be\n       used (including absolute paths and paths relative to the\n       working directory):\n\n         >>> # Get the absolute path of the test package.\n         >>> test_doctest_path = os.path.abspath(test.test_doctest.__file__)\n         >>> test_pkg_path = os.path.split(test_doctest_path)[0]\n\n         >>> # Use it to find the absolute path of test_doctest.txt.\n         >>> test_file = os.path.join(test_pkg_path, 'test_doctest.txt')\n\n         >>> suite = doctest.DocFileSuite(test_file, module_relative=False)\n         >>> suite.run(unittest.TestResult())\n         <unittest.TestResult run=1 errors=0 failures=1>\n\n       It is an error to specify `package` when `module_relative=False`:\n\n         >>> suite = doctest.DocFileSuite(test_file, module_relative=False,\n         ...                              package='test')\n         Traceback (most recent call last):\n         ValueError: Package may only be specified for module-relative paths.\n\n       You can specify initial global variables:\n\n         >>> suite = doctest.DocFileSuite('test_doctest.txt',\n         ...                              'test_doctest2.txt',\n         ...                              'test_doctest4.txt',\n         ...                              globs={'favorite_color': 'blue'})\n         >>> suite.run(unittest.TestResult())\n         <unittest.TestResult run=3 errors=0 failures=2>\n\n       In this case, we supplied a missing favorite color. You can\n       provide doctest options:\n\n         >>> suite = doctest.DocFileSuite('test_doctest.txt',\n         ...                              'test_doctest2.txt',\n         ...                              'test_doctest4.txt',\n         ...                         optionflags=doctest.DONT_ACCEPT_BLANKLINE,\n         ...                              globs={'favorite_color': 'blue'})\n         >>> suite.run(unittest.TestResult())\n         <unittest.TestResult run=3 errors=0 failures=3>\n\n       And, you can provide setUp and tearDown functions:\n\n       You can supply setUp and teatDoen functions:\n\n         >>> def setUp(t):\n         ...     import test.test_doctest\n         ...     test.test_doctest.sillySetup = True\n\n         >>> def tearDown(t):\n         ...     import test.test_doctest\n         ...     del test.test_doctest.sillySetup\n\n       Here, we installed a silly variable that the test expects:\n\n         >>> suite = doctest.DocFileSuite('test_doctest.txt',\n         ...                              'test_doctest2.txt',\n         ...                              'test_doctest4.txt',\n         ...                              setUp=setUp, tearDown=tearDown)\n         >>> suite.run(unittest.TestResult())\n         <unittest.TestResult run=3 errors=0 failures=2>\n\n       But the tearDown restores sanity:\n\n         >>> import test.test_doctest\n         >>> test.test_doctest.sillySetup\n         Traceback (most recent call last):\n         ...\n         AttributeError: 'module' object has no attribute 'sillySetup'\n\n       The setUp and tearDown funtions are passed test objects.\n       Here, we'll use a setUp function to set the favorite color in\n       test_doctest.txt:\n\n         >>> def setUp(test):\n         ...     test.globs['favorite_color'] = 'blue'\n\n         >>> suite = doctest.DocFileSuite('test_doctest.txt', setUp=setUp)\n         >>> suite.run(unittest.TestResult())\n         <unittest.TestResult run=1 errors=0 failures=0>\n\n       Here, we didn't need to use a tearDown function because we\n       modified the test globals.  The test globals are\n       automatically cleared for us after a test.\n\n       Tests in a file run using `DocFileSuite` can also access the\n       `__file__` global, which is set to the name of the file\n       containing the tests:\n\n         >>> suite = doctest.DocFileSuite('test_doctest3.txt')\n         >>> suite.run(unittest.TestResult())\n         <unittest.TestResult run=1 errors=0 failures=0>\n\n       If the tests contain non-ASCII characters, we have to specify which\n       encoding the file is encoded with. We do so by using the `encoding`\n       parameter:\n\n         >>> suite = doctest.DocFileSuite('test_doctest.txt',\n         ...                              'test_doctest2.txt',\n         ...                              'test_doctest4.txt',\n         ...                              encoding='utf-8')\n         >>> suite.run(unittest.TestResult())\n         <unittest.TestResult run=3 errors=0 failures=2>\n\n       "
