def binopoverride():
    if verbose:
        print 'Testing overrides of binary operations...'


    class I(int):

        def __repr__(self):
            return ('I(%r)' % int(self))

        def __add__(self, other):
            return I((int(self) + int(other)))
        __radd__ = __add__

        def __pow__(self, other, mod=None):
            if (mod is None):
                return I(pow(int(self), int(other)))
            else:
                return I(pow(int(self), int(other), int(mod)))

        def __rpow__(self, other, mod=None):
            if (mod is None):
                return I(pow(int(other), int(self), mod))
            else:
                return I(pow(int(other), int(self), int(mod)))
    vereq(repr((I(1) + I(2))), 'I(3)')
    vereq(repr((I(1) + 2)), 'I(3)')
    vereq(repr((1 + I(2))), 'I(3)')
    vereq(repr((I(2) ** I(3))), 'I(8)')
    vereq(repr((2 ** I(3))), 'I(8)')
    vereq(repr((I(2) ** 3)), 'I(8)')
    vereq(repr(pow(I(2), I(3), I(5))), 'I(3)')


    class S(str):

        def __eq__(self, other):
            return (self.lower() == other.lower())
