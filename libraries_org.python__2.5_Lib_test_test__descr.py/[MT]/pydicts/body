def pydicts():
    if verbose:
        print 'Testing Python subclass of dict...'
    verify(issubclass(dict, dict))
    verify(isinstance({}, dict))
    d = dict()
    vereq(d, {})
    verify((d.__class__ is dict))
    verify(isinstance(d, dict))


    class C(dict):
        state = (-1)

        def __init__(self, *a, **kw):
            if a:
                vereq(len(a), 1)
                self.state = a[0]
            if kw:
                for (k, v) in kw.items():
                    self[v] = k

        def __getitem__(self, key):
            return self.get(key, 0)

        def __setitem__(self, key, value):
            verify(isinstance(key, type(0)))
            dict.__setitem__(self, key, value)

        def setstate(self, state):
            self.state = state

        def getstate(self):
            return self.state
    verify(issubclass(C, dict))
    a1 = C(12)
    vereq(a1.state, 12)
    a2 = C(foo=1, bar=2)
    vereq(((a2[1] == 'foo') and a2[2]), 'bar')
    a = C()
    vereq(a.state, (-1))
    vereq(a.getstate(), (-1))
    a.setstate(0)
    vereq(a.state, 0)
    vereq(a.getstate(), 0)
    a.setstate(10)
    vereq(a.state, 10)
    vereq(a.getstate(), 10)
    vereq(a[42], 0)
    a[42] = 24
    vereq(a[42], 24)
    if verbose:
        print 'pydict stress test ...'
    N = 50
    for i in range(N):
        a[i] = C()
        for j in range(N):
            a[i][j] = (i * j)
    for i in range(N):
        for j in range(N):
            vereq(a[i][j], (i * j))
