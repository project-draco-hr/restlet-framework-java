def str_subclass_as_dict_key():
    if verbose:
        print 'Testing a str subclass used as dict key ..'


    class cistr(str):
        'Sublcass of str that computes __eq__ case-insensitively.\n\n        Also computes a hash code of the string in canonical form.\n        '

        def __init__(self, value):
            self.canonical = value.lower()
            self.hashcode = hash(self.canonical)

        def __eq__(self, other):
            if (not isinstance(other, cistr)):
                other = cistr(other)
            return (self.canonical == other.canonical)

        def __hash__(self):
            return self.hashcode
    vereq(cistr('ABC'), 'abc')
    vereq('aBc', cistr('ABC'))
    vereq(str(cistr('ABC')), 'ABC')
    d = {cistr('one'): 1, cistr('two'): 2, cistr('tHree'): 3, }
    vereq(d[cistr('one')], 1)
    vereq(d[cistr('tWo')], 2)
    vereq(d[cistr('THrEE')], 3)
    verify((cistr('ONe') in d))
    vereq(d.get(cistr('thrEE')), 3)
