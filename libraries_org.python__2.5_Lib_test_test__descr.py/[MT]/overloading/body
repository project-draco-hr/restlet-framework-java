def overloading():
    if verbose:
        print 'Testing operator overloading...'


    class B(object):
        "Intermediate class because object doesn't have a __setattr__"


    class C(B):

        def __getattr__(self, name):
            if (name == 'foo'):
                return ('getattr', name)
            else:
                raise AttributeError

        def __setattr__(self, name, value):
            if (name == 'foo'):
                self.setattr = (name, value)
            else:
                return B.__setattr__(self, name, value)

        def __delattr__(self, name):
            if (name == 'foo'):
                self.delattr = name
            else:
                return B.__delattr__(self, name)

        def __getitem__(self, key):
            return ('getitem', key)

        def __setitem__(self, key, value):
            self.setitem = (key, value)

        def __delitem__(self, key):
            self.delitem = key

        def __getslice__(self, i, j):
            return ('getslice', i, j)

        def __setslice__(self, i, j, value):
            self.setslice = (i, j, value)

        def __delslice__(self, i, j):
            self.delslice = (i, j)
    a = C()
    vereq(a.foo, ('getattr', 'foo'))
    a.foo = 12
    vereq(a.setattr, ('foo', 12))
    del a.foo
    vereq(a.delattr, 'foo')
    vereq(a[12], ('getitem', 12))
    a[12] = 21
    vereq(a.setitem, (12, 21))
    del a[12]
    vereq(a.delitem, 12)
    vereq(a[0:10], ('getslice', 0, 10))
    a[0:10] = 'foo'
    vereq(a.setslice, (0, 10, 'foo'))
    del a[0:10]
    vereq(a.delslice, (0, 10))
