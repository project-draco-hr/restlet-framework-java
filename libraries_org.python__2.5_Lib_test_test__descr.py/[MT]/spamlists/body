def spamlists():
    if verbose:
        print 'Testing spamlist operations...'
    import copy, xxsubtype as spam

    def spamlist(l, memo=None):
        import xxsubtype as spam
        return spam.spamlist(l)
    copy._deepcopy_dispatch[spam.spamlist] = spamlist
    testbinop(spamlist([1]), spamlist([2]), spamlist([1, 2]), 'a+b', '__add__')
    testbinop(spamlist([1, 2, 3]), 2, 1, 'b in a', '__contains__')
    testbinop(spamlist([1, 2, 3]), 4, 0, 'b in a', '__contains__')
    testbinop(spamlist([1, 2, 3]), 1, 2, 'a[b]', '__getitem__')
    testternop(spamlist([1, 2, 3]), 0, 2, spamlist([1, 2]), 'a[b:c]', '__getslice__')
    testsetop(spamlist([1]), spamlist([2]), spamlist([1, 2]), 'a+=b', '__iadd__')
    testsetop(spamlist([1, 2]), 3, spamlist([1, 2, 1, 2, 1, 2]), 'a*=b', '__imul__')
    testunop(spamlist([1, 2, 3]), 3, 'len(a)', '__len__')
    testbinop(spamlist([1, 2]), 3, spamlist([1, 2, 1, 2, 1, 2]), 'a*b', '__mul__')
    testbinop(spamlist([1, 2]), 3, spamlist([1, 2, 1, 2, 1, 2]), 'b*a', '__rmul__')
    testset2op(spamlist([1, 2]), 1, 3, spamlist([1, 3]), 'a[b]=c', '__setitem__')
    testset3op(spamlist([1, 2, 3, 4]), 1, 3, spamlist([5, 6]), spamlist([1, 5, 6, 4]), 'a[b:c]=d', '__setslice__')


    class C(spam.spamlist):

        def foo(self):
            return 1
    a = C()
    vereq(a, [])
    vereq(a.foo(), 1)
    a.append(100)
    vereq(a, [100])
    vereq(a.getstate(), 0)
    a.setstate(42)
    vereq(a.getstate(), 42)
