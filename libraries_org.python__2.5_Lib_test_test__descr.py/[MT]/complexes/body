def complexes():
    if verbose:
        print 'Testing complex operations...'
    numops(100j, 3j, skip=['lt', 'le', 'gt', 'ge', 'int', 'long', 'float'])


    class Number(complex):
        __slots__ = ['prec']

        def __new__(cls, *args, **kwds):
            result = complex.__new__(cls, *args)
            result.prec = kwds.get('prec', 12)
            return result

        def __repr__(self):
            prec = self.prec
            if (self.imag == 0.0):
                return ('%.*g' % (prec, self.real))
            if (self.real == 0.0):
                return ('%.*gj' % (prec, self.imag))
            return ('(%.*g+%.*gj)' % (prec, self.real, prec, self.imag))
        __str__ = __repr__
    a = Number(3.14, prec=6)
    vereq(repr(a), '3.14')
    vereq(a.prec, 6)
    a = Number(a, prec=2)
    vereq(repr(a), '3.1')
    vereq(a.prec, 2)
    a = Number(234.5)
    vereq(repr(a), '234.5')
    vereq(a.prec, 12)
