def classic_comparisons():
    if verbose:
        print 'Testing classic comparisons...'


    class classic:
        pass
    for base in (classic, int, object):
        if verbose:
            print ('        (base = %s)' % base)


        class C(base):

            def __init__(self, value):
                self.value = int(value)

            def __cmp__(self, other):
                if isinstance(other, C):
                    return cmp(self.value, other.value)
                if (isinstance(other, int) or isinstance(other, long)):
                    return cmp(self.value, other)
                return NotImplemented
        c1 = C(1)
        c2 = C(2)
        c3 = C(3)
        vereq(c1, 1)
        c = {1: c1, 2: c2, 3: c3, }
        for x in (1, 2, 3):
            for y in (1, 2, 3):
                verify((cmp(c[x], c[y]) == cmp(x, y)), ('x=%d, y=%d' % (x, y)))
                for op in ('<', '<=', '==', '!=', '>', '>='):
                    verify((eval(('c[x] %s c[y]' % op)) == eval(('x %s y' % op))), ('x=%d, y=%d' % (x, y)))
                verify((cmp(c[x], y) == cmp(x, y)), ('x=%d, y=%d' % (x, y)))
                verify((cmp(x, c[y]) == cmp(x, y)), ('x=%d, y=%d' % (x, y)))
