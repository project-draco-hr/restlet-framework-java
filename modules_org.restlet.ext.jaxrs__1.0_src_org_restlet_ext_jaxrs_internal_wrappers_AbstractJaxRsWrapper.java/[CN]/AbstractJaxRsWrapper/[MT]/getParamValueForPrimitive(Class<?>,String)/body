{
  try {
    if (paramClass == Integer.TYPE)     return new Integer(paramValue);
    if (paramClass == Double.TYPE)     return new Double(paramValue);
    if (paramClass == Float.TYPE)     return new Float(paramValue);
    if (paramClass == Byte.TYPE)     return new Byte(paramValue);
    if (paramClass == Long.TYPE)     return new Long(paramValue);
    if (paramClass == Short.TYPE)     return new Short(paramValue);
    if (paramClass == Character.TYPE) {
      if (paramValue.length() == 1)       return paramValue.charAt(0);
      throw ConvertParameterException.primitive(paramClass,paramValue,null);
    }
    if (paramClass == Boolean.TYPE) {
      if (paramValue.equalsIgnoreCase("true"))       return Boolean.TRUE;
      if (paramValue.equalsIgnoreCase("false"))       return Boolean.FALSE;
      throw ConvertParameterException.primitive(paramClass,paramValue,null);
    }
  }
 catch (  IllegalArgumentException e) {
    throw ConvertParameterException.primitive(paramClass,paramValue,e);
  }
  String warning;
  if (paramClass == Void.TYPE)   warning="an object should be converted to a void; but this could not be here";
 else   warning="an object should be converted to a " + paramClass + ", but here are only primitives allowed.";
  Logger.getAnonymousLogger().warning(warning);
  ResponseBuilder rb=javax.ws.rs.core.Response.serverError();
  rb.entity(warning);
  throw new WebApplicationException(rb.build());
}
