{
  super(helper,method,requestUri);
  this.clientHelper=helper;
  if (requestUri.startsWith("http")) {
    if (method.equalsIgnoreCase(Method.GET.getName())) {
      this.httpRequest=new HttpGet(requestUri);
    }
 else     if (method.equalsIgnoreCase(Method.POST.getName())) {
      this.httpRequest=new HttpPost(requestUri);
    }
 else     if (method.equalsIgnoreCase(Method.PUT.getName())) {
      this.httpRequest=new HttpPut(requestUri);
    }
 else     if (method.equalsIgnoreCase(Method.HEAD.getName())) {
      this.httpRequest=new HttpHead(requestUri);
    }
 else     if (method.equalsIgnoreCase(Method.DELETE.getName())) {
      this.httpRequest=new HttpDelete(requestUri);
    }
 else     if (method.equalsIgnoreCase(Method.OPTIONS.getName())) {
      this.httpRequest=new HttpOptions(requestUri);
    }
 else     if (method.equalsIgnoreCase(Method.TRACE.getName())) {
      this.httpRequest=new HttpTrace(requestUri);
    }
 else {
      this.httpRequest=new HttpEntityEnclosingRequestBase(){
        @Override public String getMethod(){
          return method;
        }
        @Override public URI getURI(){
          try {
            return new URI(requestUri);
          }
 catch (          URISyntaxException e) {
            getLogger().log(Level.WARNING,"Invalid URI syntax",e);
            return null;
          }
        }
      }
;
    }
    this.responseHeadersAdded=false;
    setConfidential(this.httpRequest.getURI().getScheme().equalsIgnoreCase(Protocol.HTTPS.getSchemeName()));
  }
 else {
    throw new IllegalArgumentException("Only HTTP or HTTPS resource URIs are allowed here");
  }
}
