def goahead(self, end):
    rawdata = self.rawdata
    i = 0
    n = len(rawdata)
    while (i < n):
        match = self.interesting.search(rawdata, i)
        if match:
            j = match.start()
        else:
            j = n
        if (i < j):
            self.handle_data(rawdata[i:j])
        i = self.updatepos(i, j)
        if (i == n):
            break
        startswith = rawdata.startswith
        if startswith('<', i):
            if starttagopen.match(rawdata, i):
                k = self.parse_starttag(i)
            elif startswith('</', i):
                k = self.parse_endtag(i)
            elif startswith('<!--', i):
                k = self.parse_comment(i)
            elif startswith('<?', i):
                k = self.parse_pi(i)
            elif startswith('<!', i):
                k = self.parse_declaration(i)
            elif ((i + 1) < n):
                self.handle_data('<')
                k = (i + 1)
            else:
                break
            if (k < 0):
                if end:
                    self.error('EOF in middle of construct')
                break
            i = self.updatepos(i, k)
        elif startswith('&#', i):
            match = charref.match(rawdata, i)
            if match:
                name = match.group()[2:(-1)]
                self.handle_charref(name)
                k = match.end()
                if (not startswith(';', (k - 1))):
                    k = (k - 1)
                i = self.updatepos(i, k)
                continue
            else:
                break
        elif startswith('&', i):
            match = entityref.match(rawdata, i)
            if match:
                name = match.group(1)
                self.handle_entityref(name)
                k = match.end()
                if (not startswith(';', (k - 1))):
                    k = (k - 1)
                i = self.updatepos(i, k)
                continue
            match = incomplete.match(rawdata, i)
            if match:
                if (end and (match.group() == rawdata[i:])):
                    self.error('EOF in middle of entity or char ref')
                break
            elif ((i + 1) < n):
                self.handle_data('&')
                i = self.updatepos(i, (i + 1))
            else:
                break
        else:
            assert 0, 'interesting.search() lied'
    if (end and (i < n)):
        self.handle_data(rawdata[i:n])
        i = self.updatepos(i, n)
    self.rawdata = rawdata[i:]
