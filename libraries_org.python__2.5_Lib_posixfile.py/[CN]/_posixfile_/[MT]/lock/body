def lock(self, how, *args):
    import struct, fcntl
    if ('w' in how):
        l_type = fcntl.F_WRLCK
    elif ('r' in how):
        l_type = fcntl.F_RDLCK
    elif ('u' in how):
        l_type = fcntl.F_UNLCK
    else:
        raise TypeError, 'no type of lock specified'
    if ('|' in how):
        cmd = fcntl.F_SETLKW
    elif ('?' in how):
        cmd = fcntl.F_GETLK
    else:
        cmd = fcntl.F_SETLK
    l_whence = 0
    l_start = 0
    l_len = 0
    if (len(args) == 1):
        l_len = args[0]
    elif (len(args) == 2):
        (l_len, l_start) = args
    elif (len(args) == 3):
        (l_len, l_start, l_whence) = args
    elif (len(args) > 3):
        raise TypeError, 'too many arguments'
    import sys, os
    if (sys.platform in ('netbsd1', 'openbsd2', 'freebsd2', 'freebsd3', 'freebsd4', 'freebsd5', 'freebsd6', 'freebsd7', 'bsdos2', 'bsdos3', 'bsdos4')):
        flock = struct.pack('lxxxxlxxxxlhh', l_start, l_len, os.getpid(), l_type, l_whence)
    elif (sys.platform in ('aix3', 'aix4')):
        flock = struct.pack('hhlllii', l_type, l_whence, l_start, l_len, 0, 0, 0)
    else:
        flock = struct.pack('hhllhh', l_type, l_whence, l_start, l_len, 0, 0)
    flock = fcntl.fcntl(self._file_.fileno(), cmd, flock)
    if ('?' in how):
        if (sys.platform in ('netbsd1', 'openbsd2', 'freebsd2', 'freebsd3', 'freebsd4', 'freebsd5', 'bsdos2', 'bsdos3', 'bsdos4')):
            (l_start, l_len, l_pid, l_type, l_whence) = struct.unpack('lxxxxlxxxxlhh', flock)
        elif (sys.platform in ('aix3', 'aix4')):
            (l_type, l_whence, l_start, l_len, l_sysid, l_pid, l_vfs) = struct.unpack('hhlllii', flock)
        elif (sys.platform == 'linux2'):
            (l_type, l_whence, l_start, l_len, l_pid, l_sysid) = struct.unpack('hhllhh', flock)
        else:
            (l_type, l_whence, l_start, l_len, l_sysid, l_pid) = struct.unpack('hhllhh', flock)
        if (l_type != fcntl.F_UNLCK):
            if (l_type == fcntl.F_RDLCK):
                return ('r', l_len, l_start, l_whence, l_pid)
            else:
                return ('w', l_len, l_start, l_whence, l_pid)
