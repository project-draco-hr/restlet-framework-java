"Extended file operations available in POSIX.\n\nf = posixfile.open(filename, [mode, [bufsize]])\n      will create a new posixfile object\n\nf = posixfile.fileopen(fileobject)\n      will create a posixfile object from a builtin file object\n\nf.file()\n      will return the original builtin file object\n\nf.dup()\n      will return a new file object based on a new filedescriptor\n\nf.dup2(fd)\n      will return a new file object based on the given filedescriptor\n\nf.flags(mode)\n      will turn on the associated flag (merge)\n      mode can contain the following characters:\n\n  (character representing a flag)\n      a       append only flag\n      c       close on exec flag\n      n       no delay flag\n      s       synchronization flag\n  (modifiers)\n      !       turn flags 'off' instead of default 'on'\n      =       copy flags 'as is' instead of default 'merge'\n      ?       return a string in which the characters represent the flags\n              that are set\n\n      note: - the '!' and '=' modifiers are mutually exclusive.\n            - the '?' modifier will return the status of the flags after they\n              have been changed by other characters in the mode string\n\nf.lock(mode [, len [, start [, whence]]])\n      will (un)lock a region\n      mode can contain the following characters:\n\n  (character representing type of lock)\n      u       unlock\n      r       read lock\n      w       write lock\n  (modifiers)\n      |       wait until the lock can be granted\n      ?       return the first lock conflicting with the requested lock\n              or 'None' if there is no conflict. The lock returned is in the\n              format (mode, len, start, whence, pid) where mode is a\n              character representing the type of lock ('r' or 'w')\n\n      note: - the '?' modifier prevents a region from being locked; it is\n              query only\n"
SEEK_SET = 0
SEEK_CUR = 1
SEEK_END = 2
