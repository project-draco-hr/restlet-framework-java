'Class for printing reports on profiled python code.'
import os
import time
import marshal
import re
__all__ = ['Stats']
if (__name__ == '__main__'):
    import cmd
    try:
        import readline
    except ImportError:
        pass


    class ProfileBrowser(cmd.Cmd):

        def __init__(self, profile=None):
            cmd.Cmd.__init__(self)
            self.prompt = '% '
            if profile:
                self.stats = Stats(profile)
            else:
                self.stats = None

        def generic(self, fn, line):
            args = line.split()
            processed = []
            for term in args:
                try:
                    processed.append(int(term))
                    continue
                except ValueError:
                    pass
                try:
                    frac = float(term)
                    if ((frac > 1) or (frac < 0)):
                        print 'Fraction argument mus be in [0, 1]'
                        continue
                    processed.append(frac)
                    continue
                except ValueError:
                    pass
                processed.append(term)
            if self.stats:
                apply(getattr(self.stats, fn), processed)
            else:
                print 'No statistics object is loaded.'
            return 0

        def generic_help(self):
            print 'Arguments may be:'
            print '* An integer maximum number of entries to print.'
            print '* A decimal fractional number between 0 and 1, controlling'
            print '  what fraction of selected entries to print.'
            print '* A regular expression; only entries with function names'
            print '  that match it are printed.'

        def do_add(self, line):
            self.stats.add(line)
            return 0

        def help_add(self):
            print 'Add profile info from given file to current statistics object.'

        def do_callees(self, line):
            return self.generic('print_callees', line)

        def help_callees(self):
            print 'Print callees statistics from the current stat object.'
            self.generic_help()

        def do_callers(self, line):
            return self.generic('print_callers', line)

        def help_callers(self):
            print 'Print callers statistics from the current stat object.'
            self.generic_help()

        def do_EOF(self, line):
            print ''
            return 1

        def help_EOF(self):
            print 'Leave the profile brower.'

        def do_quit(self, line):
            return 1

        def help_quit(self):
            print 'Leave the profile brower.'

        def do_read(self, line):
            if line:
                try:
                    self.stats = Stats(line)
                except IOError as args:
                    print args[1]
                    return
                self.prompt = (line + '% ')
            elif (len(self.prompt) > 2):
                line = self.prompt[(-2):]
            else:
                print 'No statistics object is current -- cannot reload.'
            return 0

        def help_read(self):
            print 'Read in profile data from a specified file.'

        def do_reverse(self, line):
            self.stats.reverse_order()
            return 0

        def help_reverse(self):
            print 'Reverse the sort order of the profiling report.'

        def do_sort(self, line):
            abbrevs = self.stats.get_sort_arg_defs().keys()
            if (line and (not filter((lambda x, a=abbrevs: (x not in a)), line.split()))):
                apply(self.stats.sort_stats, line.split())
            else:
                print 'Valid sort keys (unique prefixes are accepted):'
                for (key, value) in Stats.sort_arg_dict_default.items():
                    print ('%s -- %s' % (key, value[1]))
            return 0

        def help_sort(self):
            print 'Sort profile data according to specified keys.'
            print "(Typing `sort' without arguments lists valid keys.)"

        def complete_sort(self, text, *args):
            return [a for a in Stats.sort_arg_dict_default.keys() if a.startswith(text)]

        def do_stats(self, line):
            return self.generic('print_stats', line)

        def help_stats(self):
            print 'Print statistics from the current stat object.'
            self.generic_help()

        def do_strip(self, line):
            self.stats.strip_dirs()
            return 0

        def help_strip(self):
            print 'Strip leading path information from filenames in the report.'

        def postcmd(self, stop, line):
            if stop:
                return stop
            return None
    import sys
    print 'Welcome to the profile statistics browser.'
    if (len(sys.argv) > 1):
        initprofile = sys.argv[1]
    else:
        initprofile = None
    try:
        ProfileBrowser(initprofile).cmdloop()
        print 'Goodbye.'
    except KeyboardInterrupt:
        pass
