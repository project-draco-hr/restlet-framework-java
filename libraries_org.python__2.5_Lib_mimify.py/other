'Mimification and unmimification of mail messages.\n\nDecode quoted-printable parts of a mail message or encode using\nquoted-printable.\n\nUsage:\n        mimify(input, output)\n        unmimify(input, output, decode_base64 = 0)\nto encode and decode respectively.  Input and output may be the name\nof a file or an open file object.  Only a readline() method is used\non the input file, only a write() method is used on the output file.\nWhen using file names, the input and output file names may be the\nsame.\n\nInteractive usage:\n        mimify.py -e [infile [outfile]]\n        mimify.py -d [infile [outfile]]\nto encode and decode respectively.  Infile defaults to standard\ninput and outfile to standard output.\n'
MAXLEN = 200
CHARSET = 'ISO-8859-1'
QUOTE = '> '
import re
__all__ = ['mimify', 'unmimify', 'mime_encode_header', 'mime_decode_header']
qp = re.compile('^content-transfer-encoding:\\s*quoted-printable', re.I)
base64_re = re.compile('^content-transfer-encoding:\\s*base64', re.I)
mp = re.compile('^content-type:.*multipart/.*boundary="?([^;"\n]*)', (re.I | re.S))
chrset = re.compile('^(content-type:.*charset=")(us-ascii|iso-8859-[0-9]+)(".*)', (re.I | re.S))
he = re.compile('^-*\n')
mime_code = re.compile('=([0-9a-f][0-9a-f])', re.I)
mime_head = re.compile('=\\?iso-8859-1\\?q\\?([^? \t\n]+)\\?=', re.I)
repl = re.compile('^subject:\\s+re: ', re.I)
mime_char = re.compile('[=\x7f-\xff]')
mime_header_char = re.compile('[=?\x7f-\xff]')
mime_header = re.compile('([ \t(]|^)([-a-zA-Z0-9_+]*[\x7f-\xff][-a-zA-Z0-9_+\x7f-\xff]*)(?=[ \t)]|\n)')
mv = re.compile('^mime-version:', re.I)
cte = re.compile('^content-transfer-encoding:', re.I)
iso_char = re.compile('[\x7f-\xff]')
import sys
if ((__name__ == '__main__') or ((len(sys.argv) > 0) and (sys.argv[0] == 'mimify'))):
    import getopt
    usage = 'Usage: mimify [-l len] -[ed] [infile [outfile]]'
    decode_base64 = 0
    (opts, args) = getopt.getopt(sys.argv[1:], 'l:edb')
    if (len(args) not in (0, 1, 2)):
        print usage
        sys.exit(1)
    if (((('-e', '') in opts) == (('-d', '') in opts)) or ((('-b', '') in opts) and (('-d', '') not in opts))):
        print usage
        sys.exit(1)
    for (o, a) in opts:
        if (o == '-e'):
            encode = mimify
        elif (o == '-d'):
            encode = unmimify
        elif (o == '-l'):
            try:
                MAXLEN = int(a)
            except (ValueError, OverflowError):
                print usage
                sys.exit(1)
        elif (o == '-b'):
            decode_base64 = 1
    if (len(args) == 0):
        encode_args = (sys.stdin, sys.stdout)
    elif (len(args) == 1):
        encode_args = (args[0], sys.stdout)
    else:
        encode_args = (args[0], args[1])
    if decode_base64:
        encode_args = (encode_args + (decode_base64,))
    encode(*encode_args)
