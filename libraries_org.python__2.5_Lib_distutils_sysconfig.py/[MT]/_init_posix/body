def _init_posix():
    'Initialize the module as appropriate for POSIX systems.'
    g = {}
    try:
        filename = get_makefile_filename()
        parse_makefile(filename, g)
    except IOError as msg:
        my_msg = ('invalid Python installation: unable to open %s' % filename)
        if hasattr(msg, 'strerror'):
            my_msg = (my_msg + (' (%s)' % msg.strerror))
        raise DistutilsPlatformError(my_msg)
    try:
        filename = get_config_h_filename()
        parse_config_h(file(filename), g)
    except IOError as msg:
        my_msg = ('invalid Python installation: unable to open %s' % filename)
        if hasattr(msg, 'strerror'):
            my_msg = (my_msg + (' (%s)' % msg.strerror))
        raise DistutilsPlatformError(my_msg)
    if ((sys.platform == 'darwin') and g.has_key('MACOSX_DEPLOYMENT_TARGET')):
        cfg_target = g['MACOSX_DEPLOYMENT_TARGET']
        cur_target = os.getenv('MACOSX_DEPLOYMENT_TARGET', '')
        if (cur_target == ''):
            cur_target = cfg_target
            os.putenv('MACOSX_DEPLOYMENT_TARGET', cfg_target)
        elif (map(int, cfg_target.split('.')) > map(int, cur_target.split('.'))):
            my_msg = ('$MACOSX_DEPLOYMENT_TARGET mismatch: now "%s" but "%s" during configure' % (cur_target, cfg_target))
            raise DistutilsPlatformError(my_msg)
    if python_build:
        g['LDSHARED'] = g['BLDSHARED']
    elif (get_python_version() < '2.1'):
        if (sys.platform == 'aix4'):
            python_lib = get_python_lib(standard_lib=1)
            ld_so_aix = os.path.join(python_lib, 'config', 'ld_so_aix')
            python_exp = os.path.join(python_lib, 'config', 'python.exp')
            g['LDSHARED'] = ('%s %s -bI:%s' % (ld_so_aix, g['CC'], python_exp))
        elif (sys.platform == 'beos'):
            python_lib = get_python_lib(standard_lib=1)
            linkerscript_path = string.split(g['LDSHARED'])[0]
            linkerscript_name = os.path.basename(linkerscript_path)
            linkerscript = os.path.join(python_lib, 'config', linkerscript_name)
            g['LDSHARED'] = ('%s -L%s/lib -lpython%s' % (linkerscript, PREFIX, get_python_version()))
    global _config_vars
    _config_vars = g
