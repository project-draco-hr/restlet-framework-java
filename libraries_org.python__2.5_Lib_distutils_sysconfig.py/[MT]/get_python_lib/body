def get_python_lib(plat_specific=0, standard_lib=0, prefix=None):
    "Return the directory containing the Python library (standard or\n    site additions).\n\n    If 'plat_specific' is true, return the directory containing\n    platform-specific modules, i.e. any module from a non-pure-Python\n    module distribution; otherwise, return the platform-shared library\n    directory.  If 'standard_lib' is true, return the directory\n    containing standard Python library modules; otherwise, return the\n    directory for site-specific modules.\n\n    If 'prefix' is supplied, use it instead of sys.prefix or\n    sys.exec_prefix -- i.e., ignore 'plat_specific'.\n    "
    if (prefix is None):
        prefix = ((plat_specific and EXEC_PREFIX) or PREFIX)
    if (os.name == 'posix'):
        libpython = os.path.join(prefix, 'lib', ('python' + get_python_version()))
        if standard_lib:
            return libpython
        else:
            return os.path.join(libpython, 'site-packages')
    elif (os.name == 'nt'):
        if standard_lib:
            return os.path.join(prefix, 'Lib')
        elif (get_python_version() < '2.2'):
            return prefix
        else:
            return os.path.join(PREFIX, 'Lib', 'site-packages')
    elif (os.name == 'mac'):
        if plat_specific:
            if standard_lib:
                return os.path.join(prefix, 'Lib', 'lib-dynload')
            else:
                return os.path.join(prefix, 'Lib', 'site-packages')
        elif standard_lib:
            return os.path.join(prefix, 'Lib')
        else:
            return os.path.join(prefix, 'Lib', 'site-packages')
    elif ((os.name == 'os2') or (os.name == 'java')):
        if standard_lib:
            return os.path.join(PREFIX, 'Lib')
        else:
            return os.path.join(PREFIX, 'Lib', 'site-packages')
    else:
        raise DistutilsPlatformError(("I don't know where Python installs its library on platform '%s'" % os.name))
