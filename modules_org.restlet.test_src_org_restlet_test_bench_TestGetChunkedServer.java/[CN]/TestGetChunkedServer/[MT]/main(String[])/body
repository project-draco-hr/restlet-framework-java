{
  ConnectorHelper<Server> helper=null;
  helper=new org.restlet.ext.netty.HttpServerHelper(null);
  Engine.getInstance().getRegisteredServers().add(0,helper);
  Server server=new Server(Protocol.HTTP,8554,new Restlet(){
    @Override public void handle(    Request request,    Response response){
      try {
        FileRepresentation fr=new FileRepresentation("file:///c:/TEST/restlet-jse-2.0.5-ff.zip",MediaType.APPLICATION_ZIP);
        System.out.println("Size sent: " + fr.getSize());
        InputRepresentation ir=new InputRepresentation(fr.getStream(),fr.getMediaType());
        response.setEntity(ir);
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
);
  server.getContext().getParameters().add("tracing","false");
  server.getContext().getParameters().add("minThreads","1");
  server.getContext().getParameters().add("lowThreads","30");
  server.getContext().getParameters().add("maxThreads","40");
  server.getContext().getParameters().add("maxQueued","0");
  server.getContext().getParameters().add("directBuffers","false");
  server.getContext().getParameters().add("workerThreads","true");
  server.getContext().getParameters().add("pooledConnections","true");
  server.getContext().getParameters().add("maxIoIdleTimeMs","3000000");
  server.start();
}
