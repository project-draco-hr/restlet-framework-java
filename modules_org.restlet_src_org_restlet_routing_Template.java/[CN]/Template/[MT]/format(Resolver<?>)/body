{
  final StringBuilder result=new StringBuilder();
  StringBuilder varBuffer=null;
  char next;
  boolean inVariable=false;
  final int patternLength=getPattern().length();
  for (int i=0; i < patternLength; i++) {
    next=getPattern().charAt(i);
    if (inVariable) {
      if (Reference.isUnreserved(next)) {
        varBuffer.append(next);
      }
 else       if (next == '}') {
        if (varBuffer.length() == 0) {
          getLogger().warning("Empty pattern variables are not allowed : " + this.regexPattern);
        }
 else {
          final String varName=varBuffer.toString();
          Object varValue=resolver.resolve(varName);
          Variable var=getVariables().get(varName);
          if (varValue == null) {
            if (var == null) {
              var=getDefaultVariable();
            }
            if (var != null) {
              varValue=var.getDefaultValue();
            }
          }
          String varValueString=(varValue == null) ? null : varValue.toString();
          if (this.encodeVariables) {
            if (var != null) {
              result.append(var.encode(varValueString));
            }
 else {
              result.append(Reference.encode(varValueString));
            }
          }
 else {
            if ((var != null) && var.isEncodedOnFormat()) {
              result.append(Reference.encode(varValueString));
            }
 else {
              result.append(varValueString);
            }
          }
          varBuffer=new StringBuilder();
        }
        inVariable=false;
      }
 else {
        getLogger().warning("An invalid character was detected inside a pattern variable : " + this.regexPattern);
      }
    }
 else {
      if (next == '{') {
        inVariable=true;
        varBuffer=new StringBuilder();
      }
 else       if (next == '}') {
        getLogger().warning("An invalid character was detected inside a pattern variable : " + this.regexPattern);
      }
 else {
        result.append(next);
      }
    }
  }
  return result.toString();
}
