{
  SslContextFactory result=(SslContextFactory)((helper.getContext() == null) ? null : helper.getContext()).getAttributes().get("sslContextFactory");
  if (result == null) {
    String[] sslContextFactoryNames=helper.getHelpedParameters().getValuesArray("sslContextFactory");
    if (sslContextFactoryNames != null) {
      for (      String sslContextFactoryName : sslContextFactoryNames) {
        try {
          Class<? extends SslContextFactory> sslContextFactoryClass=Class.forName(sslContextFactoryName).asSubclass(SslContextFactory.class);
          result=sslContextFactoryClass.newInstance();
          result.init(helper.getHelpedParameters());
        }
 catch (        ClassNotFoundException e) {
          helper.getLogger().log(Level.WARNING,"Unable to find SslContextFactory class: " + sslContextFactoryName,e);
        }
catch (        ClassCastException e) {
          helper.getLogger().log(Level.WARNING,"Class " + sslContextFactoryName + " does not implement SslContextFactory.",e);
        }
catch (        InstantiationException e) {
          helper.getLogger().log(Level.WARNING,"Could not instantiate class " + sslContextFactoryName + " with default constructor.",e);
        }
catch (        IllegalAccessException e) {
          helper.getLogger().log(Level.WARNING,"Illegal access when instantiating class " + sslContextFactoryName + ".",e);
        }
      }
    }
  }
  return result;
}
