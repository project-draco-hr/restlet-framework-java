{
  Integer keySize=keySizesCache.get(sslCipherSuite);
  if (keySize == null) {
    final int encAlgorithmIndex=sslCipherSuite.indexOf("WITH_");
    if (encAlgorithmIndex >= 0) {
      final String encAlgorithm=sslCipherSuite.substring(encAlgorithmIndex + 5);
      if (encAlgorithm != null) {
        if (encAlgorithm.startsWith("NULL_")) {
          keySize=Integer.valueOf(0);
        }
 else         if (encAlgorithm.startsWith("IDEA_CBC_")) {
          keySize=Integer.valueOf(128);
        }
 else         if (encAlgorithm.startsWith("RC2_CBC_40_")) {
          keySize=Integer.valueOf(40);
        }
 else         if (encAlgorithm.startsWith("RC4_40_")) {
          keySize=Integer.valueOf(40);
        }
 else         if (encAlgorithm.startsWith("RC4_128_")) {
          keySize=Integer.valueOf(128);
        }
 else         if (encAlgorithm.startsWith("DES40_CBC_")) {
          keySize=Integer.valueOf(40);
        }
 else         if (encAlgorithm.startsWith("DES_CBC_")) {
          keySize=Integer.valueOf(56);
        }
 else         if (encAlgorithm.startsWith("3DES_EDE_CBC_")) {
          keySize=Integer.valueOf(168);
        }
 else {
          final StringTokenizer st=new StringTokenizer(encAlgorithm,"_");
          while (st.hasMoreTokens()) {
            try {
              keySize=Integer.valueOf(st.nextToken());
              break;
            }
 catch (            NumberFormatException e) {
            }
          }
        }
        if (keySize != null) {
          keySizesCache.put(sslCipherSuite,keySize);
        }
      }
    }
  }
  return keySize;
}
