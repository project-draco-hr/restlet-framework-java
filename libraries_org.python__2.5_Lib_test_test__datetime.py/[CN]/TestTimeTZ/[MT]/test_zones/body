def test_zones(self):
    est = FixedOffset((-300), 'EST', 1)
    utc = FixedOffset(0, 'UTC', (-2))
    met = FixedOffset(60, 'MET', 3)
    t1 = time(7, 47, tzinfo=est)
    t2 = time(12, 47, tzinfo=utc)
    t3 = time(13, 47, tzinfo=met)
    t4 = time(microsecond=40)
    t5 = time(microsecond=40, tzinfo=utc)
    self.assertEqual(t1.tzinfo, est)
    self.assertEqual(t2.tzinfo, utc)
    self.assertEqual(t3.tzinfo, met)
    self.failUnless((t4.tzinfo is None))
    self.assertEqual(t5.tzinfo, utc)
    self.assertEqual(t1.utcoffset(), timedelta(minutes=(-300)))
    self.assertEqual(t2.utcoffset(), timedelta(minutes=0))
    self.assertEqual(t3.utcoffset(), timedelta(minutes=60))
    self.failUnless((t4.utcoffset() is None))
    self.assertRaises(TypeError, t1.utcoffset, 'no args')
    self.assertEqual(t1.tzname(), 'EST')
    self.assertEqual(t2.tzname(), 'UTC')
    self.assertEqual(t3.tzname(), 'MET')
    self.failUnless((t4.tzname() is None))
    self.assertRaises(TypeError, t1.tzname, 'no args')
    self.assertEqual(t1.dst(), timedelta(minutes=1))
    self.assertEqual(t2.dst(), timedelta(minutes=(-2)))
    self.assertEqual(t3.dst(), timedelta(minutes=3))
    self.failUnless((t4.dst() is None))
    self.assertRaises(TypeError, t1.dst, 'no args')
    self.assertEqual(hash(t1), hash(t2))
    self.assertEqual(hash(t1), hash(t3))
    self.assertEqual(hash(t2), hash(t3))
    self.assertEqual(t1, t2)
    self.assertEqual(t1, t3)
    self.assertEqual(t2, t3)
    self.assertRaises(TypeError, (lambda : (t4 == t5)))
    self.assertRaises(TypeError, (lambda : (t4 < t5)))
    self.assertRaises(TypeError, (lambda : (t5 < t4)))
    self.assertEqual(str(t1), '07:47:00-05:00')
    self.assertEqual(str(t2), '12:47:00+00:00')
    self.assertEqual(str(t3), '13:47:00+01:00')
    self.assertEqual(str(t4), '00:00:00.000040')
    self.assertEqual(str(t5), '00:00:00.000040+00:00')
    self.assertEqual(t1.isoformat(), '07:47:00-05:00')
    self.assertEqual(t2.isoformat(), '12:47:00+00:00')
    self.assertEqual(t3.isoformat(), '13:47:00+01:00')
    self.assertEqual(t4.isoformat(), '00:00:00.000040')
    self.assertEqual(t5.isoformat(), '00:00:00.000040+00:00')
    d = 'datetime.time'
    self.assertEqual(repr(t1), (d + '(7, 47, tzinfo=est)'))
    self.assertEqual(repr(t2), (d + '(12, 47, tzinfo=utc)'))
    self.assertEqual(repr(t3), (d + '(13, 47, tzinfo=met)'))
    self.assertEqual(repr(t4), (d + '(0, 0, 0, 40)'))
    self.assertEqual(repr(t5), (d + '(0, 0, 0, 40, tzinfo=utc)'))
    self.assertEqual(t1.strftime('%H:%M:%S %%Z=%Z %%z=%z'), '07:47:00 %Z=EST %z=-0500')
    self.assertEqual(t2.strftime('%H:%M:%S %Z %z'), '12:47:00 UTC +0000')
    self.assertEqual(t3.strftime('%H:%M:%S %Z %z'), '13:47:00 MET +0100')
    yuck = FixedOffset((-1439), '%z %Z %%z%%Z')
    t1 = time(23, 59, tzinfo=yuck)
    self.assertEqual(t1.strftime("%H:%M %%Z='%Z' %%z='%z'"), "23:59 %Z='%z %Z %%z%%Z' %z='-2359'")


    class Badtzname(tzinfo):

        def tzname(self, dt):
            return 42
    t = time(2, 3, 4, tzinfo=Badtzname())
    self.assertEqual(t.strftime('%H:%M:%S'), '02:03:04')
    self.assertRaises(TypeError, t.strftime, '%Z')
