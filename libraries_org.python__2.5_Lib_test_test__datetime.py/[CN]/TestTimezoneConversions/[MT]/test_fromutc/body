def test_fromutc(self):
    self.assertRaises(TypeError, Eastern.fromutc)
    now = datetime.utcnow().replace(tzinfo=utc_real)
    self.assertRaises(ValueError, Eastern.fromutc, now)
    now = now.replace(tzinfo=Eastern)
    enow = Eastern.fromutc(now)
    self.assertEqual(enow.tzinfo, Eastern)
    self.assertRaises(TypeError, Eastern.fromutc, now, now)
    self.assertRaises(TypeError, Eastern.fromutc, date.today())


    class FauxUSTimeZone(USTimeZone):

        def fromutc(self, dt):
            return (dt + self.stdoffset)
    FEastern = FauxUSTimeZone((-5), 'FEastern', 'FEST', 'FEDT')
    start = self.dston.replace(hour=4, tzinfo=Eastern)
    fstart = start.replace(tzinfo=FEastern)
    for wall in (23, 0, 1, 3, 4, 5):
        expected = start.replace(hour=wall)
        if (wall == 23):
            expected -= timedelta(days=1)
        got = Eastern.fromutc(start)
        self.assertEqual(expected, got)
        expected = (fstart + FEastern.stdoffset)
        got = FEastern.fromutc(fstart)
        self.assertEqual(expected, got)
        got = fstart.replace(tzinfo=utc_real).astimezone(FEastern)
        self.assertEqual(expected, got)
        start += HOUR
        fstart += HOUR
    start = self.dstoff.replace(hour=4, tzinfo=Eastern)
    fstart = start.replace(tzinfo=FEastern)
    for wall in (0, 1, 1, 2, 3, 4):
        expected = start.replace(hour=wall)
        got = Eastern.fromutc(start)
        self.assertEqual(expected, got)
        expected = (fstart + FEastern.stdoffset)
        got = FEastern.fromutc(fstart)
        self.assertEqual(expected, got)
        got = fstart.replace(tzinfo=utc_real).astimezone(FEastern)
        self.assertEqual(expected, got)
        start += HOUR
        fstart += HOUR
