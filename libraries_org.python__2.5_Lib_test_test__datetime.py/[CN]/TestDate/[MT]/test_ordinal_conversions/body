def test_ordinal_conversions(self):
    for (y, m, d, n) in [(1, 1, 1, 1), (1, 12, 31, 365), (2, 1, 1, 366), (1945, 11, 12, 710347)]:
        d = self.theclass(y, m, d)
        self.assertEqual(n, d.toordinal())
        fromord = self.theclass.fromordinal(n)
        self.assertEqual(d, fromord)
        if hasattr(fromord, 'hour'):
            self.assertEqual(fromord.hour, 0)
            self.assertEqual(fromord.minute, 0)
            self.assertEqual(fromord.second, 0)
            self.assertEqual(fromord.microsecond, 0)
    for year in xrange(MINYEAR, (MAXYEAR + 1), 7):
        d = self.theclass(year, 1, 1)
        n = d.toordinal()
        d2 = self.theclass.fromordinal(n)
        self.assertEqual(d, d2)
        if (year > 1):
            d = self.theclass.fromordinal((n - 1))
            d2 = self.theclass((year - 1), 12, 31)
            self.assertEqual(d, d2)
            self.assertEqual(d2.toordinal(), (n - 1))
    dim = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
    for (year, isleap) in ((2000, True), (2002, False)):
        n = self.theclass(year, 1, 1).toordinal()
        for (month, maxday) in zip(range(1, 13), dim):
            if ((month == 2) and isleap):
                maxday += 1
            for day in range(1, (maxday + 1)):
                d = self.theclass(year, month, day)
                self.assertEqual(d.toordinal(), n)
                self.assertEqual(d, self.theclass.fromordinal(n))
                n += 1
