def test_compare(self):
    t1 = self.theclass(2, 3, 4)
    t2 = self.theclass(2, 3, 4)
    self.failUnless((t1 == t2))
    self.failUnless((t1 <= t2))
    self.failUnless((t1 >= t2))
    self.failUnless((not (t1 != t2)))
    self.failUnless((not (t1 < t2)))
    self.failUnless((not (t1 > t2)))
    self.assertEqual(cmp(t1, t2), 0)
    self.assertEqual(cmp(t2, t1), 0)
    for args in ((3, 3, 3), (2, 4, 4), (2, 3, 5)):
        t2 = self.theclass(*args)
        self.failUnless((t1 < t2))
        self.failUnless((t2 > t1))
        self.failUnless((t1 <= t2))
        self.failUnless((t2 >= t1))
        self.failUnless((t1 != t2))
        self.failUnless((t2 != t1))
        self.failUnless((not (t1 == t2)))
        self.failUnless((not (t2 == t1)))
        self.failUnless((not (t1 > t2)))
        self.failUnless((not (t2 < t1)))
        self.failUnless((not (t1 >= t2)))
        self.failUnless((not (t2 <= t1)))
        self.assertEqual(cmp(t1, t2), (-1))
        self.assertEqual(cmp(t2, t1), 1)
    for badarg in OTHERSTUFF:
        self.assertEqual((t1 == badarg), False)
        self.assertEqual((t1 != badarg), True)
        self.assertEqual((badarg == t1), False)
        self.assertEqual((badarg != t1), True)
        self.assertRaises(TypeError, (lambda : (t1 < badarg)))
        self.assertRaises(TypeError, (lambda : (t1 > badarg)))
        self.assertRaises(TypeError, (lambda : (t1 >= badarg)))
        self.assertRaises(TypeError, (lambda : (badarg <= t1)))
        self.assertRaises(TypeError, (lambda : (badarg < t1)))
        self.assertRaises(TypeError, (lambda : (badarg > t1)))
        self.assertRaises(TypeError, (lambda : (badarg >= t1)))
