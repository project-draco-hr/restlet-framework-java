def test_even_more_compare(self):
    t1 = self.theclass(1, 1, 1, tzinfo=FixedOffset(1439, ''))
    t2 = self.theclass(MAXYEAR, 12, 31, 23, 59, 59, 999999, tzinfo=FixedOffset((-1439), ''))
    self.failUnless((t1 < t2))
    self.failUnless((t1 != t2))
    self.failUnless((t2 > t1))
    self.failUnless((t1 == t1))
    self.failUnless((t2 == t2))
    t1 = self.theclass(1, 12, 31, 23, 59, tzinfo=FixedOffset(1, ''))
    t2 = self.theclass(2, 1, 1, 3, 13, tzinfo=FixedOffset((((3 * 60) + 13) + 2), ''))
    self.assertEqual(t1, t2)
    t1 = self.theclass(1, 12, 31, 23, 59, tzinfo=FixedOffset(0, ''))
    self.failUnless((t1 > t2))
    t1 = self.theclass(1, 12, 31, 23, 59, tzinfo=FixedOffset(2, ''))
    self.failUnless((t1 < t2))
    t1 = self.theclass(1, 12, 31, 23, 59, tzinfo=FixedOffset(1, ''), second=1)
    self.failUnless((t1 > t2))
    t1 = self.theclass(1, 12, 31, 23, 59, tzinfo=FixedOffset(1, ''), microsecond=1)
    self.failUnless((t1 > t2))
    t2 = self.theclass.min
    self.assertRaises(TypeError, (lambda : (t1 == t2)))
    self.assertEqual(t2, t2)


    class Naive(tzinfo):

        def utcoffset(self, dt):
            return None
    t2 = self.theclass(5, 6, 7, tzinfo=Naive())
    self.assertRaises(TypeError, (lambda : (t1 == t2)))
    self.assertEqual(t2, t2)
    t1 = self.theclass(5, 6, 7)
    self.assertEqual(t1, t2)


    class Bogus(tzinfo):

        def utcoffset(self, dt):
            return timedelta(minutes=1440)
    t1 = self.theclass(2, 2, 2, tzinfo=Bogus())
    t2 = self.theclass(2, 2, 2, tzinfo=FixedOffset(0, ''))
    self.assertRaises(ValueError, (lambda : (t1 == t2)))
