def test_tz_aware_arithmetic(self):
    import random
    now = self.theclass.now()
    tz55 = FixedOffset((-330), 'west 5:30')
    timeaware = now.time().replace(tzinfo=tz55)
    nowaware = self.theclass.combine(now.date(), timeaware)
    self.failUnless((nowaware.tzinfo is tz55))
    self.assertEqual(nowaware.timetz(), timeaware)
    self.assertRaises(TypeError, (lambda : (now - nowaware)))
    self.assertRaises(TypeError, (lambda : (nowaware - now)))
    self.assertRaises(TypeError, (lambda : (now + nowaware)))
    self.assertRaises(TypeError, (lambda : (nowaware + now)))
    self.assertRaises(TypeError, (lambda : (nowaware + nowaware)))
    self.assertEqual((now - now), timedelta(0))
    self.assertEqual((nowaware - nowaware), timedelta(0))
    delta = timedelta(weeks=1, minutes=12, microseconds=5678)
    nowawareplus = (nowaware + delta)
    self.failUnless((nowaware.tzinfo is tz55))
    nowawareplus2 = (delta + nowaware)
    self.failUnless((nowawareplus2.tzinfo is tz55))
    self.assertEqual(nowawareplus, nowawareplus2)
    diff = (nowawareplus - delta)
    self.failUnless((diff.tzinfo is tz55))
    self.assertEqual(nowaware, diff)
    self.assertRaises(TypeError, (lambda : (delta - nowawareplus)))
    self.assertEqual((nowawareplus - nowaware), delta)
    tzr = FixedOffset(random.randrange((-1439), 1440), 'randomtimezone')
    nowawareplus = nowawareplus.replace(tzinfo=tzr)
    self.failUnless((nowawareplus.tzinfo is tzr))
    got = (nowaware - nowawareplus)
    expected = ((nowawareplus.utcoffset() - nowaware.utcoffset()) - delta)
    self.assertEqual(got, expected)
    min = self.theclass(1, 1, 1, tzinfo=FixedOffset(1439, 'min'))
    max = self.theclass(MAXYEAR, 12, 31, 23, 59, 59, 999999, tzinfo=FixedOffset((-1439), 'max'))
    maxdiff = (max - min)
    self.assertEqual(maxdiff, ((self.theclass.max - self.theclass.min) + timedelta(minutes=(2 * 1439))))
