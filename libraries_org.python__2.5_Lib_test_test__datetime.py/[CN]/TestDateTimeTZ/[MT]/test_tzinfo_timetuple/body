def test_tzinfo_timetuple(self):


    class DST(tzinfo):

        def __init__(self, dstvalue):
            if isinstance(dstvalue, int):
                dstvalue = timedelta(minutes=dstvalue)
            self.dstvalue = dstvalue

        def dst(self, dt):
            return self.dstvalue
    cls = self.theclass
    for (dstvalue, flag) in (((-33), 1), (33, 1), (0, 0), (None, (-1))):
        d = cls(1, 1, 1, 10, 20, 30, 40, tzinfo=DST(dstvalue))
        t = d.timetuple()
        self.assertEqual(1, t.tm_year)
        self.assertEqual(1, t.tm_mon)
        self.assertEqual(1, t.tm_mday)
        self.assertEqual(10, t.tm_hour)
        self.assertEqual(20, t.tm_min)
        self.assertEqual(30, t.tm_sec)
        self.assertEqual(0, t.tm_wday)
        self.assertEqual(1, t.tm_yday)
        self.assertEqual(flag, t.tm_isdst)
    self.assertRaises(TypeError, cls(1, 1, 1, tzinfo=DST('x')).timetuple)
    self.assertEqual(cls(1, 1, 1, tzinfo=DST(1439)).timetuple().tm_isdst, 1)
    self.assertEqual(cls(1, 1, 1, tzinfo=DST((-1439))).timetuple().tm_isdst, 1)
    self.assertRaises(ValueError, cls(1, 1, 1, tzinfo=DST(1440)).timetuple)
    self.assertRaises(ValueError, cls(1, 1, 1, tzinfo=DST((-1440))).timetuple)
