def test_zones(self):
    est = FixedOffset((-300), 'EST')
    utc = FixedOffset(0, 'UTC')
    met = FixedOffset(60, 'MET')
    t1 = datetime(2002, 3, 19, 7, 47, tzinfo=est)
    t2 = datetime(2002, 3, 19, 12, 47, tzinfo=utc)
    t3 = datetime(2002, 3, 19, 13, 47, tzinfo=met)
    self.assertEqual(t1.tzinfo, est)
    self.assertEqual(t2.tzinfo, utc)
    self.assertEqual(t3.tzinfo, met)
    self.assertEqual(t1.utcoffset(), timedelta(minutes=(-300)))
    self.assertEqual(t2.utcoffset(), timedelta(minutes=0))
    self.assertEqual(t3.utcoffset(), timedelta(minutes=60))
    self.assertEqual(t1.tzname(), 'EST')
    self.assertEqual(t2.tzname(), 'UTC')
    self.assertEqual(t3.tzname(), 'MET')
    self.assertEqual(hash(t1), hash(t2))
    self.assertEqual(hash(t1), hash(t3))
    self.assertEqual(hash(t2), hash(t3))
    self.assertEqual(t1, t2)
    self.assertEqual(t1, t3)
    self.assertEqual(t2, t3)
    self.assertEqual(str(t1), '2002-03-19 07:47:00-05:00')
    self.assertEqual(str(t2), '2002-03-19 12:47:00+00:00')
    self.assertEqual(str(t3), '2002-03-19 13:47:00+01:00')
    d = 'datetime.datetime(2002, 3, 19, '
    self.assertEqual(repr(t1), (d + '7, 47, tzinfo=est)'))
    self.assertEqual(repr(t2), (d + '12, 47, tzinfo=utc)'))
    self.assertEqual(repr(t3), (d + '13, 47, tzinfo=met)'))
