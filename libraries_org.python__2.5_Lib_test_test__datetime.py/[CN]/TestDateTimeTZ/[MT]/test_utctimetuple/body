def test_utctimetuple(self):


    class DST(tzinfo):

        def __init__(self, dstvalue):
            if isinstance(dstvalue, int):
                dstvalue = timedelta(minutes=dstvalue)
            self.dstvalue = dstvalue

        def dst(self, dt):
            return self.dstvalue
    cls = self.theclass
    self.assertRaises(NotImplementedError, cls(1, 1, 1, tzinfo=DST(0)).utcoffset)


    class UOFS(DST):

        def __init__(self, uofs, dofs=None):
            DST.__init__(self, dofs)
            self.uofs = timedelta(minutes=uofs)

        def utcoffset(self, dt):
            return self.uofs
    for dstvalue in ((-33), 33, 0, None):
        d = cls(1, 2, 3, 10, 20, 30, 40, tzinfo=UOFS((-53), dstvalue))
        t = d.utctimetuple()
        self.assertEqual(d.year, t.tm_year)
        self.assertEqual(d.month, t.tm_mon)
        self.assertEqual(d.day, t.tm_mday)
        self.assertEqual(11, t.tm_hour)
        self.assertEqual(13, t.tm_min)
        self.assertEqual(d.second, t.tm_sec)
        self.assertEqual(d.weekday(), t.tm_wday)
        self.assertEqual(((d.toordinal() - date(1, 1, 1).toordinal()) + 1), t.tm_yday)
        self.assertEqual(0, t.tm_isdst)
    tiny = cls(MINYEAR, 1, 1, 0, 0, 37, tzinfo=UOFS(1439))
    t = tiny.utctimetuple()
    self.assertEqual(t.tm_year, (MINYEAR - 1))
    self.assertEqual(t.tm_mon, 12)
    self.assertEqual(t.tm_mday, 31)
    self.assertEqual(t.tm_hour, 0)
    self.assertEqual(t.tm_min, 1)
    self.assertEqual(t.tm_sec, 37)
    self.assertEqual(t.tm_yday, 366)
    self.assertEqual(t.tm_isdst, 0)
    huge = cls(MAXYEAR, 12, 31, 23, 59, 37, 999999, tzinfo=UOFS((-1439)))
    t = huge.utctimetuple()
    self.assertEqual(t.tm_year, (MAXYEAR + 1))
    self.assertEqual(t.tm_mon, 1)
    self.assertEqual(t.tm_mday, 1)
    self.assertEqual(t.tm_hour, 23)
    self.assertEqual(t.tm_min, 58)
    self.assertEqual(t.tm_sec, 37)
    self.assertEqual(t.tm_yday, 1)
    self.assertEqual(t.tm_isdst, 0)
