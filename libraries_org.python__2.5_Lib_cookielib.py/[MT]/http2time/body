def http2time(text):
    'Returns time in seconds since epoch of time represented by a string.\n\n    Return value is an integer.\n\n    None is returned if the format of str is unrecognized, the time is outside\n    the representable range, or the timezone string is not recognized.  If the\n    string contains no timezone, UTC is assumed.\n\n    The timezone in the string may be numerical (like "-0800" or "+0100") or a\n    string timezone (like "UTC", "GMT", "BST" or "EST").  Currently, only the\n    timezone strings equivalent to UTC (zero offset) are known to the function.\n\n    The function loosely parses the following formats:\n\n    Wed, 09 Feb 1994 22:23:32 GMT       -- HTTP format\n    Tuesday, 08-Feb-94 14:15:29 GMT     -- old rfc850 HTTP format\n    Tuesday, 08-Feb-1994 14:15:29 GMT   -- broken rfc850 HTTP format\n    09 Feb 1994 22:23:32 GMT            -- HTTP format (no weekday)\n    08-Feb-94 14:15:29 GMT              -- rfc850 format (no weekday)\n    08-Feb-1994 14:15:29 GMT            -- broken rfc850 format (no weekday)\n\n    The parser ignores leading and trailing whitespace.  The time may be\n    absent.\n\n    If the year is given with only 2 digits, the function will select the\n    century that makes the year closest to the current date.\n\n    '
    m = STRICT_DATE_RE.search(text)
    if m:
        g = m.groups()
        mon = (MONTHS_LOWER.index(g[1].lower()) + 1)
        tt = (int(g[2]), mon, int(g[0]), int(g[3]), int(g[4]), float(g[5]))
        return _timegm(tt)
    text = text.lstrip()
    text = WEEKDAY_RE.sub('', text, 1)
    (day, mon, yr, hr, min, sec, tz) = ([None] * 7)
    m = LOOSE_HTTP_DATE_RE.search(text)
    if (m is not None):
        (day, mon, yr, hr, min, sec, tz) = m.groups()
    else:
        return None
    return _str2time(day, mon, yr, hr, min, sec, tz)
