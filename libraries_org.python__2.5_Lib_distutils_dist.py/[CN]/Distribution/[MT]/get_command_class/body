def get_command_class(self, command):
    'Return the class that implements the Distutils command named by\n        \'command\'.  First we check the \'cmdclass\' dictionary; if the\n        command is mentioned there, we fetch the class object from the\n        dictionary and return it.  Otherwise we load the command module\n        ("distutils.command." + command) and fetch the command class from\n        the module.  The loaded class is also stored in \'cmdclass\'\n        to speed future calls to \'get_command_class()\'.\n\n        Raises DistutilsModuleError if the expected module could not be\n        found, or if that module does not define the expected class.\n        '
    klass = self.cmdclass.get(command)
    if klass:
        return klass
    for pkgname in self.get_command_packages():
        module_name = ('%s.%s' % (pkgname, command))
        klass_name = command
        try:
            __import__(module_name)
            module = sys.modules[module_name]
        except ImportError:
            continue
        try:
            klass = getattr(module, klass_name)
        except AttributeError:
            raise DistutilsModuleError, ("invalid command '%s' (no class '%s' in module '%s')" % (command, klass_name, module_name))
        self.cmdclass[command] = klass
        return klass
    raise DistutilsModuleError(("invalid command '%s'" % command))
