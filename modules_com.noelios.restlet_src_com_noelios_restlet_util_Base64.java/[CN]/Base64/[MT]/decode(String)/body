{
  char[] chars=encodedString.toCharArray();
  int newlineCount=0;
  for (  char c : chars) {
switch (c) {
case '\r':
case '\n':
      newlineCount++;
    break;
default :
}
}
int len=chars.length - newlineCount;
int numBytes=((len + 3) / 4) * 3;
if (len > 1) {
if (chars[chars.length - 2] == '=') {
  numBytes-=2;
}
 else if (chars[chars.length - 1] == '=') {
  numBytes--;
}
}
byte[] result=new byte[numBytes];
int newlineOffset=0;
for (int i=0; i < (len + 3) / 4; ++i) {
int charOffset=newlineOffset + (i * 4);
char c1=chars[charOffset++];
char c2=chars[charOffset++];
char c3=chars[charOffset++];
char c4=chars[charOffset++];
if (!(validChar(c1) && validChar(c2) && validChar(c3)&& validChar(c4))) {
  throw new IllegalArgumentException("Invalid Base64 character in block: '" + c1 + c2+ c3+ c4+ "'");
}
int x=DECODER_RING[c1] << 18 | DECODER_RING[c2] << 12 | (c3 == '=' ? 0 : DECODER_RING[c3] << 6) | (c4 == '=' ? 0 : DECODER_RING[c4]);
int byteOffset=i * 3;
result[byteOffset++]=(byte)(x >> 16);
if (c3 != '=') {
  result[byteOffset++]=(byte)((x >> 8) & 0xFF);
  if (c4 != '=') {
    result[byteOffset++]=(byte)(x & 0xFF);
  }
}
outer: while (chars.length > charOffset) {
switch (chars[charOffset++]) {
case '\r':
case '\n':
    newlineOffset++;
  break;
default :
break outer;
}
}
}
return result;
}
